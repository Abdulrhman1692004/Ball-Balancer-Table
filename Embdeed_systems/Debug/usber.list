
usber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800e908  0800e908  0000f908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edcc  0800edcc  0001034c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800edcc  0800edcc  0000fdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edd4  0800edd4  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edd4  0800edd4  0000fdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800edd8  0800edd8  0000fdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  0800eddc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000146c  2000034c  0800f128  0001034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b8  0800f128  000107b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011507  00000000  00000000  00010375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fc  00000000  00000000  0002187c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00024b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca1  00000000  00000000  00025c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aea4  00000000  00000000  000268d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014665  00000000  00000000  00041775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edde  00000000  00000000  00055dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4bb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  000e4bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ea8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e8f0 	.word	0x0800e8f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800e8f0 	.word	0x0800e8f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000
 800117c:	00000000 	.word	0x00000000

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f000 fd91 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f8f5 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 fa79 	bl	8001684 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001192:	f007 ff79 	bl	8009088 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001196:	f000 f949 	bl	800142c <MX_TIM1_Init>
  MX_TIM2_Init();
 800119a:	f000 f9f3 	bl	8001584 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800119e:	2100      	movs	r1, #0
 80011a0:	485f      	ldr	r0, [pc, #380]	@ (8001320 <main+0x1a0>)
 80011a2:	f003 fb13 	bl	80047cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80011a6:	2104      	movs	r1, #4
 80011a8:	485d      	ldr	r0, [pc, #372]	@ (8001320 <main+0x1a0>)
 80011aa:	f003 fb0f 	bl	80047cc <HAL_TIM_PWM_Start>
  PID_Init(&PID_servox, KP, KI, KD, SAMPLING_PERIOD);
 80011ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001324 <main+0x1a4>)
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001328 <main+0x1a8>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b5d      	ldr	r3, [pc, #372]	@ (800132c <main+0x1ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	485d      	ldr	r0, [pc, #372]	@ (8001330 <main+0x1b0>)
 80011bc:	9000      	str	r0, [sp, #0]
 80011be:	485d      	ldr	r0, [pc, #372]	@ (8001334 <main+0x1b4>)
 80011c0:	f000 fb12 	bl	80017e8 <PID_Init>
  PID_Init(&PID_servoy, KP, KI, KD,SAMPLING_PERIOD);
 80011c4:	4b57      	ldr	r3, [pc, #348]	@ (8001324 <main+0x1a4>)
 80011c6:	6819      	ldr	r1, [r3, #0]
 80011c8:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <main+0x1a8>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b57      	ldr	r3, [pc, #348]	@ (800132c <main+0x1ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4857      	ldr	r0, [pc, #348]	@ (8001330 <main+0x1b0>)
 80011d2:	9000      	str	r0, [sp, #0]
 80011d4:	4858      	ldr	r0, [pc, #352]	@ (8001338 <main+0x1b8>)
 80011d6:	f000 fb07 	bl	80017e8 <PID_Init>

  int loop_timer = HAL_GetTick();
 80011da:	f000 fdbf 	bl	8001d5c <HAL_GetTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(usb_data_ready){
 80011e2:	4b56      	ldr	r3, [pc, #344]	@ (800133c <main+0x1bc>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0fa      	beq.n	80011e2 <main+0x62>
		  // Receiving the data from the buffer:
		  if (sscanf(buffer, "%f,%f,%f,%f" ,&target_x,&target_y,&current_x,&current_y) == 4){
 80011ec:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <main+0x1c0>)
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	4b54      	ldr	r3, [pc, #336]	@ (8001344 <main+0x1c4>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <main+0x1c8>)
 80011f6:	4a55      	ldr	r2, [pc, #340]	@ (800134c <main+0x1cc>)
 80011f8:	4955      	ldr	r1, [pc, #340]	@ (8001350 <main+0x1d0>)
 80011fa:	4856      	ldr	r0, [pc, #344]	@ (8001354 <main+0x1d4>)
 80011fc:	f009 fb3a 	bl	800a874 <siscanf>
 8001200:	4603      	mov	r3, r0
 8001202:	2b04      	cmp	r3, #4
 8001204:	d1ed      	bne.n	80011e2 <main+0x62>
			  error_x = (target_x - current_x)/100;
 8001206:	4b51      	ldr	r3, [pc, #324]	@ (800134c <main+0x1cc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a4e      	ldr	r2, [pc, #312]	@ (8001344 <main+0x1c4>)
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fcad 	bl	8000b70 <__aeabi_fsub>
 8001216:	4603      	mov	r3, r0
 8001218:	494f      	ldr	r1, [pc, #316]	@ (8001358 <main+0x1d8>)
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe66 	bl	8000eec <__aeabi_fdiv>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b4d      	ldr	r3, [pc, #308]	@ (800135c <main+0x1dc>)
 8001226:	601a      	str	r2, [r3, #0]
			  error_y = (target_y - current_y)/100;
 8001228:	4b47      	ldr	r3, [pc, #284]	@ (8001348 <main+0x1c8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a44      	ldr	r2, [pc, #272]	@ (8001340 <main+0x1c0>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fc9c 	bl	8000b70 <__aeabi_fsub>
 8001238:	4603      	mov	r3, r0
 800123a:	4947      	ldr	r1, [pc, #284]	@ (8001358 <main+0x1d8>)
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe55 	bl	8000eec <__aeabi_fdiv>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b46      	ldr	r3, [pc, #280]	@ (8001360 <main+0x1e0>)
 8001248:	601a      	str	r2, [r3, #0]
			  //resetting the buffer:
			  int now = HAL_GetTick();
 800124a:	f000 fd87 	bl	8001d5c <HAL_GetTick>
 800124e:	4603      	mov	r3, r0
 8001250:	603b      	str	r3, [r7, #0]
			  if ((now - loop_timer) >= (SAMPLING_PERIOD * 1000.0f)) {
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd3f 	bl	8000cdc <__aeabi_i2f>
 800125e:	4603      	mov	r3, r0
 8001260:	4940      	ldr	r1, [pc, #256]	@ (8001364 <main+0x1e4>)
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff40 	bl	80010e8 <__aeabi_fcmpge>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d04e      	beq.n	800130c <main+0x18c>
				  //The motors have been inverted
					  uy = 102  + (PID_signal(&PID_servoy, error_y) * 57.2);
 800126e:	4b3c      	ldr	r3, [pc, #240]	@ (8001360 <main+0x1e0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	4830      	ldr	r0, [pc, #192]	@ (8001338 <main+0x1b8>)
 8001276:	f000 fad3 	bl	8001820 <PID_signal>
 800127a:	4603      	mov	r3, r0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f8d3 	bl	8000428 <__aeabi_f2d>
 8001282:	a325      	add	r3, pc, #148	@ (adr r3, 8001318 <main+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f926 	bl	80004d8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <main+0x1e8>)
 800129a:	f7fe ff67 	bl	800016c <__adddf3>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc0f 	bl	8000ac8 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <main+0x1ec>)
 80012ae:	6013      	str	r3, [r2, #0]
					  ux = 85 + (PID_signal(&PID_servox, error_x) * 57.2);
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <main+0x1dc>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	481f      	ldr	r0, [pc, #124]	@ (8001334 <main+0x1b4>)
 80012b8:	f000 fab2 	bl	8001820 <PID_signal>
 80012bc:	4603      	mov	r3, r0
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f8b2 	bl	8000428 <__aeabi_f2d>
 80012c4:	a314      	add	r3, pc, #80	@ (adr r3, 8001318 <main+0x198>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff f905 	bl	80004d8 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <main+0x1f0>)
 80012dc:	f7fe ff46 	bl	800016c <__adddf3>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fbee 	bl	8000ac8 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <main+0x1f4>)
 80012f0:	6013      	str	r3, [r2, #0]
					  	 //servo2 became the x and servo1 became the y, as per now: 10/4/2025 due to the cahnges of the motor
					  servo1(uy);
 80012f2:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <main+0x1ec>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f9e6 	bl	80016c8 <servo1>
					  servo2(ux);
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <main+0x1f4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fa29 	bl	8001758 <servo2>

				  loop_timer += (unsigned long)(SAMPLING_PERIOD * 1000.0f);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3326      	adds	r3, #38	@ 0x26
 800130a:	607b      	str	r3, [r7, #4]
			  }
			  memset(buffer, 0, sizeof(buffer));
 800130c:	2240      	movs	r2, #64	@ 0x40
 800130e:	2100      	movs	r1, #0
 8001310:	4810      	ldr	r0, [pc, #64]	@ (8001354 <main+0x1d4>)
 8001312:	f009 fb20 	bl	800a956 <memset>
	  if(usb_data_ready){
 8001316:	e764      	b.n	80011e2 <main+0x62>
 8001318:	9999999a 	.word	0x9999999a
 800131c:	404c9999 	.word	0x404c9999
 8001320:	20000368 	.word	0x20000368
 8001324:	20000000 	.word	0x20000000
 8001328:	20000408 	.word	0x20000408
 800132c:	20000004 	.word	0x20000004
 8001330:	3d1d89d9 	.word	0x3d1d89d9
 8001334:	20000450 	.word	0x20000450
 8001338:	20000470 	.word	0x20000470
 800133c:	2000044c 	.word	0x2000044c
 8001340:	20000404 	.word	0x20000404
 8001344:	20000400 	.word	0x20000400
 8001348:	200003fc 	.word	0x200003fc
 800134c:	200003f8 	.word	0x200003f8
 8001350:	0800e908 	.word	0x0800e908
 8001354:	2000040c 	.word	0x2000040c
 8001358:	42c80000 	.word	0x42c80000
 800135c:	20000498 	.word	0x20000498
 8001360:	2000049c 	.word	0x2000049c
 8001364:	4219d89e 	.word	0x4219d89e
 8001368:	40598000 	.word	0x40598000
 800136c:	20000494 	.word	0x20000494
 8001370:	40554000 	.word	0x40554000
 8001374:	20000490 	.word	0x20000490

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	@ 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001382:	2228      	movs	r2, #40	@ 0x28
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f009 fae5 	bl	800a956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b6:	2301      	movs	r3, #1
 80013b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ba:	2302      	movs	r3, #2
 80013bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013c4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fcc0 	bl	8003d54 <HAL_RCC_OscConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013da:	f000 fa89 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013de:	230f      	movs	r3, #15
 80013e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2102      	movs	r1, #2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 ff2c 	bl	8004258 <HAL_RCC_ClockConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001406:	f000 fa73 	bl	80018f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800140a:	2310      	movs	r3, #16
 800140c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f003 f87b 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001420:	f000 fa66 	bl	80018f0 <Error_Handler>
  }
}
 8001424:	bf00      	nop
 8001426:	3750      	adds	r7, #80	@ 0x50
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b096      	sub	sp, #88	@ 0x58
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2220      	movs	r2, #32
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f009 fa76 	bl	800a956 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800146a:	4b44      	ldr	r3, [pc, #272]	@ (800157c <MX_TIM1_Init+0x150>)
 800146c:	4a44      	ldr	r2, [pc, #272]	@ (8001580 <MX_TIM1_Init+0x154>)
 800146e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001470:	4b42      	ldr	r3, [pc, #264]	@ (800157c <MX_TIM1_Init+0x150>)
 8001472:	2247      	movs	r2, #71	@ 0x47
 8001474:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <MX_TIM1_Init+0x150>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800147c:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <MX_TIM1_Init+0x150>)
 800147e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001482:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <MX_TIM1_Init+0x150>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <MX_TIM1_Init+0x150>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <MX_TIM1_Init+0x150>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001496:	4839      	ldr	r0, [pc, #228]	@ (800157c <MX_TIM1_Init+0x150>)
 8001498:	f003 f8f0 	bl	800467c <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014a2:	f000 fa25 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014b0:	4619      	mov	r1, r3
 80014b2:	4832      	ldr	r0, [pc, #200]	@ (800157c <MX_TIM1_Init+0x150>)
 80014b4:	f003 faee 	bl	8004a94 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014be:	f000 fa17 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014c2:	482e      	ldr	r0, [pc, #184]	@ (800157c <MX_TIM1_Init+0x150>)
 80014c4:	f003 f929 	bl	800471a <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014ce:	f000 fa0f 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014de:	4619      	mov	r1, r3
 80014e0:	4826      	ldr	r0, [pc, #152]	@ (800157c <MX_TIM1_Init+0x150>)
 80014e2:	f003 fe4f 	bl	8005184 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014ec:	f000 fa00 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	@ 0x60
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	4819      	ldr	r0, [pc, #100]	@ (800157c <MX_TIM1_Init+0x150>)
 8001516:	f003 f9fb 	bl	8004910 <HAL_TIM_PWM_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001520:	f000 f9e6 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	2204      	movs	r2, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4813      	ldr	r0, [pc, #76]	@ (800157c <MX_TIM1_Init+0x150>)
 800152e:	f003 f9ef 	bl	8004910 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001538:	f000 f9da 	bl	80018f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM1_Init+0x150>)
 8001560:	f003 fe6e 	bl	8005240 <HAL_TIMEx_ConfigBreakDeadTime>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800156a:	f000 f9c1 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM1_Init+0x150>)
 8001570:	f000 fa26 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3758      	adds	r7, #88	@ 0x58
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000368 	.word	0x20000368
 8001580:	40012c00 	.word	0x40012c00

08001584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	@ 0x38
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015bc:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015dc:	4828      	ldr	r0, [pc, #160]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015de:	f003 f84d 	bl	800467c <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015e8:	f000 f982 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4821      	ldr	r0, [pc, #132]	@ (8001680 <MX_TIM2_Init+0xfc>)
 80015fa:	f003 fa4b 	bl	8004a94 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001604:	f000 f974 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001608:	481d      	ldr	r0, [pc, #116]	@ (8001680 <MX_TIM2_Init+0xfc>)
 800160a:	f003 f886 	bl	800471a <HAL_TIM_PWM_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001614:	f000 f96c 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4619      	mov	r1, r3
 8001626:	4816      	ldr	r0, [pc, #88]	@ (8001680 <MX_TIM2_Init+0xfc>)
 8001628:	f003 fdac 	bl	8005184 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001632:	f000 f95d 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001636:	2360      	movs	r3, #96	@ 0x60
 8001638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	@ (8001680 <MX_TIM2_Init+0xfc>)
 800164e:	f003 f95f 	bl	8004910 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001658:	f000 f94a 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2204      	movs	r2, #4
 8001660:	4619      	mov	r1, r3
 8001662:	4807      	ldr	r0, [pc, #28]	@ (8001680 <MX_TIM2_Init+0xfc>)
 8001664:	f003 f954 	bl	8004910 <HAL_TIM_PWM_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800166e:	f000 f93f 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001672:	4803      	ldr	r0, [pc, #12]	@ (8001680 <MX_TIM2_Init+0xfc>)
 8001674:	f000 f9a4 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 8001678:	bf00      	nop
 800167a:	3738      	adds	r7, #56	@ 0x38
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200003b0 	.word	0x200003b0

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_GPIO_Init+0x40>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <MX_GPIO_Init+0x40>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <MX_GPIO_Init+0x40>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <MX_GPIO_Init+0x40>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <MX_GPIO_Init+0x40>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <MX_GPIO_Init+0x40>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <servo1>:

/* USER CODE BEGIN 4 */
void servo1(float angle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    if (angle < 0) angle = 0;
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fcf3 	bl	80010c0 <__aeabi_fcmplt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <servo1+0x1e>
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
    if (angle > 180) angle = 180;
 80016e6:	491a      	ldr	r1, [pc, #104]	@ (8001750 <servo1+0x88>)
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fd07 	bl	80010fc <__aeabi_fcmpgt>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <servo1+0x30>
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <servo1+0x88>)
 80016f6:	607b      	str	r3, [r7, #4]

 int pwm = (11.00556*angle) + 486.83;
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7fe fe95 	bl	8000428 <__aeabi_f2d>
 80016fe:	a310      	add	r3, pc, #64	@ (adr r3, 8001740 <servo1+0x78>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe fee8 	bl	80004d8 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	a30d      	add	r3, pc, #52	@ (adr r3, 8001748 <servo1+0x80>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe fd29 	bl	800016c <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f989 	bl	8000a38 <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]
 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);  // 0°
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <servo1+0x8c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	c2a454de 	.word	0xc2a454de
 8001744:	402602d8 	.word	0x402602d8
 8001748:	ae147ae1 	.word	0xae147ae1
 800174c:	407e6d47 	.word	0x407e6d47
 8001750:	43340000 	.word	0x43340000
 8001754:	20000368 	.word	0x20000368

08001758 <servo2>:
void servo2(float angle)
{    if (angle < 0) angle = 0;
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fcab 	bl	80010c0 <__aeabi_fcmplt>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <servo2+0x1e>
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
if (angle > 180) angle = 180;
 8001776:	491a      	ldr	r1, [pc, #104]	@ (80017e0 <servo2+0x88>)
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fcbf 	bl	80010fc <__aeabi_fcmpgt>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <servo2+0x30>
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <servo2+0x88>)
 8001786:	607b      	str	r3, [r7, #4]

int pwm = (11.00556*angle) + 486.83; //angle_PWM relation at counter period 20000
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7fe fe4d 	bl	8000428 <__aeabi_f2d>
 800178e:	a310      	add	r3, pc, #64	@ (adr r3, 80017d0 <servo2+0x78>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fea0 	bl	80004d8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a30d      	add	r3, pc, #52	@ (adr r3, 80017d8 <servo2+0x80>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fce1 	bl	800016c <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f941 	bl	8000a38 <__aeabi_d2iz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	60fb      	str	r3, [r7, #12]
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);  // 0°
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <servo2+0x8c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w
 80017d0:	c2a454de 	.word	0xc2a454de
 80017d4:	402602d8 	.word	0x402602d8
 80017d8:	ae147ae1 	.word	0xae147ae1
 80017dc:	407e6d47 	.word	0x407e6d47
 80017e0:	43340000 	.word	0x43340000
 80017e4:	20000368 	.word	0x20000368

080017e8 <PID_Init>:
void PID_Init(PIDController *pid, float kp, float ki, float kd,float dt) {
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]

  /* Set the Gains */
  pid->kp = kp;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	601a      	str	r2, [r3, #0]
  pid->ki = ki;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	605a      	str	r2, [r3, #4]
  pid->kd = kd;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	609a      	str	r2, [r3, #8]


  /* Set the Sampling Period */
  pid->T = dt;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	61da      	str	r2, [r3, #28]

  /* Clear controller variables */
  pid->prevError  = 0.0f;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <PID_signal>:


float PID_signal(PIDController *pid, volatile float e){
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

    float Ts = pid->T, e_old=pid->prevError, control_signal;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	613b      	str	r3, [r7, #16]

    pid->proportional = (pid->kp)*e;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff faa0 	bl	8000d84 <__aeabi_fmul>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	611a      	str	r2, [r3, #16]

    pid->differential = (pid->kd) * (e - e_old)/Ts;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689c      	ldr	r4, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6939      	ldr	r1, [r7, #16]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff f98b 	bl	8000b70 <__aeabi_fsub>
 800185a:	4603      	mov	r3, r0
 800185c:	4619      	mov	r1, r3
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fa90 	bl	8000d84 <__aeabi_fmul>
 8001864:	4603      	mov	r3, r0
 8001866:	6979      	ldr	r1, [r7, #20]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fb3f 	bl	8000eec <__aeabi_fdiv>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	615a      	str	r2, [r3, #20]

    pid->integral += (pid->ki) * ((e + e_old)/2.0f) * Ts;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685c      	ldr	r4, [r3, #4]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6939      	ldr	r1, [r7, #16]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f978 	bl	8000b74 <__addsf3>
 8001884:	4603      	mov	r3, r0
 8001886:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fb2e 	bl	8000eec <__aeabi_fdiv>
 8001890:	4603      	mov	r3, r0
 8001892:	4619      	mov	r1, r3
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff fa75 	bl	8000d84 <__aeabi_fmul>
 800189a:	4603      	mov	r3, r0
 800189c:	6979      	ldr	r1, [r7, #20]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fa70 	bl	8000d84 <__aeabi_fmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff f960 	bl	8000b74 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]

    control_signal =  (pid->proportional + pid->differential + pid->integral);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f7ff f954 	bl	8000b74 <__addsf3>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f7ff f94c 	bl	8000b74 <__addsf3>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]

    pid->prevError = e;
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60da      	str	r2, [r3, #12]


    return control_signal;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <Error_Handler+0x8>

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a14      	ldr	r2, [pc, #80]	@ (8001958 <HAL_MspInit+0x5c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a0e      	ldr	r2, [pc, #56]	@ (8001958 <HAL_MspInit+0x5c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_MspInit+0x60>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_MspInit+0x60>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000

08001960 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <HAL_TIM_Base_MspInit+0x58>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d10c      	bne.n	800198c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_TIM_Base_MspInit+0x5c>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <HAL_TIM_Base_MspInit+0x5c>)
 8001978:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_TIM_Base_MspInit+0x5c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800198a:	e010      	b.n	80019ae <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_TIM_Base_MspInit+0x5c>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_TIM_Base_MspInit+0x5c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_TIM_Base_MspInit+0x5c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <HAL_TIM_MspPostInit+0x98>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d119      	bne.n	8001a14 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <HAL_TIM_MspPostInit+0x9c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a5c <HAL_TIM_MspPostInit+0x9c>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_TIM_MspPostInit+0x9c>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4814      	ldr	r0, [pc, #80]	@ (8001a60 <HAL_TIM_MspPostInit+0xa0>)
 8001a0e:	f000 fabd 	bl	8001f8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a12:	e01c      	b.n	8001a4e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1c:	d117      	bne.n	8001a4e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_TIM_MspPostInit+0x9c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <HAL_TIM_MspPostInit+0x9c>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_TIM_MspPostInit+0x9c>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a36:	2303      	movs	r3, #3
 8001a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_TIM_MspPostInit+0xa0>)
 8001a4a:	f000 fa9f 	bl	8001f8c <HAL_GPIO_Init>
}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010800 	.word	0x40010800

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <NMI_Handler+0x4>

08001a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab4:	f000 f940 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ac2:	f000 fd03 	bl	80024cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20001174 	.word	0x20001174

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <_kill>:

int _kill(int pid, int sig)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae8:	f008 ff88 	bl	800a9fc <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2216      	movs	r2, #22
 8001af0:	601a      	str	r2, [r3, #0]
  return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_exit>:

void _exit (int status)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b06:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffe7 	bl	8001ade <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <_exit+0x12>

08001b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e00a      	b.n	8001b3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b26:	f3af 8000 	nop.w
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <_read+0x12>
  }

  return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e009      	b.n	8001b74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf1      	blt.n	8001b60 <_write+0x12>
  }
  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_close>:

int _close(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bac:	605a      	str	r2, [r3, #4]
  return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
	...

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f008 fef0 	bl	800a9fc <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20005000 	.word	0x20005000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	200004a0 	.word	0x200004a0
 8001c50:	200017b8 	.word	0x200017b8

08001c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c60:	f7ff fff8 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c64:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c66:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c68:	4a0c      	ldr	r2, [pc, #48]	@ (8001c9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c7c:	4c09      	ldr	r4, [pc, #36]	@ (8001ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f008 febd 	bl	800aa08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c8e:	f7ff fa77 	bl	8001180 <main>
  bx lr
 8001c92:	4770      	bx	lr
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001c9c:	0800eddc 	.word	0x0800eddc
  ldr r2, =_sbss
 8001ca0:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001ca4:	200017b8 	.word	0x200017b8

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_Init+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_Init+0x28>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f923 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	200f      	movs	r0, #15
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fe18 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f93b 	bl	8001f72 <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 f903 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	@ (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	20000010 	.word	0x20000010
 8001d34:	2000000c 	.word	0x2000000c

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_IncTick+0x1c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_IncTick+0x20>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a03      	ldr	r2, [pc, #12]	@ (8001d58 <HAL_IncTick+0x20>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000010 	.word	0x20000010
 8001d58:	200004a4 	.word	0x200004a4

08001d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b02      	ldr	r3, [pc, #8]	@ (8001d6c <HAL_GetTick+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	200004a4 	.word	0x200004a4

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4906      	ldr	r1, [pc, #24]	@ (8001e08 <__NVIC_EnableIRQ+0x34>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	@ (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	@ (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	@ 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff90 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff2d 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff42 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff90 	bl	8001e60 <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5f 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff35 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b08b      	sub	sp, #44	@ 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	e169      	b.n	8002274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8158 	bne.w	800226e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a9a      	ldr	r2, [pc, #616]	@ (800222c <HAL_GPIO_Init+0x2a0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05e      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fc8:	4a98      	ldr	r2, [pc, #608]	@ (800222c <HAL_GPIO_Init+0x2a0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d875      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fce:	4a98      	ldr	r2, [pc, #608]	@ (8002230 <HAL_GPIO_Init+0x2a4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d058      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fd4:	4a96      	ldr	r2, [pc, #600]	@ (8002230 <HAL_GPIO_Init+0x2a4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d86f      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fda:	4a96      	ldr	r2, [pc, #600]	@ (8002234 <HAL_GPIO_Init+0x2a8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d052      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fe0:	4a94      	ldr	r2, [pc, #592]	@ (8002234 <HAL_GPIO_Init+0x2a8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d869      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fe6:	4a94      	ldr	r2, [pc, #592]	@ (8002238 <HAL_GPIO_Init+0x2ac>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d04c      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fec:	4a92      	ldr	r2, [pc, #584]	@ (8002238 <HAL_GPIO_Init+0x2ac>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d863      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001ff2:	4a92      	ldr	r2, [pc, #584]	@ (800223c <HAL_GPIO_Init+0x2b0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d046      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001ff8:	4a90      	ldr	r2, [pc, #576]	@ (800223c <HAL_GPIO_Init+0x2b0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d85d      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001ffe:	2b12      	cmp	r3, #18
 8002000:	d82a      	bhi.n	8002058 <HAL_GPIO_Init+0xcc>
 8002002:	2b12      	cmp	r3, #18
 8002004:	d859      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8002006:	a201      	add	r2, pc, #4	@ (adr r2, 800200c <HAL_GPIO_Init+0x80>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	08002087 	.word	0x08002087
 8002010:	08002061 	.word	0x08002061
 8002014:	08002073 	.word	0x08002073
 8002018:	080020b5 	.word	0x080020b5
 800201c:	080020bb 	.word	0x080020bb
 8002020:	080020bb 	.word	0x080020bb
 8002024:	080020bb 	.word	0x080020bb
 8002028:	080020bb 	.word	0x080020bb
 800202c:	080020bb 	.word	0x080020bb
 8002030:	080020bb 	.word	0x080020bb
 8002034:	080020bb 	.word	0x080020bb
 8002038:	080020bb 	.word	0x080020bb
 800203c:	080020bb 	.word	0x080020bb
 8002040:	080020bb 	.word	0x080020bb
 8002044:	080020bb 	.word	0x080020bb
 8002048:	080020bb 	.word	0x080020bb
 800204c:	080020bb 	.word	0x080020bb
 8002050:	08002069 	.word	0x08002069
 8002054:	0800207d 	.word	0x0800207d
 8002058:	4a79      	ldr	r2, [pc, #484]	@ (8002240 <HAL_GPIO_Init+0x2b4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800205e:	e02c      	b.n	80020ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e029      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	3304      	adds	r3, #4
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e024      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	3308      	adds	r3, #8
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e01f      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	330c      	adds	r3, #12
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e01a      	b.n	80020bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800208e:	2304      	movs	r3, #4
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e013      	b.n	80020bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	611a      	str	r2, [r3, #16]
          break;
 80020a6:	e009      	b.n	80020bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a8:	2308      	movs	r3, #8
 80020aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	615a      	str	r2, [r3, #20]
          break;
 80020b2:	e003      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x130>
          break;
 80020ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2bff      	cmp	r3, #255	@ 0xff
 80020c0:	d801      	bhi.n	80020c6 <HAL_GPIO_Init+0x13a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	e001      	b.n	80020ca <HAL_GPIO_Init+0x13e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3304      	adds	r3, #4
 80020ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2bff      	cmp	r3, #255	@ 0xff
 80020d0:	d802      	bhi.n	80020d8 <HAL_GPIO_Init+0x14c>
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0x152>
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	3b08      	subs	r3, #8
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	210f      	movs	r1, #15
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80b1 	beq.w	800226e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	@ (8002244 <HAL_GPIO_Init+0x2b8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a4c      	ldr	r2, [pc, #304]	@ (8002244 <HAL_GPIO_Init+0x2b8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <HAL_GPIO_Init+0x2b8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002124:	4a48      	ldr	r2, [pc, #288]	@ (8002248 <HAL_GPIO_Init+0x2bc>)
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a40      	ldr	r2, [pc, #256]	@ (800224c <HAL_GPIO_Init+0x2c0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_GPIO_Init+0x1ec>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3f      	ldr	r2, [pc, #252]	@ (8002250 <HAL_GPIO_Init+0x2c4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00d      	beq.n	8002174 <HAL_GPIO_Init+0x1e8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3e      	ldr	r2, [pc, #248]	@ (8002254 <HAL_GPIO_Init+0x2c8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <HAL_GPIO_Init+0x1e4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3d      	ldr	r2, [pc, #244]	@ (8002258 <HAL_GPIO_Init+0x2cc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_GPIO_Init+0x1e0>
 8002168:	2303      	movs	r3, #3
 800216a:	e006      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 800216c:	2304      	movs	r3, #4
 800216e:	e004      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002170:	2302      	movs	r3, #2
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002178:	2300      	movs	r3, #0
 800217a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4093      	lsls	r3, r2
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800218a:	492f      	ldr	r1, [pc, #188]	@ (8002248 <HAL_GPIO_Init+0x2bc>)
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	492c      	ldr	r1, [pc, #176]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b2:	4b2a      	ldr	r3, [pc, #168]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4928      	ldr	r1, [pc, #160]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	4922      	ldr	r1, [pc, #136]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021da:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	491e      	ldr	r1, [pc, #120]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4918      	ldr	r1, [pc, #96]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4914      	ldr	r1, [pc, #80]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d021      	beq.n	8002260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	490e      	ldr	r1, [pc, #56]	@ (800225c <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e021      	b.n	800226e <HAL_GPIO_Init+0x2e2>
 800222a:	bf00      	nop
 800222c:	10320000 	.word	0x10320000
 8002230:	10310000 	.word	0x10310000
 8002234:	10220000 	.word	0x10220000
 8002238:	10210000 	.word	0x10210000
 800223c:	10120000 	.word	0x10120000
 8002240:	10110000 	.word	0x10110000
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	40010800 	.word	0x40010800
 8002250:	40010c00 	.word	0x40010c00
 8002254:	40011000 	.word	0x40011000
 8002258:	40011400 	.word	0x40011400
 800225c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_GPIO_Init+0x304>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	43db      	mvns	r3, r3
 8002268:	4909      	ldr	r1, [pc, #36]	@ (8002290 <HAL_GPIO_Init+0x304>)
 800226a:	4013      	ands	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	3301      	adds	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f ae8e 	bne.w	8001fa0 <HAL_GPIO_Init+0x14>
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	372c      	adds	r7, #44	@ 0x2c
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0e8      	b.n	8002478 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f007 f8e8 	bl	8009490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 f828 	bl	8005328 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e2:	f002 fffe 	bl	80052e2 <USB_CoreInit>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0bf      	b.n	8002478 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 f82c 	bl	800535c <USB_SetCurrentMode>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0b0      	b.n	8002478 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e03e      	b.n	800239a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3311      	adds	r3, #17
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	3310      	adds	r3, #16
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3313      	adds	r3, #19
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3320      	adds	r3, #32
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	3324      	adds	r3, #36	@ 0x24
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	3301      	adds	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	791b      	ldrb	r3, [r3, #4]
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3bb      	bcc.n	800231c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e044      	b.n	8002434 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	3301      	adds	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	429a      	cmp	r2, r3
 800243c:	d3b5      	bcc.n	80023aa <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002448:	f002 ff94 	bl	8005374 <USB_DevInit>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00c      	b.n	8002478 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f005 fa14 	bl	800789e <USB_DevDisconnect>

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_PCD_Start+0x16>
 8002492:	2302      	movs	r3, #2
 8002494:	e016      	b.n	80024c4 <HAL_PCD_Start+0x44>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 ff2a 	bl	80052fc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80024a8:	2101      	movs	r1, #1
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f007 fa63 	bl	8009976 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 f9e8 	bl	800788a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f005 f9ea 	bl	80078b2 <USB_ReadInterrupts>
 80024de:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fb1a 	bl	8002b24 <PCD_EP_ISR_Handler>

    return;
 80024f0:	e119      	b.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800250e:	b292      	uxth	r2, r2
 8002510:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f007 f836 	bl	8009586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800251a:	2100      	movs	r1, #0
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f905 	bl	800272c <HAL_PCD_SetAddress>

    return;
 8002522:	e100      	b.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002540:	b292      	uxth	r2, r2
 8002542:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002546:	e0ee      	b.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00c      	beq.n	800256c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002564:	b292      	uxth	r2, r2
 8002566:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800256a:	e0dc      	b.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d027      	beq.n	80025c6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0204 	bic.w	r2, r2, #4
 8002588:	b292      	uxth	r2, r2
 800258a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0208 	bic.w	r2, r2, #8
 80025a0:	b292      	uxth	r2, r2
 80025a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f007 f826 	bl	80095f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025be:	b292      	uxth	r2, r2
 80025c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025c4:	e0af      	b.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8083 	beq.w	80026d8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	77fb      	strb	r3, [r7, #31]
 80025d6:	e010      	b.n	80025fa <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	7ffb      	ldrb	r3, [r7, #31]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	441a      	add	r2, r3
 80025e4:	7ffb      	ldrb	r3, [r7, #31]
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	b292      	uxth	r2, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	3320      	adds	r3, #32
 80025ee:	443b      	add	r3, r7
 80025f0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
 80025f6:	3301      	adds	r3, #1
 80025f8:	77fb      	strb	r3, [r7, #31]
 80025fa:	7ffb      	ldrb	r3, [r7, #31]
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d9eb      	bls.n	80025d8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	b292      	uxth	r2, r2
 8002614:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	b292      	uxth	r2, r2
 800262c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002630:	bf00      	nop
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800263a:	b29b      	uxth	r3, r3
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f6      	beq.n	8002632 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002656:	b292      	uxth	r2, r2
 8002658:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	77fb      	strb	r3, [r7, #31]
 8002660:	e00f      	b.n	8002682 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	4611      	mov	r1, r2
 800266a:	7ffa      	ldrb	r2, [r7, #31]
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	440a      	add	r2, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	3320      	adds	r3, #32
 8002674:	443b      	add	r3, r7
 8002676:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800267a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800267c:	7ffb      	ldrb	r3, [r7, #31]
 800267e:	3301      	adds	r3, #1
 8002680:	77fb      	strb	r3, [r7, #31]
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b07      	cmp	r3, #7
 8002686:	d9ec      	bls.n	8002662 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	b292      	uxth	r2, r2
 800269c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b2:	b292      	uxth	r2, r2
 80026b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0204 	orr.w	r2, r2, #4
 80026ca:	b292      	uxth	r2, r2
 80026cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f006 ff77 	bl	80095c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026d6:	e026      	b.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00f      	beq.n	8002702 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026f4:	b292      	uxth	r2, r2
 80026f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f006 ff35 	bl	800956a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002700:	e011      	b.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00c      	beq.n	8002726 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800271e:	b292      	uxth	r2, r2
 8002720:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002724:	bf00      	nop
  }
}
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_PCD_SetAddress+0x1a>
 8002742:	2302      	movs	r3, #2
 8002744:	e012      	b.n	800276c <HAL_PCD_SetAddress+0x40>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f005 f881 	bl	8007864 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	70fb      	strb	r3, [r7, #3]
 8002786:	460b      	mov	r3, r1
 8002788:	803b      	strh	r3, [r7, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da0e      	bge.n	80027b8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 0207 	and.w	r2, r3, #7
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	3310      	adds	r3, #16
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	705a      	strb	r2, [r3, #1]
 80027b6:	e00e      	b.n	80027d6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 0207 	and.w	r2, r3, #7
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027e2:	883a      	ldrh	r2, [r7, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	78ba      	ldrb	r2, [r7, #2]
 80027ec:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027ee:	78bb      	ldrb	r3, [r7, #2]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d102      	bne.n	80027fa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_PCD_EP_Open+0x94>
 8002804:	2302      	movs	r3, #2
 8002806:	e00e      	b.n	8002826 <HAL_PCD_EP_Open+0xb2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	4618      	mov	r0, r3
 8002818:	f002 fdca 	bl	80053b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002824:	7afb      	ldrb	r3, [r7, #11]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800283a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283e:	2b00      	cmp	r3, #0
 8002840:	da0e      	bge.n	8002860 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	f003 0207 	and.w	r2, r3, #7
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	3310      	adds	r3, #16
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	705a      	strb	r2, [r3, #1]
 800285e:	e00e      	b.n	800287e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_PCD_EP_Close+0x6a>
 8002894:	2302      	movs	r3, #2
 8002896:	e00e      	b.n	80028b6 <HAL_PCD_EP_Close+0x88>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68f9      	ldr	r1, [r7, #12]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 f942 	bl	8005b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	460b      	mov	r3, r1
 80028cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f003 0207 	and.w	r2, r3, #7
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	b2da      	uxtb	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6979      	ldr	r1, [r7, #20]
 8002910:	4618      	mov	r0, r3
 8002912:	f003 faf9 	bl	8005f08 <USB_EPStartXfer>

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 0207 	and.w	r2, r3, #7
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	460b      	mov	r3, r1
 800295c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295e:	7afb      	ldrb	r3, [r7, #11]
 8002960:	f003 0207 	and.w	r2, r3, #7
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	3310      	adds	r3, #16
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2201      	movs	r2, #1
 8002998:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6979      	ldr	r1, [r7, #20]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 faab 	bl	8005f08 <USB_EPStartXfer>

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	7912      	ldrb	r2, [r2, #4]
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e04c      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da0e      	bge.n	8002a00 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 0207 	and.w	r2, r3, #7
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	3310      	adds	r3, #16
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	705a      	strb	r2, [r3, #1]
 80029fe:	e00c      	b.n	8002a1a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_PCD_EP_SetStall+0x7e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e01c      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xb8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68f9      	ldr	r1, [r7, #12]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fe0e 	bl	800766a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d108      	bne.n	8002a6a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f004 ff33 	bl	80078d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	7912      	ldrb	r2, [r2, #4]
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e040      	b.n	8002b1c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da0e      	bge.n	8002ac0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 0207 	and.w	r2, r3, #7
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	3310      	adds	r3, #16
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	705a      	strb	r2, [r3, #1]
 8002abe:	e00e      	b.n	8002ade <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 0207 	and.w	r2, r3, #7
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_PCD_EP_ClrStall+0x82>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e00e      	b.n	8002b1c <HAL_PCD_EP_ClrStall+0xa0>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fdfc 	bl	800770a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b096      	sub	sp, #88	@ 0x58
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b2c:	e3bb      	b.n	80032a6 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b36:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002b48:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 8175 	bne.w	8002e3c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d14e      	bne.n	8002bfc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6e:	81fb      	strh	r3, [r7, #14]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3310      	adds	r3, #16
 8002b86:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	441a      	add	r2, r3
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f006 fcb6 	bl	8009536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7b5b      	ldrb	r3, [r3, #13]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8368 	beq.w	80032a6 <PCD_EP_ISR_Handler+0x782>
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f040 8363 	bne.w	80032a6 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7b5b      	ldrb	r3, [r3, #13]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	735a      	strb	r2, [r3, #13]
 8002bfa:	e354      	b.n	80032a6 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c02:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d034      	beq.n	8002c84 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3306      	adds	r3, #6
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c44:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f004 fe8a 	bl	8007972 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	823b      	strh	r3, [r7, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	8a3a      	ldrh	r2, [r7, #16]
 8002c74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f006 fc2d 	bl	80094dc <HAL_PCD_SetupStageCallback>
 8002c82:	e310      	b.n	80032a6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c84:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f280 830c 	bge.w	80032a6 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	83fb      	strh	r3, [r7, #30]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	8bfa      	ldrh	r2, [r7, #30]
 8002ca4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3306      	adds	r3, #6
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d019      	beq.n	8002d14 <PCD_EP_ISR_Handler+0x1f0>
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cee:	6959      	ldr	r1, [r3, #20]
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f004 fe3a 	bl	8007972 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	441a      	add	r2, r3
 8002d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f006 fbf6 	bl	8009500 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 82bd 	bne.w	80032a6 <PCD_EP_ISR_Handler+0x782>
 8002d2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d30:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d38:	f000 82b5 	beq.w	80032a6 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4413      	add	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d72:	d91d      	bls.n	8002db0 <PCD_EP_ISR_Handler+0x28c>
 8002d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <PCD_EP_ISR_Handler+0x26a>
 8002d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	029b      	lsls	r3, r3, #10
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	e026      	b.n	8002dfe <PCD_EP_ISR_Handler+0x2da>
 8002db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <PCD_EP_ISR_Handler+0x2aa>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	801a      	strh	r2, [r3, #0]
 8002dcc:	e017      	b.n	8002dfe <PCD_EP_ISR_Handler+0x2da>
 8002dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <PCD_EP_ISR_Handler+0x2c4>
 8002de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de4:	3301      	adds	r3, #1
 8002de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e0e:	827b      	strh	r3, [r7, #18]
 8002e10:	8a7b      	ldrh	r3, [r7, #18]
 8002e12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002e16:	827b      	strh	r3, [r7, #18]
 8002e18:	8a7b      	ldrh	r3, [r7, #18]
 8002e1a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e1e:	827b      	strh	r3, [r7, #18]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	8a7b      	ldrh	r3, [r7, #18]
 8002e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8013      	strh	r3, [r2, #0]
 8002e3a:	e234      	b.n	80032a6 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e50:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f280 80fc 	bge.w	8003052 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e70:	4013      	ands	r3, r2
 8002e72:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002e88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e90:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea8:	7b1b      	ldrb	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d125      	bne.n	8002efa <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3306      	adds	r3, #6
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002eda:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8092 	beq.w	8003008 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eea:	6959      	ldr	r1, [r3, #20]
 8002eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eee:	88da      	ldrh	r2, [r3, #6]
 8002ef0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ef4:	f004 fd3d 	bl	8007972 <USB_ReadPMA>
 8002ef8:	e086      	b.n	8003008 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efc:	78db      	ldrb	r3, [r3, #3]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d10a      	bne.n	8002f18 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f06:	461a      	mov	r2, r3
 8002f08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9d9 	bl	80032c2 <HAL_PCD_EP_DB_Receive>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002f16:	e077      	b.n	8003008 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f32:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	441a      	add	r2, r3
 8002f44:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d024      	beq.n	8002fc0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002fa2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02e      	beq.n	8003008 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb0:	6959      	ldr	r1, [r3, #20]
 8002fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb4:	891a      	ldrh	r2, [r3, #8]
 8002fb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fba:	f004 fcda 	bl	8007972 <USB_ReadPMA>
 8002fbe:	e023      	b.n	8003008 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3306      	adds	r3, #6
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002fec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffa:	6959      	ldr	r1, [r3, #20]
 8002ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffe:	895a      	ldrh	r2, [r3, #10]
 8003000:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003004:	f004 fcb5 	bl	8007972 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003010:	441a      	add	r2, r3
 8003012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003014:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800301e:	441a      	add	r2, r3
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <PCD_EP_ISR_Handler+0x514>
 800302c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	429a      	cmp	r2, r3
 8003036:	d206      	bcs.n	8003046 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f006 fa5e 	bl	8009500 <HAL_PCD_DataOutStageCallback>
 8003044:	e005      	b.n	8003052 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800304c:	4618      	mov	r0, r3
 800304e:	f002 ff5b 	bl	8005f08 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003052:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8123 	beq.w	80032a6 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003060:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	3310      	adds	r3, #16
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800308a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80030a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80030b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b2:	78db      	ldrb	r3, [r3, #3]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 80a2 	bne.w	80031fe <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80030ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80030c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c2:	7b1b      	ldrb	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8093 	beq.w	80031f0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d046      	beq.n	8003164 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d126      	bne.n	800312c <PCD_EP_ISR_Handler+0x608>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	4413      	add	r3, r2
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	011a      	lsls	r2, r3, #4
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	4413      	add	r3, r2
 8003100:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003110:	b29a      	uxth	r2, r3
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	801a      	strh	r2, [r3, #0]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003124:	b29a      	uxth	r2, r3
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e061      	b.n	80031f0 <PCD_EP_ISR_Handler+0x6cc>
 800312c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d15d      	bne.n	80031f0 <PCD_EP_ISR_Handler+0x6cc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003142:	b29b      	uxth	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	4413      	add	r3, r2
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800314c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	011a      	lsls	r2, r3, #4
 8003152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003154:	4413      	add	r3, r2
 8003156:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	2200      	movs	r2, #0
 8003160:	801a      	strh	r2, [r3, #0]
 8003162:	e045      	b.n	80031f0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800316a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d126      	bne.n	80031c0 <PCD_EP_ISR_Handler+0x69c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	4413      	add	r3, r2
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
 800318a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	011a      	lsls	r2, r3, #4
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	4413      	add	r3, r2
 8003194:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	801a      	strh	r2, [r3, #0]
 80031be:	e017      	b.n	80031f0 <PCD_EP_ISR_Handler+0x6cc>
 80031c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d113      	bne.n	80031f0 <PCD_EP_ISR_Handler+0x6cc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d6:	4413      	add	r3, r2
 80031d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	011a      	lsls	r2, r3, #4
 80031e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e2:	4413      	add	r3, r2
 80031e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ec:	2200      	movs	r2, #0
 80031ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f006 f99d 	bl	8009536 <HAL_PCD_DataInStageCallback>
 80031fc:	e053      	b.n	80032a6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80031fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d146      	bne.n	8003298 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	3302      	adds	r3, #2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003232:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800323e:	429a      	cmp	r2, r3
 8003240:	d907      	bls.n	8003252 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324e:	619a      	str	r2, [r3, #24]
 8003250:	e002      	b.n	8003258 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f006 f965 	bl	8009536 <HAL_PCD_DataInStageCallback>
 800326c:	e01b      	b.n	80032a6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800326e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003276:	441a      	add	r2, r3
 8003278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800327c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003284:	441a      	add	r2, r3
 8003286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003288:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003290:	4618      	mov	r0, r3
 8003292:	f002 fe39 	bl	8005f08 <USB_EPStartXfer>
 8003296:	e006      	b.n	80032a6 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003298:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800329c:	461a      	mov	r2, r3
 800329e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f91b 	bl	80034dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f6ff ac3b 	blt.w	8002b2e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3758      	adds	r7, #88	@ 0x58
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b088      	sub	sp, #32
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d07e      	beq.n	80033d8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	3302      	adds	r3, #2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003302:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	8b7b      	ldrh	r3, [r7, #26]
 800330a:	429a      	cmp	r2, r3
 800330c:	d306      	bcc.n	800331c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	8b7b      	ldrh	r3, [r7, #26]
 8003314:	1ad2      	subs	r2, r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	619a      	str	r2, [r3, #24]
 800331a:	e002      	b.n	8003322 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d123      	bne.n	8003372 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003344:	833b      	strh	r3, [r7, #24]
 8003346:	8b3b      	ldrh	r3, [r7, #24]
 8003348:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800334c:	833b      	strh	r3, [r7, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	8b3b      	ldrh	r3, [r7, #24]
 800335e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800336a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336e:	b29b      	uxth	r3, r3
 8003370:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01f      	beq.n	80033bc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003396:	82fb      	strh	r3, [r7, #22]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	8afb      	ldrh	r3, [r7, #22]
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033bc:	8b7b      	ldrh	r3, [r7, #26]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8087 	beq.w	80034d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6959      	ldr	r1, [r3, #20]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	891a      	ldrh	r2, [r3, #8]
 80033d0:	8b7b      	ldrh	r3, [r7, #26]
 80033d2:	f004 face 	bl	8007972 <USB_ReadPMA>
 80033d6:	e07c      	b.n	80034d2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	3306      	adds	r3, #6
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003400:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	8b7b      	ldrh	r3, [r7, #26]
 8003408:	429a      	cmp	r2, r3
 800340a:	d306      	bcc.n	800341a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	8b7b      	ldrh	r3, [r7, #26]
 8003412:	1ad2      	subs	r2, r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	619a      	str	r2, [r3, #24]
 8003418:	e002      	b.n	8003420 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d123      	bne.n	8003470 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800343e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003442:	83fb      	strh	r3, [r7, #30]
 8003444:	8bfb      	ldrh	r3, [r7, #30]
 8003446:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800344a:	83fb      	strh	r3, [r7, #30]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	8bfb      	ldrh	r3, [r7, #30]
 800345c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346c:	b29b      	uxth	r3, r3
 800346e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11f      	bne.n	80034ba <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003494:	83bb      	strh	r3, [r7, #28]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	441a      	add	r2, r3
 80034a4:	8bbb      	ldrh	r3, [r7, #28]
 80034a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034ba:	8b7b      	ldrh	r3, [r7, #26]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6959      	ldr	r1, [r3, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	895a      	ldrh	r2, [r3, #10]
 80034cc:	8b7b      	ldrh	r3, [r7, #26]
 80034ce:	f004 fa50 	bl	8007972 <USB_ReadPMA>
    }
  }

  return count;
 80034d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0a4      	sub	sp, #144	@ 0x90
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 81dd 	beq.w	80038b0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fe:	b29b      	uxth	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	3302      	adds	r3, #2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800352a:	429a      	cmp	r2, r3
 800352c:	d907      	bls.n	800353e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003536:	1ad2      	subs	r2, r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	619a      	str	r2, [r3, #24]
 800353c:	e002      	b.n	8003544 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f040 80b9 	bne.w	80036c0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d126      	bne.n	80035a4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356a:	4413      	add	r3, r2
 800356c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	011a      	lsls	r2, r3, #4
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003576:	4413      	add	r3, r2
 8003578:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003588:	b29a      	uxth	r2, r3
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359c:	b29a      	uxth	r2, r3
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e01a      	b.n	80035da <HAL_PCD_EP_DB_Transmit+0xfe>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d116      	bne.n	80035da <HAL_PCD_EP_DB_Transmit+0xfe>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	4413      	add	r3, r2
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	011a      	lsls	r2, r3, #4
 80035ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035cc:	4413      	add	r3, r2
 80035ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d126      	bne.n	8003636 <HAL_PCD_EP_DB_Transmit+0x15a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	011a      	lsls	r2, r3, #4
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361a:	b29a      	uxth	r2, r3
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362e:	b29a      	uxth	r2, r3
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	801a      	strh	r2, [r3, #0]
 8003634:	e017      	b.n	8003666 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d113      	bne.n	8003666 <HAL_PCD_EP_DB_Transmit+0x18a>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003646:	b29b      	uxth	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	4413      	add	r3, r2
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	011a      	lsls	r2, r3, #4
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	4413      	add	r3, r2
 800365a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2200      	movs	r2, #0
 8003664:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f005 ff62 	bl	8009536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 82fc 	beq.w	8003c76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003698:	82fb      	strh	r3, [r7, #22]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	441a      	add	r2, r3
 80036a8:	8afb      	ldrh	r3, [r7, #22]
 80036aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	8013      	strh	r3, [r2, #0]
 80036be:	e2da      	b.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d021      	beq.n	800370e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80036fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370a:	b29b      	uxth	r3, r3
 800370c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003714:	2b01      	cmp	r3, #1
 8003716:	f040 82ae 	bne.w	8003c76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003722:	441a      	add	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003730:	441a      	add	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	429a      	cmp	r2, r3
 8003740:	d30b      	bcc.n	800375a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	621a      	str	r2, [r3, #32]
 8003758:	e017      	b.n	800378a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003762:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003772:	e00a      	b.n	800378a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2200      	movs	r2, #0
 8003788:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d165      	bne.n	800385e <HAL_PCD_EP_DB_Transmit+0x382>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a6:	4413      	add	r3, r2
 80037a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	011a      	lsls	r2, r3, #4
 80037b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b2:	4413      	add	r3, r2
 80037b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80037d0:	d91d      	bls.n	800380e <HAL_PCD_EP_DB_Transmit+0x332>
 80037d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_PCD_EP_DB_Transmit+0x310>
 80037e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e8:	3b01      	subs	r3, #1
 80037ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	029b      	lsls	r3, r3, #10
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003806:	b29a      	uxth	r2, r3
 8003808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	e044      	b.n	8003898 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800380e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_PCD_EP_DB_Transmit+0x350>
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003824:	b29a      	uxth	r2, r3
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	e035      	b.n	8003898 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800382c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003842:	3301      	adds	r3, #1
 8003844:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29a      	uxth	r2, r3
 800384c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384e:	b29b      	uxth	r3, r3
 8003850:	029b      	lsls	r3, r3, #10
 8003852:	b29b      	uxth	r3, r3
 8003854:	4313      	orrs	r3, r2
 8003856:	b29a      	uxth	r2, r3
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	801a      	strh	r2, [r3, #0]
 800385c:	e01c      	b.n	8003898 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d118      	bne.n	8003898 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	647b      	str	r3, [r7, #68]	@ 0x44
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003874:	b29b      	uxth	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800387a:	4413      	add	r3, r2
 800387c:	647b      	str	r3, [r7, #68]	@ 0x44
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	011a      	lsls	r2, r3, #4
 8003884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003886:	4413      	add	r3, r2
 8003888:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800388c:	643b      	str	r3, [r7, #64]	@ 0x40
 800388e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003892:	b29a      	uxth	r2, r3
 8003894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003896:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6959      	ldr	r1, [r3, #20]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	891a      	ldrh	r2, [r3, #8]
 80038a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f004 f81c 	bl	80078e6 <USB_WritePMA>
 80038ae:	e1e2      	b.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	3306      	adds	r3, #6
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038f0:	1ad2      	subs	r2, r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	619a      	str	r2, [r3, #24]
 80038f6:	e002      	b.n	80038fe <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 80c0 	bne.w	8003a88 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d126      	bne.n	800395e <HAL_PCD_EP_DB_Transmit+0x482>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003924:	4413      	add	r3, r2
 8003926:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	011a      	lsls	r2, r3, #4
 800392e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003930:	4413      	add	r3, r2
 8003932:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003936:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003942:	b29a      	uxth	r2, r3
 8003944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003956:	b29a      	uxth	r2, r3
 8003958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	e01a      	b.n	8003994 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d116      	bne.n	8003994 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	667b      	str	r3, [r7, #100]	@ 0x64
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003974:	b29b      	uxth	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800397a:	4413      	add	r3, r2
 800397c:	667b      	str	r3, [r7, #100]	@ 0x64
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	011a      	lsls	r2, r3, #4
 8003984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003986:	4413      	add	r3, r2
 8003988:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800398c:	663b      	str	r3, [r7, #96]	@ 0x60
 800398e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003990:	2200      	movs	r2, #0
 8003992:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	677b      	str	r3, [r7, #116]	@ 0x74
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d12b      	bne.n	80039fa <HAL_PCD_EP_DB_Transmit+0x51e>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b6:	4413      	add	r3, r2
 80039b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	011a      	lsls	r2, r3, #4
 80039c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c2:	4413      	add	r3, r2
 80039c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d8:	b29a      	uxth	r2, r3
 80039da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	e017      	b.n	8003a2a <HAL_PCD_EP_DB_Transmit+0x54e>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d113      	bne.n	8003a2a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a10:	4413      	add	r3, r2
 8003a12:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	011a      	lsls	r2, r3, #4
 8003a1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a22:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a26:	2200      	movs	r2, #0
 8003a28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f005 fd80 	bl	8009536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 811a 	bne.w	8003c76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8013      	strh	r3, [r2, #0]
 8003a86:	e0f6      	b.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d121      	bne.n	8003ad6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f040 80ca 	bne.w	8003c76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003aea:	441a      	add	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	69da      	ldr	r2, [r3, #28]
 8003af4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003af8:	441a      	add	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d30b      	bcc.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6a1a      	ldr	r2, [r3, #32]
 8003b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b1a:	1ad2      	subs	r2, r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	621a      	str	r2, [r3, #32]
 8003b20:	e017      	b.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d108      	bne.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003b2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b3a:	e00a      	b.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d165      	bne.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b74:	4413      	add	r3, r2
 8003b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	011a      	lsls	r2, r3, #4
 8003b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b80:	4413      	add	r3, r2
 8003b82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b9e:	d91d      	bls.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x700>
 8003ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <HAL_PCD_EP_DB_Transmit+0x6de>
 8003bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	029b      	lsls	r3, r3, #10
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e041      	b.n	8003c60 <HAL_PCD_EP_DB_Transmit+0x784>
 8003bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x71e>
 8003be4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e032      	b.n	8003c60 <HAL_PCD_EP_DB_Transmit+0x784>
 8003bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x738>
 8003c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c10:	3301      	adds	r3, #1
 8003c12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	e019      	b.n	8003c60 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d115      	bne.n	8003c60 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c42:	4413      	add	r3, r2
 8003c44:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	011a      	lsls	r2, r3, #4
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4e:	4413      	add	r3, r2
 8003c50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c54:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c5e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6959      	ldr	r1, [r3, #20]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	895a      	ldrh	r2, [r3, #10]
 8003c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f003 fe38 	bl	80078e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c90:	82bb      	strh	r3, [r7, #20]
 8003c92:	8abb      	ldrh	r3, [r7, #20]
 8003c94:	f083 0310 	eor.w	r3, r3, #16
 8003c98:	82bb      	strh	r3, [r7, #20]
 8003c9a:	8abb      	ldrh	r3, [r7, #20]
 8003c9c:	f083 0320 	eor.w	r3, r3, #32
 8003ca0:	82bb      	strh	r3, [r7, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	8abb      	ldrh	r3, [r7, #20]
 8003cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3790      	adds	r7, #144	@ 0x90
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	f003 0207 	and.w	r2, r3, #7
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	3310      	adds	r3, #16
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e009      	b.n	8003d1a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d06:	897a      	ldrh	r2, [r7, #10]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	80da      	strh	r2, [r3, #6]
 8003d2e:	e00b      	b.n	8003d48 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2201      	movs	r2, #1
 8003d34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e272      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8087 	beq.w	8003e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d74:	4b92      	ldr	r3, [pc, #584]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d00c      	beq.n	8003d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d80:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d112      	bne.n	8003db2 <HAL_RCC_OscConfig+0x5e>
 8003d8c:	4b8c      	ldr	r3, [pc, #560]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d98:	d10b      	bne.n	8003db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9a:	4b89      	ldr	r3, [pc, #548]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d06c      	beq.n	8003e80 <HAL_RCC_OscConfig+0x12c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d168      	bne.n	8003e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e24c      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x76>
 8003dbc:	4b80      	ldr	r3, [pc, #512]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a7f      	ldr	r2, [pc, #508]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e02e      	b.n	8003e28 <HAL_RCC_OscConfig+0xd4>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x98>
 8003dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7a      	ldr	r2, [pc, #488]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b78      	ldr	r3, [pc, #480]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a77      	ldr	r2, [pc, #476]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e01d      	b.n	8003e28 <HAL_RCC_OscConfig+0xd4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0xbc>
 8003df6:	4b72      	ldr	r3, [pc, #456]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a71      	ldr	r2, [pc, #452]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b6f      	ldr	r3, [pc, #444]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e00b      	b.n	8003e28 <HAL_RCC_OscConfig+0xd4>
 8003e10:	4b6b      	ldr	r3, [pc, #428]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a6a      	ldr	r2, [pc, #424]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b68      	ldr	r3, [pc, #416]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a67      	ldr	r2, [pc, #412]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fd ff94 	bl	8001d5c <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fd ff90 	bl	8001d5c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e200      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0xe4>
 8003e56:	e014      	b.n	8003e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fd ff80 	bl	8001d5c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fd ff7c 	bl	8001d5c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e1ec      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	4b53      	ldr	r3, [pc, #332]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x10c>
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d063      	beq.n	8003f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e9a:	4b49      	ldr	r3, [pc, #292]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d11c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x18c>
 8003ea6:	4b46      	ldr	r3, [pc, #280]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d116      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	4b43      	ldr	r3, [pc, #268]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_RCC_OscConfig+0x176>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e1c0      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eca:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4939      	ldr	r1, [pc, #228]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ede:	e03a      	b.n	8003f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee8:	4b36      	ldr	r3, [pc, #216]	@ (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd ff35 	bl	8001d5c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef6:	f7fd ff31 	bl	8001d5c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e1a1      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f08:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f14:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4927      	ldr	r1, [pc, #156]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
 8003f28:	e015      	b.n	8003f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2a:	4b26      	ldr	r3, [pc, #152]	@ (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd ff14 	bl	8001d5c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f38:	f7fd ff10 	bl	8001d5c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e180      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d03a      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d019      	beq.n	8003f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6a:	4b17      	ldr	r3, [pc, #92]	@ (8003fc8 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f70:	f7fd fef4 	bl	8001d5c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f78:	f7fd fef0 	bl	8001d5c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e160      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f96:	2001      	movs	r0, #1
 8003f98:	f000 fa9c 	bl	80044d4 <RCC_Delay>
 8003f9c:	e01c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7fd feda 	bl	8001d5c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003faa:	e00f      	b.n	8003fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fac:	f7fd fed6 	bl	8001d5c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d908      	bls.n	8003fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e146      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	42420000 	.word	0x42420000
 8003fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fcc:	4b92      	ldr	r3, [pc, #584]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e9      	bne.n	8003fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80a6 	beq.w	8004132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fea:	4b8b      	ldr	r3, [pc, #556]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff6:	4b88      	ldr	r3, [pc, #544]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4a87      	ldr	r2, [pc, #540]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004000:	61d3      	str	r3, [r2, #28]
 8004002:	4b85      	ldr	r3, [pc, #532]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b82      	ldr	r3, [pc, #520]	@ (800421c <HAL_RCC_OscConfig+0x4c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d118      	bne.n	8004050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b7f      	ldr	r3, [pc, #508]	@ (800421c <HAL_RCC_OscConfig+0x4c8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a7e      	ldr	r2, [pc, #504]	@ (800421c <HAL_RCC_OscConfig+0x4c8>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fd fe97 	bl	8001d5c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fd fe93 	bl	8001d5c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b64      	cmp	r3, #100	@ 0x64
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e103      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b75      	ldr	r3, [pc, #468]	@ (800421c <HAL_RCC_OscConfig+0x4c8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x312>
 8004058:	4b6f      	ldr	r3, [pc, #444]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4a6e      	ldr	r2, [pc, #440]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6213      	str	r3, [r2, #32]
 8004064:	e02d      	b.n	80040c2 <HAL_RCC_OscConfig+0x36e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x334>
 800406e:	4b6a      	ldr	r3, [pc, #424]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4a69      	ldr	r2, [pc, #420]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	6213      	str	r3, [r2, #32]
 800407a:	4b67      	ldr	r3, [pc, #412]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4a66      	ldr	r2, [pc, #408]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	6213      	str	r3, [r2, #32]
 8004086:	e01c      	b.n	80040c2 <HAL_RCC_OscConfig+0x36e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b05      	cmp	r3, #5
 800408e:	d10c      	bne.n	80040aa <HAL_RCC_OscConfig+0x356>
 8004090:	4b61      	ldr	r3, [pc, #388]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4a60      	ldr	r2, [pc, #384]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	6213      	str	r3, [r2, #32]
 800409c:	4b5e      	ldr	r3, [pc, #376]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6213      	str	r3, [r2, #32]
 80040a8:	e00b      	b.n	80040c2 <HAL_RCC_OscConfig+0x36e>
 80040aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6213      	str	r3, [r2, #32]
 80040b6:	4b58      	ldr	r3, [pc, #352]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	4a57      	ldr	r2, [pc, #348]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d015      	beq.n	80040f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fd fe47 	bl	8001d5c <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fd fe43 	bl	8001d5c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0b1      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ee      	beq.n	80040d2 <HAL_RCC_OscConfig+0x37e>
 80040f4:	e014      	b.n	8004120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f6:	f7fd fe31 	bl	8001d5c <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fe:	f7fd fe2d 	bl	8001d5c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410c:	4293      	cmp	r3, r2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e09b      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	4b40      	ldr	r3, [pc, #256]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ee      	bne.n	80040fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004126:	4b3c      	ldr	r3, [pc, #240]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	4a3b      	ldr	r2, [pc, #236]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 800412c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8087 	beq.w	800424a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800413c:	4b36      	ldr	r3, [pc, #216]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d061      	beq.n	800420c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d146      	bne.n	80041de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004150:	4b33      	ldr	r3, [pc, #204]	@ (8004220 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd fe01 	bl	8001d5c <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415e:	f7fd fdfd 	bl	8001d5c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e06d      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004170:	4b29      	ldr	r3, [pc, #164]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004184:	d108      	bne.n	8004198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004186:	4b24      	ldr	r3, [pc, #144]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	4921      	ldr	r1, [pc, #132]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004198:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a19      	ldr	r1, [r3, #32]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	430b      	orrs	r3, r1
 80041aa:	491b      	ldr	r1, [pc, #108]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004220 <HAL_RCC_OscConfig+0x4cc>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b6:	f7fd fdd1 	bl	8001d5c <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041be:	f7fd fdcd 	bl	8001d5c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e03d      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d0:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x46a>
 80041dc:	e035      	b.n	800424a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <HAL_RCC_OscConfig+0x4cc>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd fdba 	bl	8001d5c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd fdb6 	bl	8001d5c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e026      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <HAL_RCC_OscConfig+0x4c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x498>
 800420a:	e01e      	b.n	800424a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e019      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
 8004218:	40021000 	.word	0x40021000
 800421c:	40007000 	.word	0x40007000
 8004220:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004224:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x500>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	429a      	cmp	r2, r3
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0d0      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b6a      	ldr	r3, [pc, #424]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d910      	bls.n	800429c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b67      	ldr	r3, [pc, #412]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 0207 	bic.w	r2, r3, #7
 8004282:	4965      	ldr	r1, [pc, #404]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b63      	ldr	r3, [pc, #396]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0b8      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d020      	beq.n	80042ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b4:	4b59      	ldr	r3, [pc, #356]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a58      	ldr	r2, [pc, #352]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042cc:	4b53      	ldr	r3, [pc, #332]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a52      	ldr	r2, [pc, #328]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b50      	ldr	r3, [pc, #320]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	494d      	ldr	r1, [pc, #308]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d040      	beq.n	8004378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d115      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e07f      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	4b41      	ldr	r3, [pc, #260]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e073      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004326:	4b3d      	ldr	r3, [pc, #244]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06b      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004336:	4b39      	ldr	r3, [pc, #228]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4936      	ldr	r1, [pc, #216]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004348:	f7fd fd08 	bl	8001d5c <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e00a      	b.n	8004366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fd fd04 	bl	8001d5c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e053      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	4b2d      	ldr	r3, [pc, #180]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 020c 	and.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	429a      	cmp	r2, r3
 8004376:	d1eb      	bne.n	8004350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004378:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d210      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b24      	ldr	r3, [pc, #144]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4922      	ldr	r1, [pc, #136]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b20      	ldr	r3, [pc, #128]	@ (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e032      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b4:	4b19      	ldr	r3, [pc, #100]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4916      	ldr	r1, [pc, #88]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	490e      	ldr	r1, [pc, #56]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043e6:	f000 f821 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043ea:	4602      	mov	r2, r0
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	490a      	ldr	r1, [pc, #40]	@ (8004420 <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	5ccb      	ldrb	r3, [r1, r3]
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	4a09      	ldr	r2, [pc, #36]	@ (8004424 <HAL_RCC_ClockConfig+0x1cc>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004402:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_ClockConfig+0x1d0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd fc66 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40022000 	.word	0x40022000
 800441c:	40021000 	.word	0x40021000
 8004420:	0800e968 	.word	0x0800e968
 8004424:	20000008 	.word	0x20000008
 8004428:	2000000c 	.word	0x2000000c

0800442c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004446:	4b1e      	ldr	r3, [pc, #120]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d002      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x30>
 8004456:	2b08      	cmp	r3, #8
 8004458:	d003      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x36>
 800445a:	e027      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800445c:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800445e:	613b      	str	r3, [r7, #16]
      break;
 8004460:	e027      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	0c9b      	lsrs	r3, r3, #18
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800446c:	5cd3      	ldrb	r3, [r2, r3]
 800446e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d010      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	0c5b      	lsrs	r3, r3, #17
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	4a11      	ldr	r2, [pc, #68]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a0d      	ldr	r2, [pc, #52]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800448e:	fb03 f202 	mul.w	r2, r3, r2
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	e004      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0c      	ldr	r2, [pc, #48]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	613b      	str	r3, [r7, #16]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80044ae:	613b      	str	r3, [r7, #16]
      break;
 80044b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b2:	693b      	ldr	r3, [r7, #16]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
 80044c4:	007a1200 	.word	0x007a1200
 80044c8:	0800e978 	.word	0x0800e978
 80044cc:	0800e988 	.word	0x0800e988
 80044d0:	003d0900 	.word	0x003d0900

080044d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <RCC_Delay+0x34>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <RCC_Delay+0x38>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0a5b      	lsrs	r3, r3, #9
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044f0:	bf00      	nop
  }
  while (Delay --);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1e5a      	subs	r2, r3, #1
 80044f6:	60fa      	str	r2, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f9      	bne.n	80044f0 <RCC_Delay+0x1c>
}
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	20000008 	.word	0x20000008
 800450c:	10624dd3 	.word	0x10624dd3

08004510 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d07d      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800452c:	2300      	movs	r3, #0
 800452e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004530:	4b4f      	ldr	r3, [pc, #316]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10d      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453c:	4b4c      	ldr	r3, [pc, #304]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	4a4b      	ldr	r2, [pc, #300]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004546:	61d3      	str	r3, [r2, #28]
 8004548:	4b49      	ldr	r3, [pc, #292]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b46      	ldr	r3, [pc, #280]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d118      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004564:	4b43      	ldr	r3, [pc, #268]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a42      	ldr	r2, [pc, #264]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800456a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004570:	f7fd fbf4 	bl	8001d5c <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	e008      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004578:	f7fd fbf0 	bl	8001d5c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e06d      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458a:	4b3a      	ldr	r3, [pc, #232]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004596:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02e      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d027      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045be:	4b2e      	ldr	r3, [pc, #184]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045ca:	4a29      	ldr	r2, [pc, #164]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d014      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fd fbbf 	bl	8001d5c <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fd fbbb 	bl	8001d5c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e036      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004604:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4917      	ldr	r1, [pc, #92]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	4313      	orrs	r3, r2
 8004614:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d105      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461c:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004626:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004634:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	490b      	ldr	r1, [pc, #44]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	4313      	orrs	r3, r2
 8004644:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004652:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4904      	ldr	r1, [pc, #16]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	40007000 	.word	0x40007000
 8004678:	42420440 	.word	0x42420440

0800467c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e041      	b.n	8004712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fd f95c 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f000 fab2 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e041      	b.n	80047b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f839 	bl	80047b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f000 fa63 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_TIM_PWM_Start+0x24>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e022      	b.n	8004836 <HAL_TIM_PWM_Start+0x6a>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d109      	bne.n	800480a <HAL_TIM_PWM_Start+0x3e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e015      	b.n	8004836 <HAL_TIM_PWM_Start+0x6a>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d109      	bne.n	8004824 <HAL_TIM_PWM_Start+0x58>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e008      	b.n	8004836 <HAL_TIM_PWM_Start+0x6a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e05e      	b.n	80048fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0x82>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800484c:	e013      	b.n	8004876 <HAL_TIM_PWM_Start+0xaa>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d104      	bne.n	800485e <HAL_TIM_PWM_Start+0x92>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485c:	e00b      	b.n	8004876 <HAL_TIM_PWM_Start+0xaa>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Start+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800486c:	e003      	b.n	8004876 <HAL_TIM_PWM_Start+0xaa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fc5c 	bl	800513c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <HAL_TIM_PWM_Start+0x138>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d107      	bne.n	800489e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <HAL_TIM_PWM_Start+0x138>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_PWM_Start+0xfa>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_PWM_Start+0xfa>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a14      	ldr	r2, [pc, #80]	@ (8004908 <HAL_TIM_PWM_Start+0x13c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_PWM_Start+0xfa>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a12      	ldr	r2, [pc, #72]	@ (800490c <HAL_TIM_PWM_Start+0x140>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d111      	bne.n	80048ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d010      	beq.n	80048fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	e007      	b.n	80048fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800

08004910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800492a:	2302      	movs	r3, #2
 800492c:	e0ae      	b.n	8004a8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b0c      	cmp	r3, #12
 800493a:	f200 809f 	bhi.w	8004a7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800493e:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004979 	.word	0x08004979
 8004948:	08004a7d 	.word	0x08004a7d
 800494c:	08004a7d 	.word	0x08004a7d
 8004950:	08004a7d 	.word	0x08004a7d
 8004954:	080049b9 	.word	0x080049b9
 8004958:	08004a7d 	.word	0x08004a7d
 800495c:	08004a7d 	.word	0x08004a7d
 8004960:	08004a7d 	.word	0x08004a7d
 8004964:	080049fb 	.word	0x080049fb
 8004968:	08004a7d 	.word	0x08004a7d
 800496c:	08004a7d 	.word	0x08004a7d
 8004970:	08004a7d 	.word	0x08004a7d
 8004974:	08004a3b 	.word	0x08004a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 f9be 	bl	8004d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0208 	orr.w	r2, r2, #8
 8004992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6999      	ldr	r1, [r3, #24]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	619a      	str	r2, [r3, #24]
      break;
 80049b6:	e064      	b.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fa04 	bl	8004dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6999      	ldr	r1, [r3, #24]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	021a      	lsls	r2, r3, #8
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	619a      	str	r2, [r3, #24]
      break;
 80049f8:	e043      	b.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fa4d 	bl	8004ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0208 	orr.w	r2, r2, #8
 8004a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0204 	bic.w	r2, r2, #4
 8004a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69d9      	ldr	r1, [r3, #28]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	61da      	str	r2, [r3, #28]
      break;
 8004a38:	e023      	b.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fa97 	bl	8004f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69d9      	ldr	r1, [r3, #28]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	021a      	lsls	r2, r3, #8
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	61da      	str	r2, [r3, #28]
      break;
 8004a7a:	e002      	b.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e0b4      	b.n	8004c1a <HAL_TIM_ConfigClockSource+0x186>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ae8:	d03e      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0xd4>
 8004aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aee:	f200 8087 	bhi.w	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af6:	f000 8086 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x172>
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afe:	d87f      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b70      	cmp	r3, #112	@ 0x70
 8004b02:	d01a      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0xa6>
 8004b04:	2b70      	cmp	r3, #112	@ 0x70
 8004b06:	d87b      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b60      	cmp	r3, #96	@ 0x60
 8004b0a:	d050      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x11a>
 8004b0c:	2b60      	cmp	r3, #96	@ 0x60
 8004b0e:	d877      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b50      	cmp	r3, #80	@ 0x50
 8004b12:	d03c      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0xfa>
 8004b14:	2b50      	cmp	r3, #80	@ 0x50
 8004b16:	d873      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b40      	cmp	r3, #64	@ 0x40
 8004b1a:	d058      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x13a>
 8004b1c:	2b40      	cmp	r3, #64	@ 0x40
 8004b1e:	d86f      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b30      	cmp	r3, #48	@ 0x30
 8004b22:	d064      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b24:	2b30      	cmp	r3, #48	@ 0x30
 8004b26:	d86b      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d060      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d867      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05c      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d05a      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b38:	e062      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	f000 fad8 	bl	80050fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	609a      	str	r2, [r3, #8]
      break;
 8004b66:	e04f      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	f000 fac1 	bl	80050fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b8a:	609a      	str	r2, [r3, #8]
      break;
 8004b8c:	e03c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f000 fa38 	bl	8005010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2150      	movs	r1, #80	@ 0x50
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa8f 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004bac:	e02c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f000 fa56 	bl	800506c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2160      	movs	r1, #96	@ 0x60
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa7f 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004bcc:	e01c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 fa18 	bl	8005010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2140      	movs	r1, #64	@ 0x40
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fa6f 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004bec:	e00c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f000 fa66 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004bfe:	e003      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      break;
 8004c04:	e000      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf4 <TIM_Base_SetConfig+0xd0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <TIM_Base_SetConfig+0x30>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c42:	d007      	beq.n	8004c54 <TIM_Base_SetConfig+0x30>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf8 <TIM_Base_SetConfig+0xd4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_Base_SetConfig+0x30>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004cfc <TIM_Base_SetConfig+0xd8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d108      	bne.n	8004c66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a22      	ldr	r2, [pc, #136]	@ (8004cf4 <TIM_Base_SetConfig+0xd0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0x62>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0x62>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf8 <TIM_Base_SetConfig+0xd4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0x62>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a1e      	ldr	r2, [pc, #120]	@ (8004cfc <TIM_Base_SetConfig+0xd8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf4 <TIM_Base_SetConfig+0xd0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]
  }
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	40012c00 	.word	0x40012c00
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800

08004d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f023 0201 	bic.w	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f023 0302 	bic.w	r3, r3, #2
 8004d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc8 <TIM_OC1_SetConfig+0xc8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d10c      	bne.n	8004d76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0308 	bic.w	r3, r3, #8
 8004d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 0304 	bic.w	r3, r3, #4
 8004d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a13      	ldr	r2, [pc, #76]	@ (8004dc8 <TIM_OC1_SetConfig+0xc8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d111      	bne.n	8004da2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00

08004dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f023 0210 	bic.w	r2, r3, #16
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0320 	bic.w	r3, r3, #32
 8004e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a1d      	ldr	r2, [pc, #116]	@ (8004e9c <TIM_OC2_SetConfig+0xd0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d10d      	bne.n	8004e48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a14      	ldr	r2, [pc, #80]	@ (8004e9c <TIM_OC2_SetConfig+0xd0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d113      	bne.n	8004e78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00

08004ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <TIM_OC3_SetConfig+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d10d      	bne.n	8004f1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	@ (8004f70 <TIM_OC3_SetConfig+0xd0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d113      	bne.n	8004f4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00

08004f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a0f      	ldr	r2, [pc, #60]	@ (800500c <TIM_OC4_SetConfig+0x98>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d109      	bne.n	8004fe8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	019b      	lsls	r3, r3, #6
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	40012c00 	.word	0x40012c00

08005010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800503a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f023 030a 	bic.w	r3, r3, #10
 800504c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0210 	bic.w	r2, r3, #16
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	031b      	lsls	r3, r3, #12
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f043 0307 	orr.w	r3, r3, #7
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	609a      	str	r2, [r3, #8]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050fe:	b480      	push	{r7}
 8005100:	b087      	sub	sp, #28
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005118:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	021a      	lsls	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	431a      	orrs	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4313      	orrs	r3, r2
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	609a      	str	r2, [r3, #8]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2201      	movs	r2, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005198:	2302      	movs	r3, #2
 800519a:	e046      	b.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a16      	ldr	r2, [pc, #88]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e8:	d009      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a10      	ldr	r2, [pc, #64]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10c      	bne.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4313      	orrs	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800

08005240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005258:	2302      	movs	r3, #2
 800525a:	e03d      	b.n	80052d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	4638      	mov	r0, r7
 80052ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800530c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005310:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005330:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005334:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	b29b      	uxth	r3, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	b29b      	uxth	r3, r3
 8005346:	4013      	ands	r3, r2
 8005348:	b29a      	uxth	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4638      	mov	r0, r7
 800537e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
	...

080053b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b09d      	sub	sp, #116	@ 0x74
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80053d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d81f      	bhi.n	8005422 <USB_ActivateEndpoint+0x72>
 80053e2:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <USB_ActivateEndpoint+0x38>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	08005415 	.word	0x08005415
 80053f0:	0800542b 	.word	0x0800542b
 80053f4:	08005407 	.word	0x08005407
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005400:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005404:	e012      	b.n	800542c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005406:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800540a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800540e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005412:	e00b      	b.n	800542c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005414:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800541c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005420:	e004      	b.n	800542c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005428:	e000      	b.n	800542c <USB_ActivateEndpoint+0x7c>
      break;
 800542a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800543a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005464:	b29b      	uxth	r3, r3
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	7812      	ldrb	r2, [r2, #0]
 800546a:	4313      	orrs	r3, r2
 800546c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	7b1b      	ldrb	r3, [r3, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 8178 	bne.w	800578c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8084 	beq.w	80055ae <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	4413      	add	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	88db      	ldrh	r3, [r3, #6]
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	827b      	strh	r3, [r7, #18]
 80054e8:	8a7b      	ldrh	r3, [r7, #18]
 80054ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01b      	beq.n	800552a <USB_ActivateEndpoint+0x17a>
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005508:	823b      	strh	r3, [r7, #16]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	441a      	add	r2, r3
 8005514:	8a3b      	ldrh	r3, [r7, #16]
 8005516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800551a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800551e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005522:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005526:	b29b      	uxth	r3, r3
 8005528:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d020      	beq.n	8005574 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005548:	81bb      	strh	r3, [r7, #12]
 800554a:	89bb      	ldrh	r3, [r7, #12]
 800554c:	f083 0320 	eor.w	r3, r3, #32
 8005550:	81bb      	strh	r3, [r7, #12]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	89bb      	ldrh	r3, [r7, #12]
 800555e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800556a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800556e:	b29b      	uxth	r3, r3
 8005570:	8013      	strh	r3, [r2, #0]
 8005572:	e2d5      	b.n	8005b20 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558a:	81fb      	strh	r3, [r7, #14]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	89fb      	ldrh	r3, [r7, #14]
 8005598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800559c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8013      	strh	r3, [r2, #0]
 80055ac:	e2b8      	b.n	8005b20 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	4413      	add	r3, r2
 80055c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	011a      	lsls	r2, r3, #4
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	88db      	ldrh	r3, [r3, #6]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	4413      	add	r3, r2
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	011a      	lsls	r2, r3, #4
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	4413      	add	r3, r2
 8005600:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005610:	b29a      	uxth	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b3e      	cmp	r3, #62	@ 0x3e
 800561c:	d91d      	bls.n	800565a <USB_ActivateEndpoint+0x2aa>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <USB_ActivateEndpoint+0x288>
 8005632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005634:	3b01      	subs	r3, #1
 8005636:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29a      	uxth	r2, r3
 800563e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005640:	b29b      	uxth	r3, r3
 8005642:	029b      	lsls	r3, r3, #10
 8005644:	b29b      	uxth	r3, r3
 8005646:	4313      	orrs	r3, r2
 8005648:	b29b      	uxth	r3, r3
 800564a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005652:	b29a      	uxth	r2, r3
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e026      	b.n	80056a8 <USB_ActivateEndpoint+0x2f8>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <USB_ActivateEndpoint+0x2c8>
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005670:	b29a      	uxth	r2, r3
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e017      	b.n	80056a8 <USB_ActivateEndpoint+0x2f8>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <USB_ActivateEndpoint+0x2e2>
 800568c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800568e:	3301      	adds	r3, #1
 8005690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29a      	uxth	r2, r3
 8005698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800569a:	b29b      	uxth	r3, r3
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4313      	orrs	r3, r2
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01b      	beq.n	80056f8 <USB_ActivateEndpoint+0x348>
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	843b      	strh	r3, [r7, #32]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	8c3b      	ldrh	r3, [r7, #32]
 80056e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d124      	bne.n	800574a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005716:	83bb      	strh	r3, [r7, #28]
 8005718:	8bbb      	ldrh	r3, [r7, #28]
 800571a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800571e:	83bb      	strh	r3, [r7, #28]
 8005720:	8bbb      	ldrh	r3, [r7, #28]
 8005722:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005726:	83bb      	strh	r3, [r7, #28]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	8bbb      	ldrh	r3, [r7, #28]
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
 8005748:	e1ea      	b.n	8005b20 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005760:	83fb      	strh	r3, [r7, #30]
 8005762:	8bfb      	ldrh	r3, [r7, #30]
 8005764:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005768:	83fb      	strh	r3, [r7, #30]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	441a      	add	r2, r3
 8005774:	8bfb      	ldrh	r3, [r7, #30]
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]
 800578a:	e1c9      	b.n	8005b20 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d11e      	bne.n	80057d2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057aa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80057c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]
 80057d0:	e01d      	b.n	800580e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80057e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80057fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580a:	b29b      	uxth	r3, r3
 800580c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800581e:	4413      	add	r3, r2
 8005820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	011a      	lsls	r2, r3, #4
 8005828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800582a:	4413      	add	r3, r2
 800582c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005830:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	891b      	ldrh	r3, [r3, #8]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005840:	801a      	strh	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	657b      	str	r3, [r7, #84]	@ 0x54
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005852:	4413      	add	r3, r2
 8005854:	657b      	str	r3, [r7, #84]	@ 0x54
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	011a      	lsls	r2, r3, #4
 800585c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800585e:	4413      	add	r3, r2
 8005860:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005864:	653b      	str	r3, [r7, #80]	@ 0x50
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	895b      	ldrh	r3, [r3, #10]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	b29b      	uxth	r3, r3
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005874:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 8093 	bne.w	80059a6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <USB_ActivateEndpoint+0x524>
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80058c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80058e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01b      	beq.n	8005924 <USB_ActivateEndpoint+0x574>
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005902:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800591c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005920:	b29b      	uxth	r3, r3
 8005922:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800593c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800593e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005942:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005944:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005946:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800594a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	441a      	add	r2, r3
 8005956:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800595c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005968:	b29b      	uxth	r3, r3
 800596a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005982:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800599c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
 80059a4:	e0bc      	b.n	8005b20 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80059b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80059ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01d      	beq.n	80059fe <USB_ActivateEndpoint+0x64e>
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80059ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005a0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01d      	beq.n	8005a56 <USB_ActivateEndpoint+0x6a6>
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a30:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	78db      	ldrb	r3, [r3, #3]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d024      	beq.n	8005aa8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a74:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005a78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005a7c:	f083 0320 	eor.w	r3, r3, #32
 8005a80:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	8013      	strh	r3, [r2, #0]
 8005aa6:	e01d      	b.n	8005ae4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005abe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	441a      	add	r2, r3
 8005acc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	441a      	add	r2, r3
 8005b08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005b20:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3774      	adds	r7, #116	@ 0x74
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop

08005b30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b08d      	sub	sp, #52	@ 0x34
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	7b1b      	ldrb	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 808e 	bne.w	8005c60 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d044      	beq.n	8005bd6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	81bb      	strh	r3, [r7, #12]
 8005b5a:	89bb      	ldrh	r3, [r7, #12]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01b      	beq.n	8005b9c <USB_DeactivateEndpoint+0x6c>
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	817b      	strh	r3, [r7, #10]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	441a      	add	r2, r3
 8005b86:	897b      	ldrh	r3, [r7, #10]
 8005b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb2:	813b      	strh	r3, [r7, #8]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	893b      	ldrh	r3, [r7, #8]
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
 8005bd4:	e192      	b.n	8005efc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	827b      	strh	r3, [r7, #18]
 8005be4:	8a7b      	ldrh	r3, [r7, #18]
 8005be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01b      	beq.n	8005c26 <USB_DeactivateEndpoint+0xf6>
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c04:	823b      	strh	r3, [r7, #16]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	441a      	add	r2, r3
 8005c10:	8a3b      	ldrh	r3, [r7, #16]
 8005c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3c:	81fb      	strh	r3, [r7, #14]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
 8005c5e:	e14d      	b.n	8005efc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 80a5 	bne.w	8005db4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	843b      	strh	r3, [r7, #32]
 8005c78:	8c3b      	ldrh	r3, [r7, #32]
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01b      	beq.n	8005cba <USB_DeactivateEndpoint+0x18a>
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c98:	83fb      	strh	r3, [r7, #30]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	8bfb      	ldrh	r3, [r7, #30]
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	83bb      	strh	r3, [r7, #28]
 8005cc8:	8bbb      	ldrh	r3, [r7, #28]
 8005cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01b      	beq.n	8005d0a <USB_DeactivateEndpoint+0x1da>
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce8:	837b      	strh	r3, [r7, #26]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	8b7b      	ldrh	r3, [r7, #26]
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d20:	833b      	strh	r3, [r7, #24]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	8b3b      	ldrh	r3, [r7, #24]
 8005d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d58:	82fb      	strh	r3, [r7, #22]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	8afb      	ldrh	r3, [r7, #22]
 8005d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d90:	82bb      	strh	r3, [r7, #20]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	441a      	add	r2, r3
 8005d9c:	8abb      	ldrh	r3, [r7, #20]
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]
 8005db2:	e0a3      	b.n	8005efc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005dc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01b      	beq.n	8005e04 <USB_DeactivateEndpoint+0x2d4>
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005e12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <USB_DeactivateEndpoint+0x324>
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e32:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	441a      	add	r2, r3
 8005e76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ea2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eda:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3734      	adds	r7, #52	@ 0x34
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b0c2      	sub	sp, #264	@ 0x108
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f16:	6018      	str	r0, [r3, #0]
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f20:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	f040 86b7 	bne.w	8006ca2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d908      	bls.n	8005f62 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f60:	e007      	b.n	8005f72 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	7b1b      	ldrb	r3, [r3, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d13a      	bne.n	8005ff8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	88da      	ldrh	r2, [r3, #6]
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fa4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fa8:	6800      	ldr	r0, [r0, #0]
 8005faa:	f001 fc9c 	bl	80078e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	011a      	lsls	r2, r3, #4
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	f000 be1f 	b.w	8006c36 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	78db      	ldrb	r3, [r3, #3]
 8006004:	2b02      	cmp	r3, #2
 8006006:	f040 8462 	bne.w	80068ce <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800600a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	429a      	cmp	r2, r3
 8006024:	f240 83df 	bls.w	80067e6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800604a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	441a      	add	r2, r3
 800606c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006078:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800607c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 81c7 	beq.w	8006458 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d177      	bne.n	80061d6 <USB_EPStartXfer+0x2ce>
 80060e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	4413      	add	r3, r2
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	011a      	lsls	r2, r3, #4
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	4413      	add	r3, r2
 800611c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800612c:	b29a      	uxth	r2, r3
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	2b3e      	cmp	r3, #62	@ 0x3e
 8006138:	d921      	bls.n	800617e <USB_EPStartXfer+0x276>
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <USB_EPStartXfer+0x252>
 8006150:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006154:	3b01      	subs	r3, #1
 8006156:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29a      	uxth	r2, r3
 8006160:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006164:	b29b      	uxth	r3, r3
 8006166:	029b      	lsls	r3, r3, #10
 8006168:	b29b      	uxth	r3, r3
 800616a:	4313      	orrs	r3, r2
 800616c:	b29b      	uxth	r3, r3
 800616e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006176:	b29a      	uxth	r2, r3
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	e050      	b.n	8006220 <USB_EPStartXfer+0x318>
 800617e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <USB_EPStartXfer+0x294>
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006194:	b29a      	uxth	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e041      	b.n	8006220 <USB_EPStartXfer+0x318>
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <USB_EPStartXfer+0x2b4>
 80061b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80061b6:	3301      	adds	r3, #1
 80061b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	029b      	lsls	r3, r3, #10
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	4313      	orrs	r3, r2
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e024      	b.n	8006220 <USB_EPStartXfer+0x318>
 80061d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d11c      	bne.n	8006220 <USB_EPStartXfer+0x318>
 80061e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	4413      	add	r3, r2
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80061fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	011a      	lsls	r2, r3, #4
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	4413      	add	r3, r2
 8006210:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621a:	b29a      	uxth	r2, r3
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	895b      	ldrh	r3, [r3, #10]
 800622c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6959      	ldr	r1, [r3, #20]
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006240:	b29b      	uxth	r3, r3
 8006242:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006246:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800624a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800624e:	6800      	ldr	r0, [r0, #0]
 8006250:	f001 fb49 	bl	80078e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006264:	441a      	add	r2, r3
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6a1a      	ldr	r2, [r3, #32]
 800627e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	429a      	cmp	r2, r3
 800628c:	d90f      	bls.n	80062ae <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800628e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	621a      	str	r2, [r3, #32]
 80062ac:	e00e      	b.n	80062cc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80062ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2200      	movs	r2, #0
 80062ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d177      	bne.n	80063cc <USB_EPStartXfer+0x4c4>
 80062dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	4413      	add	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	011a      	lsls	r2, r3, #4
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	4413      	add	r3, r2
 8006312:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006322:	b29a      	uxth	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	2b3e      	cmp	r3, #62	@ 0x3e
 800632e:	d921      	bls.n	8006374 <USB_EPStartXfer+0x46c>
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <USB_EPStartXfer+0x448>
 8006346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634a:	3b01      	subs	r3, #1
 800634c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29a      	uxth	r2, r3
 8006356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800635a:	b29b      	uxth	r3, r3
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	b29b      	uxth	r3, r3
 8006360:	4313      	orrs	r3, r2
 8006362:	b29b      	uxth	r3, r3
 8006364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636c:	b29a      	uxth	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e056      	b.n	8006422 <USB_EPStartXfer+0x51a>
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <USB_EPStartXfer+0x48a>
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638a:	b29a      	uxth	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	e047      	b.n	8006422 <USB_EPStartXfer+0x51a>
 8006392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006396:	085b      	lsrs	r3, r3, #1
 8006398:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800639c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <USB_EPStartXfer+0x4aa>
 80063a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ac:	3301      	adds	r3, #1
 80063ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063bc:	b29b      	uxth	r3, r3
 80063be:	029b      	lsls	r3, r3, #10
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	4313      	orrs	r3, r2
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e02a      	b.n	8006422 <USB_EPStartXfer+0x51a>
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d122      	bne.n	8006422 <USB_EPStartXfer+0x51a>
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	623b      	str	r3, [r7, #32]
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	4413      	add	r3, r2
 80063fe:	623b      	str	r3, [r7, #32]
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	011a      	lsls	r2, r3, #4
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	4413      	add	r3, r2
 8006412:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641c:	b29a      	uxth	r2, r3
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	891b      	ldrh	r3, [r3, #8]
 800642e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6959      	ldr	r1, [r3, #20]
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	b29b      	uxth	r3, r3
 8006444:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006448:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800644c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006450:	6800      	ldr	r0, [r0, #0]
 8006452:	f001 fa48 	bl	80078e6 <USB_WritePMA>
 8006456:	e3ee      	b.n	8006c36 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d177      	bne.n	8006558 <USB_EPStartXfer+0x650>
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006482:	b29b      	uxth	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006488:	4413      	add	r3, r2
 800648a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800648c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	011a      	lsls	r2, r3, #4
 800649a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649c:	4413      	add	r3, r2
 800649e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ba:	d921      	bls.n	8006500 <USB_EPStartXfer+0x5f8>
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <USB_EPStartXfer+0x5d4>
 80064d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064d6:	3b01      	subs	r3, #1
 80064d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	029b      	lsls	r3, r3, #10
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	4313      	orrs	r3, r2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e056      	b.n	80065ae <USB_EPStartXfer+0x6a6>
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <USB_EPStartXfer+0x616>
 8006508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006516:	b29a      	uxth	r2, r3
 8006518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e047      	b.n	80065ae <USB_EPStartXfer+0x6a6>
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <USB_EPStartXfer+0x636>
 8006534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006538:	3301      	adds	r3, #1
 800653a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800653e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006548:	b29b      	uxth	r3, r3
 800654a:	029b      	lsls	r3, r3, #10
 800654c:	b29b      	uxth	r3, r3
 800654e:	4313      	orrs	r3, r2
 8006550:	b29a      	uxth	r2, r3
 8006552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e02a      	b.n	80065ae <USB_EPStartXfer+0x6a6>
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d122      	bne.n	80065ae <USB_EPStartXfer+0x6a6>
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	653b      	str	r3, [r7, #80]	@ 0x50
 8006574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006588:	4413      	add	r3, r2
 800658a:	653b      	str	r3, [r7, #80]	@ 0x50
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	011a      	lsls	r2, r3, #4
 800659a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800659c:	4413      	add	r3, r2
 800659e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	891b      	ldrh	r3, [r3, #8]
 80065ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6959      	ldr	r1, [r3, #20]
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f001 f982 	bl	80078e6 <USB_WritePMA>
            ep->xfer_buff += len;
 80065e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	441a      	add	r2, r3
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	429a      	cmp	r2, r3
 800661a:	d90f      	bls.n	800663c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800661c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6a1a      	ldr	r2, [r3, #32]
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	1ad2      	subs	r2, r2, r3
 800662e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	621a      	str	r2, [r3, #32]
 800663a:	e00e      	b.n	800665a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800665a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	643b      	str	r3, [r7, #64]	@ 0x40
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d177      	bne.n	8006766 <USB_EPStartXfer+0x85e>
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006690:	b29b      	uxth	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	4413      	add	r3, r2
 8006698:	63bb      	str	r3, [r7, #56]	@ 0x38
 800669a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	011a      	lsls	r2, r3, #4
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	4413      	add	r3, r2
 80066ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80066c8:	d921      	bls.n	800670e <USB_EPStartXfer+0x806>
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <USB_EPStartXfer+0x7e2>
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e4:	3b01      	subs	r3, #1
 80066e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	029b      	lsls	r3, r3, #10
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	4313      	orrs	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006706:	b29a      	uxth	r2, r3
 8006708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	e050      	b.n	80067b0 <USB_EPStartXfer+0x8a8>
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <USB_EPStartXfer+0x824>
 8006716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	e041      	b.n	80067b0 <USB_EPStartXfer+0x8a8>
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <USB_EPStartXfer+0x844>
 8006742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006746:	3301      	adds	r3, #1
 8006748:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800674c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	b29a      	uxth	r2, r3
 8006760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	e024      	b.n	80067b0 <USB_EPStartXfer+0x8a8>
 8006766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d11c      	bne.n	80067b0 <USB_EPStartXfer+0x8a8>
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006784:	b29b      	uxth	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800678a:	4413      	add	r3, r2
 800678c:	643b      	str	r3, [r7, #64]	@ 0x40
 800678e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	011a      	lsls	r2, r3, #4
 800679c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800679e:	4413      	add	r3, r2
 80067a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	895b      	ldrh	r3, [r3, #10]
 80067bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6959      	ldr	r1, [r3, #20]
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067de:	6800      	ldr	r0, [r0, #0]
 80067e0:	f001 f881 	bl	80078e6 <USB_WritePMA>
 80067e4:	e227      	b.n	8006c36 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006856:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800685e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800686c:	b29b      	uxth	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006872:	4413      	add	r3, r2
 8006874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	011a      	lsls	r2, r3, #4
 8006884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006886:	4413      	add	r3, r2
 8006888:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800688c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	b29a      	uxth	r2, r3
 8006894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006896:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	891b      	ldrh	r3, [r3, #8]
 80068a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6959      	ldr	r1, [r3, #20]
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068c6:	6800      	ldr	r0, [r0, #0]
 80068c8:	f001 f80d 	bl	80078e6 <USB_WritePMA>
 80068cc:	e1b3      	b.n	8006c36 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80068ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80c6 	beq.w	8006aa0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d177      	bne.n	8006a20 <USB_EPStartXfer+0xb18>
 8006930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800693c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006950:	4413      	add	r3, r2
 8006952:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	011a      	lsls	r2, r3, #4
 8006962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006964:	4413      	add	r3, r2
 8006966:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800696a:	667b      	str	r3, [r7, #100]	@ 0x64
 800696c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006976:	b29a      	uxth	r2, r3
 8006978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	2b3e      	cmp	r3, #62	@ 0x3e
 8006982:	d921      	bls.n	80069c8 <USB_EPStartXfer+0xac0>
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <USB_EPStartXfer+0xa9c>
 800699a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800699e:	3b01      	subs	r3, #1
 80069a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	029b      	lsls	r3, r3, #10
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4313      	orrs	r3, r2
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	e050      	b.n	8006a6a <USB_EPStartXfer+0xb62>
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <USB_EPStartXfer+0xade>
 80069d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e041      	b.n	8006a6a <USB_EPStartXfer+0xb62>
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <USB_EPStartXfer+0xafe>
 80069fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	029b      	lsls	r3, r3, #10
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	4313      	orrs	r3, r2
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e024      	b.n	8006a6a <USB_EPStartXfer+0xb62>
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d11c      	bne.n	8006a6a <USB_EPStartXfer+0xb62>
 8006a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a44:	4413      	add	r3, r2
 8006a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	011a      	lsls	r2, r3, #4
 8006a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a58:	4413      	add	r3, r2
 8006a5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	895b      	ldrh	r3, [r3, #10]
 8006a76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6959      	ldr	r1, [r3, #20]
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a98:	6800      	ldr	r0, [r0, #0]
 8006a9a:	f000 ff24 	bl	80078e6 <USB_WritePMA>
 8006a9e:	e0ca      	b.n	8006c36 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d177      	bne.n	8006ba0 <USB_EPStartXfer+0xc98>
 8006ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ad0:	4413      	add	r3, r2
 8006ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	011a      	lsls	r2, r3, #4
 8006ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006aec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b00:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b02:	d921      	bls.n	8006b48 <USB_EPStartXfer+0xc40>
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <USB_EPStartXfer+0xc1c>
 8006b1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	029b      	lsls	r3, r3, #10
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	e05c      	b.n	8006c02 <USB_EPStartXfer+0xcfa>
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <USB_EPStartXfer+0xc5e>
 8006b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	e04d      	b.n	8006c02 <USB_EPStartXfer+0xcfa>
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <USB_EPStartXfer+0xc7e>
 8006b7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b80:	3301      	adds	r3, #1
 8006b82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b9c:	801a      	strh	r2, [r3, #0]
 8006b9e:	e030      	b.n	8006c02 <USB_EPStartXfer+0xcfa>
 8006ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d128      	bne.n	8006c02 <USB_EPStartXfer+0xcfa>
 8006bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	011a      	lsls	r2, r3, #4
 8006be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	891b      	ldrh	r3, [r3, #8]
 8006c0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6959      	ldr	r1, [r3, #20]
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c30:	6800      	ldr	r0, [r0, #0]
 8006c32:	f000 fe58 	bl	80078e6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c5c:	817b      	strh	r3, [r7, #10]
 8006c5e:	897b      	ldrh	r3, [r7, #10]
 8006c60:	f083 0310 	eor.w	r3, r3, #16
 8006c64:	817b      	strh	r3, [r7, #10]
 8006c66:	897b      	ldrh	r3, [r7, #10]
 8006c68:	f083 0320 	eor.w	r3, r3, #32
 8006c6c:	817b      	strh	r3, [r7, #10]
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	897b      	ldrh	r3, [r7, #10]
 8006c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]
 8006c9e:	f000 bcde 	b.w	800765e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	7b1b      	ldrb	r3, [r3, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f040 80bb 	bne.w	8006e2a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699a      	ldr	r2, [r3, #24]
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d917      	bls.n	8006d00 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf0:	1ad2      	subs	r2, r2, r3
 8006cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	619a      	str	r2, [r3, #24]
 8006cfe:	e00e      	b.n	8006d1e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d42:	4413      	add	r3, r2
 8006d44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	011a      	lsls	r2, r3, #4
 8006d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d7e:	d924      	bls.n	8006dca <USB_EPStartXfer+0xec2>
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <USB_EPStartXfer+0xe98>
 8006d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	029b      	lsls	r3, r3, #10
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4313      	orrs	r3, r2
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	f000 bc10 	b.w	80075ea <USB_EPStartXfer+0x16e2>
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10c      	bne.n	8006dec <USB_EPStartXfer+0xee4>
 8006dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	e3fe      	b.n	80075ea <USB_EPStartXfer+0x16e2>
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <USB_EPStartXfer+0xf04>
 8006e02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e06:	3301      	adds	r3, #1
 8006e08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	029b      	lsls	r3, r3, #10
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e26:	801a      	strh	r2, [r3, #0]
 8006e28:	e3df      	b.n	80075ea <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	f040 8218 	bne.w	800726c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 809d 	bne.w	8006f88 <USB_EPStartXfer+0x1080>
 8006e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e72:	4413      	add	r3, r2
 8006e74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	011a      	lsls	r2, r3, #4
 8006e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eb6:	d92b      	bls.n	8006f10 <USB_EPStartXfer+0x1008>
 8006eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <USB_EPStartXfer+0xfe0>
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ee8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	029b      	lsls	r3, r3, #10
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	e070      	b.n	8006ff2 <USB_EPStartXfer+0x10ea>
 8006f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <USB_EPStartXfer+0x1032>
 8006f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e05b      	b.n	8006ff2 <USB_EPStartXfer+0x10ea>
 8006f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <USB_EPStartXfer+0x1062>
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f64:	3301      	adds	r3, #1
 8006f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e034      	b.n	8006ff2 <USB_EPStartXfer+0x10ea>
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d12c      	bne.n	8006ff2 <USB_EPStartXfer+0x10ea>
 8006f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	011a      	lsls	r2, r3, #4
 8006fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 809d 	bne.w	800714c <USB_EPStartXfer+0x1244>
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007036:	4413      	add	r3, r2
 8007038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800703c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	011a      	lsls	r2, r3, #4
 800704a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800704e:	4413      	add	r3, r2
 8007050:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007064:	b29a      	uxth	r2, r3
 8007066:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b3e      	cmp	r3, #62	@ 0x3e
 800707a:	d92b      	bls.n	80070d4 <USB_EPStartXfer+0x11cc>
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800708e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <USB_EPStartXfer+0x11a4>
 80070a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a6:	3b01      	subs	r3, #1
 80070a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	029b      	lsls	r3, r3, #10
 80070bc:	b29b      	uxth	r3, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	e069      	b.n	80071a8 <USB_EPStartXfer+0x12a0>
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10c      	bne.n	80070fe <USB_EPStartXfer+0x11f6>
 80070e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e054      	b.n	80071a8 <USB_EPStartXfer+0x12a0>
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <USB_EPStartXfer+0x1226>
 8007124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007128:	3301      	adds	r3, #1
 800712a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800712e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29a      	uxth	r2, r3
 8007136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800713a:	b29b      	uxth	r3, r3
 800713c:	029b      	lsls	r3, r3, #10
 800713e:	b29b      	uxth	r3, r3
 8007140:	4313      	orrs	r3, r2
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e02d      	b.n	80071a8 <USB_EPStartXfer+0x12a0>
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d125      	bne.n	80071a8 <USB_EPStartXfer+0x12a0>
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007172:	4413      	add	r3, r2
 8007174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	011a      	lsls	r2, r3, #4
 8007186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800718a:	4413      	add	r3, r2
 800718c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007190:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8218 	beq.w	80075ea <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <USB_EPStartXfer+0x12ea>
 80071e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10d      	bne.n	800720e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f040 81f5 	bne.w	80075ea <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007200:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	f040 81ee 	bne.w	80075ea <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800720e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007234:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	441a      	add	r2, r3
 8007252:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800725a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007262:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007266:	b29b      	uxth	r3, r3
 8007268:	8013      	strh	r3, [r2, #0]
 800726a:	e1be      	b.n	80075ea <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800726c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	78db      	ldrb	r3, [r3, #3]
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 81b4 	bne.w	80075e6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	429a      	cmp	r2, r3
 8007298:	d917      	bls.n	80072ca <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	619a      	str	r2, [r3, #24]
 80072c8:	e00e      	b.n	80072e8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2200      	movs	r2, #0
 80072e6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 8085 	bne.w	8007404 <USB_EPStartXfer+0x14fc>
 80072fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007316:	b29b      	uxth	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800731e:	4413      	add	r3, r2
 8007320:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	011a      	lsls	r2, r3, #4
 8007332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007336:	4413      	add	r3, r2
 8007338:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800733c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800734c:	b29a      	uxth	r2, r3
 800734e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007352:	801a      	strh	r2, [r3, #0]
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	2b3e      	cmp	r3, #62	@ 0x3e
 800735a:	d923      	bls.n	80073a4 <USB_EPStartXfer+0x149c>
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736a:	f003 031f 	and.w	r3, r3, #31
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <USB_EPStartXfer+0x1474>
 8007372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007376:	3b01      	subs	r3, #1
 8007378:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800737c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007388:	b29b      	uxth	r3, r3
 800738a:	029b      	lsls	r3, r3, #10
 800738c:	b29b      	uxth	r3, r3
 800738e:	4313      	orrs	r3, r2
 8007390:	b29b      	uxth	r3, r3
 8007392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739a:	b29a      	uxth	r2, r3
 800739c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073a0:	801a      	strh	r2, [r3, #0]
 80073a2:	e060      	b.n	8007466 <USB_EPStartXfer+0x155e>
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10c      	bne.n	80073c6 <USB_EPStartXfer+0x14be>
 80073ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	e04f      	b.n	8007466 <USB_EPStartXfer+0x155e>
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <USB_EPStartXfer+0x14de>
 80073dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e0:	3301      	adds	r3, #1
 80073e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	029b      	lsls	r3, r3, #10
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4313      	orrs	r3, r2
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e030      	b.n	8007466 <USB_EPStartXfer+0x155e>
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d128      	bne.n	8007466 <USB_EPStartXfer+0x155e>
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007430:	b29b      	uxth	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007438:	4413      	add	r3, r2
 800743a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800743e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	011a      	lsls	r2, r3, #4
 800744c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007450:	4413      	add	r3, r2
 8007452:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007456:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745e:	b29a      	uxth	r2, r3
 8007460:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f040 8085 	bne.w	8007590 <USB_EPStartXfer+0x1688>
 8007486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80074aa:	4413      	add	r3, r2
 80074ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	011a      	lsls	r2, r3, #4
 80074be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d8:	b29a      	uxth	r2, r3
 80074da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80074e6:	d923      	bls.n	8007530 <USB_EPStartXfer+0x1628>
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <USB_EPStartXfer+0x1600>
 80074fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007502:	3b01      	subs	r3, #1
 8007504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007514:	b29b      	uxth	r3, r3
 8007516:	029b      	lsls	r3, r3, #10
 8007518:	b29b      	uxth	r3, r3
 800751a:	4313      	orrs	r3, r2
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e05c      	b.n	80075ea <USB_EPStartXfer+0x16e2>
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10c      	bne.n	8007552 <USB_EPStartXfer+0x164a>
 8007538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007548:	b29a      	uxth	r2, r3
 800754a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800754e:	801a      	strh	r2, [r3, #0]
 8007550:	e04b      	b.n	80075ea <USB_EPStartXfer+0x16e2>
 8007552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <USB_EPStartXfer+0x166a>
 8007568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800756c:	3301      	adds	r3, #1
 800756e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800757e:	b29b      	uxth	r3, r3
 8007580:	029b      	lsls	r3, r3, #10
 8007582:	b29b      	uxth	r3, r3
 8007584:	4313      	orrs	r3, r2
 8007586:	b29a      	uxth	r2, r3
 8007588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e02c      	b.n	80075ea <USB_EPStartXfer+0x16e2>
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d124      	bne.n	80075ea <USB_EPStartXfer+0x16e2>
 80075a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075b6:	4413      	add	r3, r2
 80075b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	011a      	lsls	r2, r3, #4
 80075ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ce:	4413      	add	r3, r2
 80075d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e001      	b.n	80075ea <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e03a      	b.n	8007660 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800760c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007610:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007614:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007618:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800761c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007620:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007624:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007628:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800762c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	441a      	add	r2, r3
 8007646:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800764a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800764e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765a:	b29b      	uxth	r3, r3
 800765c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d020      	beq.n	80076be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800768e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007692:	81bb      	strh	r3, [r7, #12]
 8007694:	89bb      	ldrh	r3, [r7, #12]
 8007696:	f083 0310 	eor.w	r3, r3, #16
 800769a:	81bb      	strh	r3, [r7, #12]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	441a      	add	r2, r3
 80076a6:	89bb      	ldrh	r3, [r7, #12]
 80076a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	8013      	strh	r3, [r2, #0]
 80076bc:	e01f      	b.n	80076fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d4:	81fb      	strh	r3, [r7, #14]
 80076d6:	89fb      	ldrh	r3, [r7, #14]
 80076d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076dc:	81fb      	strh	r3, [r7, #14]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	441a      	add	r2, r3
 80076e8:	89fb      	ldrh	r3, [r7, #14]
 80076ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr

0800770a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800770a:	b480      	push	{r7}
 800770c:	b087      	sub	sp, #28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	7b1b      	ldrb	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f040 809d 	bne.w	8007858 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d04c      	beq.n	80077c0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	823b      	strh	r3, [r7, #16]
 8007734:	8a3b      	ldrh	r3, [r7, #16]
 8007736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01b      	beq.n	8007776 <USB_EPClearStall+0x6c>
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007754:	81fb      	strh	r3, [r7, #14]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800776e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	78db      	ldrb	r3, [r3, #3]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d06c      	beq.n	8007858 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007794:	81bb      	strh	r3, [r7, #12]
 8007796:	89bb      	ldrh	r3, [r7, #12]
 8007798:	f083 0320 	eor.w	r3, r3, #32
 800779c:	81bb      	strh	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	441a      	add	r2, r3
 80077a8:	89bb      	ldrh	r3, [r7, #12]
 80077aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	8013      	strh	r3, [r2, #0]
 80077be:	e04b      	b.n	8007858 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	82fb      	strh	r3, [r7, #22]
 80077ce:	8afb      	ldrh	r3, [r7, #22]
 80077d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01b      	beq.n	8007810 <USB_EPClearStall+0x106>
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ee:	82bb      	strh	r3, [r7, #20]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	441a      	add	r2, r3
 80077fa:	8abb      	ldrh	r3, [r7, #20]
 80077fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007826:	827b      	strh	r3, [r7, #18]
 8007828:	8a7b      	ldrh	r3, [r7, #18]
 800782a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800782e:	827b      	strh	r3, [r7, #18]
 8007830:	8a7b      	ldrh	r3, [r7, #18]
 8007832:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007836:	827b      	strh	r3, [r7, #18]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	8a7b      	ldrh	r3, [r7, #18]
 8007844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800784c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007854:	b29b      	uxth	r3, r3
 8007856:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr

08007864 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2280      	movs	r2, #128	@ 0x80
 800787a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078c4:	68fb      	ldr	r3, [r7, #12]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b08b      	sub	sp, #44	@ 0x2c
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	4611      	mov	r1, r2
 80078f2:	461a      	mov	r2, r3
 80078f4:	460b      	mov	r3, r1
 80078f6:	80fb      	strh	r3, [r7, #6]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80078fc:	88bb      	ldrh	r3, [r7, #4]
 80078fe:	3301      	adds	r3, #1
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	005a      	lsls	r2, r3, #1
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007918:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
 800791e:	e01f      	b.n	8007960 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	3301      	adds	r3, #1
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b21b      	sxth	r3, r3
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	b21a      	sxth	r2, r3
 8007932:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007936:	4313      	orrs	r3, r2
 8007938:	b21b      	sxth	r3, r3
 800793a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	8a7a      	ldrh	r2, [r7, #18]
 8007940:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	3302      	adds	r3, #2
 8007946:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	3302      	adds	r3, #2
 800794c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	3301      	adds	r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	3301      	adds	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	3b01      	subs	r3, #1
 800795e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1dc      	bne.n	8007920 <USB_WritePMA+0x3a>
  }
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	372c      	adds	r7, #44	@ 0x2c
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	4770      	bx	lr

08007972 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007972:	b480      	push	{r7}
 8007974:	b08b      	sub	sp, #44	@ 0x2c
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	4611      	mov	r1, r2
 800797e:	461a      	mov	r2, r3
 8007980:	460b      	mov	r3, r1
 8007982:	80fb      	strh	r3, [r7, #6]
 8007984:	4613      	mov	r3, r2
 8007986:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007988:	88bb      	ldrh	r3, [r7, #4]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	005a      	lsls	r2, r3, #1
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079aa:	e01b      	b.n	80079e4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	3302      	adds	r3, #2
 80079b8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	3301      	adds	r3, #1
 80079c6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	3301      	adds	r3, #1
 80079d6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	3302      	adds	r3, #2
 80079dc:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	3b01      	subs	r3, #1
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e0      	bne.n	80079ac <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80079ea:	88bb      	ldrh	r3, [r7, #4]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	701a      	strb	r2, [r3, #0]
  }
}
 8007a06:	bf00      	nop
 8007a08:	372c      	adds	r7, #44	@ 0x2c
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7c1b      	ldrb	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d115      	bne.n	8007a54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	2181      	movs	r1, #129	@ 0x81
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fe64 	bl	80096fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a40:	2202      	movs	r2, #2
 8007a42:	2101      	movs	r1, #1
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fe5a 	bl	80096fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007a52:	e012      	b.n	8007a7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a54:	2340      	movs	r3, #64	@ 0x40
 8007a56:	2202      	movs	r2, #2
 8007a58:	2181      	movs	r1, #129	@ 0x81
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fe4f 	bl	80096fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a66:	2340      	movs	r3, #64	@ 0x40
 8007a68:	2202      	movs	r2, #2
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fe46 	bl	80096fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	2182      	movs	r1, #130	@ 0x82
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 fe3c 	bl	80096fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007a90:	f001 ff5c 	bl	800994c <USBD_static_malloc>
 8007a94:	4602      	mov	r2, r0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
 8007aaa:	e026      	b.n	8007afa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7c1b      	ldrb	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 fefb 	bl	80098de <USBD_LL_PrepareReceive>
 8007ae8:	e007      	b.n	8007afa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007af0:	2340      	movs	r3, #64	@ 0x40
 8007af2:	2101      	movs	r1, #1
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 fef2 	bl	80098de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b14:	2181      	movs	r1, #129	@ 0x81
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 fe17 	bl	800974a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b22:	2101      	movs	r1, #1
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fe10 	bl	800974a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b32:	2182      	movs	r1, #130	@ 0x82
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fe08 	bl	800974a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00e      	beq.n	8007b68 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 ff02 	bl	8009964 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b086      	sub	sp, #24
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b82:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d039      	beq.n	8007c10 <USBD_CDC_Setup+0x9e>
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d17f      	bne.n	8007ca0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	88db      	ldrh	r3, [r3, #6]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d029      	beq.n	8007bfc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da11      	bge.n	8007bd6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007bbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	88d2      	ldrh	r2, [r2, #6]
 8007bc4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bc6:	6939      	ldr	r1, [r7, #16]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88db      	ldrh	r3, [r3, #6]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f9d6 	bl	8008f80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007bd4:	e06b      	b.n	8007cae <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	785a      	ldrb	r2, [r3, #1]
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	88db      	ldrh	r3, [r3, #6]
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bec:	6939      	ldr	r1, [r7, #16]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f9f1 	bl	8008fdc <USBD_CtlPrepareRx>
      break;
 8007bfa:	e058      	b.n	8007cae <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	7850      	ldrb	r0, [r2, #1]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	4798      	blx	r3
      break;
 8007c0e:	e04e      	b.n	8007cae <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b0b      	cmp	r3, #11
 8007c16:	d02e      	beq.n	8007c76 <USBD_CDC_Setup+0x104>
 8007c18:	2b0b      	cmp	r3, #11
 8007c1a:	dc38      	bgt.n	8007c8e <USBD_CDC_Setup+0x11c>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <USBD_CDC_Setup+0xb4>
 8007c20:	2b0a      	cmp	r3, #10
 8007c22:	d014      	beq.n	8007c4e <USBD_CDC_Setup+0xdc>
 8007c24:	e033      	b.n	8007c8e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d107      	bne.n	8007c40 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c30:	f107 030c 	add.w	r3, r7, #12
 8007c34:	2202      	movs	r2, #2
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f9a1 	bl	8008f80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c3e:	e02e      	b.n	8007c9e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 f932 	bl	8008eac <USBD_CtlError>
            ret = USBD_FAIL;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4c:	e027      	b.n	8007c9e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d107      	bne.n	8007c68 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c58:	f107 030f 	add.w	r3, r7, #15
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f98d 	bl	8008f80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c66:	e01a      	b.n	8007c9e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 f91e 	bl	8008eac <USBD_CtlError>
            ret = USBD_FAIL;
 8007c70:	2302      	movs	r3, #2
 8007c72:	75fb      	strb	r3, [r7, #23]
          break;
 8007c74:	e013      	b.n	8007c9e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d00d      	beq.n	8007c9c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f912 	bl	8008eac <USBD_CtlError>
            ret = USBD_FAIL;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c8c:	e006      	b.n	8007c9c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f90b 	bl	8008eac <USBD_CtlError>
          ret = USBD_FAIL;
 8007c96:	2302      	movs	r3, #2
 8007c98:	75fb      	strb	r3, [r7, #23]
          break;
 8007c9a:	e000      	b.n	8007c9e <USBD_CDC_Setup+0x12c>
          break;
 8007c9c:	bf00      	nop
      }
      break;
 8007c9e:	e006      	b.n	8007cae <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 f902 	bl	8008eac <USBD_CtlError>
      ret = USBD_FAIL;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	75fb      	strb	r3, [r7, #23]
      break;
 8007cac:	bf00      	nop
  }

  return ret;
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007cd2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d03a      	beq.n	8007d54 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	440b      	add	r3, r1
 8007cec:	331c      	adds	r3, #28
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d029      	beq.n	8007d48 <USBD_CDC_DataIn+0x90>
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	331c      	adds	r3, #28
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	78f9      	ldrb	r1, [r7, #3]
 8007d08:	68b8      	ldr	r0, [r7, #8]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	4403      	add	r3, r0
 8007d14:	3320      	adds	r3, #32
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d110      	bne.n	8007d48 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	331c      	adds	r3, #28
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d3a:	78f9      	ldrb	r1, [r7, #3]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 fda9 	bl	8009898 <USBD_LL_Transmit>
 8007d46:	e003      	b.n	8007d50 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	e000      	b.n	8007d56 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d54:	2302      	movs	r3, #2
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fdd4 	bl	8009924 <USBD_LL_GetRxDataSize>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00d      	beq.n	8007daa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007da2:	4611      	mov	r1, r2
 8007da4:	4798      	blx	r3

    return USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e000      	b.n	8007dac <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007daa:	2302      	movs	r3, #2
  }
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d014      	beq.n	8007df8 <USBD_CDC_EP0_RxReady+0x44>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007dd4:	2bff      	cmp	r3, #255	@ 0xff
 8007dd6:	d00f      	beq.n	8007df8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007de6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	22ff      	movs	r2, #255	@ 0xff
 8007df4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2243      	movs	r2, #67	@ 0x43
 8007e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007e12:	4b03      	ldr	r3, [pc, #12]	@ (8007e20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	2000009c 	.word	0x2000009c

08007e24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2243      	movs	r2, #67	@ 0x43
 8007e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007e32:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bc80      	pop	{r7}
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20000058 	.word	0x20000058

08007e44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2243      	movs	r2, #67	@ 0x43
 8007e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e52:	4b03      	ldr	r3, [pc, #12]	@ (8007e60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	200000e0 	.word	0x200000e0

08007e64 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	220a      	movs	r2, #10
 8007e70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e72:	4b03      	ldr	r3, [pc, #12]	@ (8007e80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000014 	.word	0x20000014

08007e84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007ece:	88fa      	ldrh	r2, [r7, #6]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	371c      	adds	r7, #28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d017      	beq.n	8007f52 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7c1b      	ldrb	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d109      	bne.n	8007f3e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f34:	2101      	movs	r1, #1
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fcd1 	bl	80098de <USBD_LL_PrepareReceive>
 8007f3c:	e007      	b.n	8007f4e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f44:	2340      	movs	r3, #64	@ 0x40
 8007f46:	2101      	movs	r1, #1
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fcc8 	bl	80098de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e000      	b.n	8007f54 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f52:	2302      	movs	r3, #2
  }
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f70:	2302      	movs	r3, #2
 8007f72:	e01a      	b.n	8007faa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	79fa      	ldrb	r2, [r7, #7]
 8007fa0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f001 fb36 	bl	8009614 <USBD_LL_Init>

  return USBD_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
 8007fd2:	e001      	b.n	8007fd8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fb6b 	bl	80096c8 <USBD_LL_Start>

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800801c:	2302      	movs	r3, #2
 800801e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00c      	beq.n	8008044 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	78fa      	ldrb	r2, [r7, #3]
 8008034:	4611      	mov	r1, r2
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	4611      	mov	r1, r2
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3

  return USBD_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fed7 	bl	8008e3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80080a8:	f003 031f 	and.w	r3, r3, #31
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d016      	beq.n	80080de <USBD_LL_SetupStage+0x6a>
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d81c      	bhi.n	80080ee <USBD_LL_SetupStage+0x7a>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <USBD_LL_SetupStage+0x4a>
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d008      	beq.n	80080ce <USBD_LL_SetupStage+0x5a>
 80080bc:	e017      	b.n	80080ee <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9ca 	bl	8008460 <USBD_StdDevReq>
      break;
 80080cc:	e01a      	b.n	8008104 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa2c 	bl	8008534 <USBD_StdItfReq>
      break;
 80080dc:	e012      	b.n	8008104 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa6c 	bl	80085c4 <USBD_StdEPReq>
      break;
 80080ec:	e00a      	b.n	8008104 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80080f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fb43 	bl	8009788 <USBD_LL_StallEP>
      break;
 8008102:	bf00      	nop
  }

  return USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b086      	sub	sp, #24
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	460b      	mov	r3, r1
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d14b      	bne.n	80081ba <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008128:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008130:	2b03      	cmp	r3, #3
 8008132:	d134      	bne.n	800819e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	429a      	cmp	r2, r3
 800813e:	d919      	bls.n	8008174 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	1ad2      	subs	r2, r2, r3
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008156:	429a      	cmp	r2, r3
 8008158:	d203      	bcs.n	8008162 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800815e:	b29b      	uxth	r3, r3
 8008160:	e002      	b.n	8008168 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008166:	b29b      	uxth	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 ff53 	bl	8009018 <USBD_CtlContinueRx>
 8008172:	e038      	b.n	80081e6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008186:	2b03      	cmp	r3, #3
 8008188:	d105      	bne.n	8008196 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 ff50 	bl	800903c <USBD_CtlSendStatus>
 800819c:	e023      	b.n	80081e6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081a4:	2b05      	cmp	r3, #5
 80081a6:	d11e      	bne.n	80081e6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081b0:	2100      	movs	r1, #0
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f001 fae8 	bl	8009788 <USBD_LL_StallEP>
 80081b8:	e015      	b.n	80081e6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00d      	beq.n	80081e2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d108      	bne.n	80081e2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	7afa      	ldrb	r2, [r7, #11]
 80081da:	4611      	mov	r1, r2
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	4798      	blx	r3
 80081e0:	e001      	b.n	80081e6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081e2:	2302      	movs	r3, #2
 80081e4:	e000      	b.n	80081e8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	460b      	mov	r3, r1
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d17f      	bne.n	8008304 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3314      	adds	r3, #20
 8008208:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008210:	2b02      	cmp	r3, #2
 8008212:	d15c      	bne.n	80082ce <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	429a      	cmp	r2, r3
 800821e:	d915      	bls.n	800824c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	1ad2      	subs	r2, r2, r3
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	b29b      	uxth	r3, r3
 8008234:	461a      	mov	r2, r3
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 febd 	bl	8008fb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800823e:	2300      	movs	r3, #0
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f001 fb4a 	bl	80098de <USBD_LL_PrepareReceive>
 800824a:	e04e      	b.n	80082ea <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	6912      	ldr	r2, [r2, #16]
 8008254:	fbb3 f1f2 	udiv	r1, r3, r2
 8008258:	fb01 f202 	mul.w	r2, r1, r2
 800825c:	1a9b      	subs	r3, r3, r2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d11c      	bne.n	800829c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800826a:	429a      	cmp	r2, r3
 800826c:	d316      	bcc.n	800829c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008278:	429a      	cmp	r2, r3
 800827a:	d20f      	bcs.n	800829c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fe99 	bl	8008fb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800828e:	2300      	movs	r3, #0
 8008290:	2200      	movs	r2, #0
 8008292:	2100      	movs	r1, #0
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f001 fb22 	bl	80098de <USBD_LL_PrepareReceive>
 800829a:	e026      	b.n	80082ea <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d105      	bne.n	80082be <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082be:	2180      	movs	r1, #128	@ 0x80
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f001 fa61 	bl	8009788 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fecb 	bl	8009062 <USBD_CtlReceiveStatus>
 80082cc:	e00d      	b.n	80082ea <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d004      	beq.n	80082e2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082e2:	2180      	movs	r1, #128	@ 0x80
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 fa4f 	bl	8009788 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d11d      	bne.n	8008330 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff fe81 	bl	8007ffc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008302:	e015      	b.n	8008330 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00d      	beq.n	800832c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008316:	2b03      	cmp	r3, #3
 8008318:	d108      	bne.n	800832c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	7afa      	ldrb	r2, [r7, #11]
 8008324:	4611      	mov	r1, r2
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	4798      	blx	r3
 800832a:	e001      	b.n	8008330 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800832c:	2302      	movs	r3, #2
 800832e:	e000      	b.n	8008332 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008342:	2340      	movs	r3, #64	@ 0x40
 8008344:	2200      	movs	r2, #0
 8008346:	2100      	movs	r1, #0
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 f9d8 	bl	80096fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2240      	movs	r2, #64	@ 0x40
 800835a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800835e:	2340      	movs	r3, #64	@ 0x40
 8008360:	2200      	movs	r2, #0
 8008362:	2180      	movs	r1, #128	@ 0x80
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f9ca 	bl	80096fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2240      	movs	r2, #64	@ 0x40
 8008374:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d009      	beq.n	80083b2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6852      	ldr	r2, [r2, #4]
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	4611      	mov	r1, r2
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
  }

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr

080083da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2204      	movs	r2, #4
 80083f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr

08008402 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008410:	2b04      	cmp	r3, #4
 8008412:	d105      	bne.n	8008420 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr

0800842c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800843a:	2b03      	cmp	r3, #3
 800843c:	d10b      	bne.n	8008456 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008476:	2b40      	cmp	r3, #64	@ 0x40
 8008478:	d005      	beq.n	8008486 <USBD_StdDevReq+0x26>
 800847a:	2b40      	cmp	r3, #64	@ 0x40
 800847c:	d84f      	bhi.n	800851e <USBD_StdDevReq+0xbe>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d009      	beq.n	8008496 <USBD_StdDevReq+0x36>
 8008482:	2b20      	cmp	r3, #32
 8008484:	d14b      	bne.n	800851e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
      break;
 8008494:	e048      	b.n	8008528 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	2b09      	cmp	r3, #9
 800849c:	d839      	bhi.n	8008512 <USBD_StdDevReq+0xb2>
 800849e:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <USBD_StdDevReq+0x44>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084f5 	.word	0x080084f5
 80084a8:	08008509 	.word	0x08008509
 80084ac:	08008513 	.word	0x08008513
 80084b0:	080084ff 	.word	0x080084ff
 80084b4:	08008513 	.word	0x08008513
 80084b8:	080084d7 	.word	0x080084d7
 80084bc:	080084cd 	.word	0x080084cd
 80084c0:	08008513 	.word	0x08008513
 80084c4:	080084eb 	.word	0x080084eb
 80084c8:	080084e1 	.word	0x080084e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9dc 	bl	800888c <USBD_GetDescriptor>
          break;
 80084d4:	e022      	b.n	800851c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fb3f 	bl	8008b5c <USBD_SetAddress>
          break;
 80084de:	e01d      	b.n	800851c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb7e 	bl	8008be4 <USBD_SetConfig>
          break;
 80084e8:	e018      	b.n	800851c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fc07 	bl	8008d00 <USBD_GetConfig>
          break;
 80084f2:	e013      	b.n	800851c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fc37 	bl	8008d6a <USBD_GetStatus>
          break;
 80084fc:	e00e      	b.n	800851c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fc65 	bl	8008dd0 <USBD_SetFeature>
          break;
 8008506:	e009      	b.n	800851c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fc74 	bl	8008df8 <USBD_ClrFeature>
          break;
 8008510:	e004      	b.n	800851c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fcc9 	bl	8008eac <USBD_CtlError>
          break;
 800851a:	bf00      	nop
      }
      break;
 800851c:	e004      	b.n	8008528 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fcc3 	bl	8008eac <USBD_CtlError>
      break;
 8008526:	bf00      	nop
  }

  return ret;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop

08008534 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800854a:	2b40      	cmp	r3, #64	@ 0x40
 800854c:	d005      	beq.n	800855a <USBD_StdItfReq+0x26>
 800854e:	2b40      	cmp	r3, #64	@ 0x40
 8008550:	d82e      	bhi.n	80085b0 <USBD_StdItfReq+0x7c>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <USBD_StdItfReq+0x26>
 8008556:	2b20      	cmp	r3, #32
 8008558:	d12a      	bne.n	80085b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008560:	3b01      	subs	r3, #1
 8008562:	2b02      	cmp	r3, #2
 8008564:	d81d      	bhi.n	80085a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	889b      	ldrh	r3, [r3, #4]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	d813      	bhi.n	8008598 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	88db      	ldrh	r3, [r3, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d110      	bne.n	80085ac <USBD_StdItfReq+0x78>
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10d      	bne.n	80085ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fd53 	bl	800903c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008596:	e009      	b.n	80085ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fc86 	bl	8008eac <USBD_CtlError>
          break;
 80085a0:	e004      	b.n	80085ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fc81 	bl	8008eac <USBD_CtlError>
          break;
 80085aa:	e000      	b.n	80085ae <USBD_StdItfReq+0x7a>
          break;
 80085ac:	bf00      	nop
      }
      break;
 80085ae:	e004      	b.n	80085ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fc7a 	bl	8008eac <USBD_CtlError>
      break;
 80085b8:	bf00      	nop
  }

  return USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	889b      	ldrh	r3, [r3, #4]
 80085d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085e0:	2b40      	cmp	r3, #64	@ 0x40
 80085e2:	d007      	beq.n	80085f4 <USBD_StdEPReq+0x30>
 80085e4:	2b40      	cmp	r3, #64	@ 0x40
 80085e6:	f200 8146 	bhi.w	8008876 <USBD_StdEPReq+0x2b2>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <USBD_StdEPReq+0x40>
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	f040 8141 	bne.w	8008876 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	4798      	blx	r3
      break;
 8008602:	e13d      	b.n	8008880 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800860c:	2b20      	cmp	r3, #32
 800860e:	d10a      	bne.n	8008626 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
 800861e:	4603      	mov	r3, r0
 8008620:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	e12d      	b.n	8008882 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	2b03      	cmp	r3, #3
 800862c:	d007      	beq.n	800863e <USBD_StdEPReq+0x7a>
 800862e:	2b03      	cmp	r3, #3
 8008630:	f300 811b 	bgt.w	800886a <USBD_StdEPReq+0x2a6>
 8008634:	2b00      	cmp	r3, #0
 8008636:	d072      	beq.n	800871e <USBD_StdEPReq+0x15a>
 8008638:	2b01      	cmp	r3, #1
 800863a:	d03a      	beq.n	80086b2 <USBD_StdEPReq+0xee>
 800863c:	e115      	b.n	800886a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008644:	2b02      	cmp	r3, #2
 8008646:	d002      	beq.n	800864e <USBD_StdEPReq+0x8a>
 8008648:	2b03      	cmp	r3, #3
 800864a:	d015      	beq.n	8008678 <USBD_StdEPReq+0xb4>
 800864c:	e02b      	b.n	80086a6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00c      	beq.n	800866e <USBD_StdEPReq+0xaa>
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b80      	cmp	r3, #128	@ 0x80
 8008658:	d009      	beq.n	800866e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 f892 	bl	8009788 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008664:	2180      	movs	r1, #128	@ 0x80
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 f88e 	bl	8009788 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800866c:	e020      	b.n	80086b0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fc1b 	bl	8008eac <USBD_CtlError>
              break;
 8008676:	e01b      	b.n	80086b0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	885b      	ldrh	r3, [r3, #2]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10e      	bne.n	800869e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <USBD_StdEPReq+0xda>
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b80      	cmp	r3, #128	@ 0x80
 800868a:	d008      	beq.n	800869e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	88db      	ldrh	r3, [r3, #6]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 f875 	bl	8009788 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fccc 	bl	800903c <USBD_CtlSendStatus>

              break;
 80086a4:	e004      	b.n	80086b0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fbff 	bl	8008eac <USBD_CtlError>
              break;
 80086ae:	bf00      	nop
          }
          break;
 80086b0:	e0e0      	b.n	8008874 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d002      	beq.n	80086c2 <USBD_StdEPReq+0xfe>
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d015      	beq.n	80086ec <USBD_StdEPReq+0x128>
 80086c0:	e026      	b.n	8008710 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00c      	beq.n	80086e2 <USBD_StdEPReq+0x11e>
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b80      	cmp	r3, #128	@ 0x80
 80086cc:	d009      	beq.n	80086e2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 f858 	bl	8009788 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086d8:	2180      	movs	r1, #128	@ 0x80
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 f854 	bl	8009788 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086e0:	e01c      	b.n	800871c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fbe1 	bl	8008eac <USBD_CtlError>
              break;
 80086ea:	e017      	b.n	800871c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	885b      	ldrh	r3, [r3, #2]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d112      	bne.n	800871a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d004      	beq.n	8008708 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 f85f 	bl	80097c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fc97 	bl	800903c <USBD_CtlSendStatus>
              }
              break;
 800870e:	e004      	b.n	800871a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fbca 	bl	8008eac <USBD_CtlError>
              break;
 8008718:	e000      	b.n	800871c <USBD_StdEPReq+0x158>
              break;
 800871a:	bf00      	nop
          }
          break;
 800871c:	e0aa      	b.n	8008874 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008724:	2b02      	cmp	r3, #2
 8008726:	d002      	beq.n	800872e <USBD_StdEPReq+0x16a>
 8008728:	2b03      	cmp	r3, #3
 800872a:	d032      	beq.n	8008792 <USBD_StdEPReq+0x1ce>
 800872c:	e097      	b.n	800885e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <USBD_StdEPReq+0x180>
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b80      	cmp	r3, #128	@ 0x80
 8008738:	d004      	beq.n	8008744 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fbb5 	bl	8008eac <USBD_CtlError>
                break;
 8008742:	e091      	b.n	8008868 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da0b      	bge.n	8008764 <USBD_StdEPReq+0x1a0>
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	3310      	adds	r3, #16
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	3304      	adds	r3, #4
 8008762:	e00b      	b.n	800877c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2202      	movs	r2, #2
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fbf8 	bl	8008f80 <USBD_CtlSendData>
              break;
 8008790:	e06a      	b.n	8008868 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008796:	2b00      	cmp	r3, #0
 8008798:	da11      	bge.n	80087be <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3318      	adds	r3, #24
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d117      	bne.n	80087e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb78 	bl	8008eac <USBD_CtlError>
                  break;
 80087bc:	e054      	b.n	8008868 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	f003 020f 	and.w	r2, r3, #15
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fb65 	bl	8008eac <USBD_CtlError>
                  break;
 80087e2:	e041      	b.n	8008868 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da0b      	bge.n	8008804 <USBD_StdEPReq+0x240>
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	3310      	adds	r3, #16
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	4413      	add	r3, r2
 8008800:	3304      	adds	r3, #4
 8008802:	e00b      	b.n	800881c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4413      	add	r3, r2
 800881a:	3304      	adds	r3, #4
 800881c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <USBD_StdEPReq+0x266>
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	2b80      	cmp	r3, #128	@ 0x80
 8008828:	d103      	bne.n	8008832 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e00e      	b.n	8008850 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 ffe4 	bl	8009804 <USBD_LL_IsStallEP>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	e002      	b.n	8008850 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2202      	movs	r2, #2
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fb92 	bl	8008f80 <USBD_CtlSendData>
              break;
 800885c:	e004      	b.n	8008868 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb23 	bl	8008eac <USBD_CtlError>
              break;
 8008866:	bf00      	nop
          }
          break;
 8008868:	e004      	b.n	8008874 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb1d 	bl	8008eac <USBD_CtlError>
          break;
 8008872:	bf00      	nop
      }
      break;
 8008874:	e004      	b.n	8008880 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fb17 	bl	8008eac <USBD_CtlError>
      break;
 800887e:	bf00      	nop
  }

  return ret;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b06      	cmp	r3, #6
 80088ae:	f200 8128 	bhi.w	8008b02 <USBD_GetDescriptor+0x276>
 80088b2:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <USBD_GetDescriptor+0x2c>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	080088d5 	.word	0x080088d5
 80088bc:	080088ed 	.word	0x080088ed
 80088c0:	0800892d 	.word	0x0800892d
 80088c4:	08008b03 	.word	0x08008b03
 80088c8:	08008b03 	.word	0x08008b03
 80088cc:	08008aa3 	.word	0x08008aa3
 80088d0:	08008acf 	.word	0x08008acf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	7c12      	ldrb	r2, [r2, #16]
 80088e0:	f107 0108 	add.w	r1, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
      break;
 80088ea:	e112      	b.n	8008b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7c1b      	ldrb	r3, [r3, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10d      	bne.n	8008910 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	f107 0208 	add.w	r2, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3301      	adds	r3, #1
 800890a:	2202      	movs	r2, #2
 800890c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800890e:	e100      	b.n	8008b12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008918:	f107 0208 	add.w	r2, r7, #8
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3301      	adds	r3, #1
 8008926:	2202      	movs	r2, #2
 8008928:	701a      	strb	r2, [r3, #0]
      break;
 800892a:	e0f2      	b.n	8008b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	885b      	ldrh	r3, [r3, #2]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b05      	cmp	r3, #5
 8008934:	f200 80ac 	bhi.w	8008a90 <USBD_GetDescriptor+0x204>
 8008938:	a201      	add	r2, pc, #4	@ (adr r2, 8008940 <USBD_GetDescriptor+0xb4>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008959 	.word	0x08008959
 8008944:	0800898d 	.word	0x0800898d
 8008948:	080089c1 	.word	0x080089c1
 800894c:	080089f5 	.word	0x080089f5
 8008950:	08008a29 	.word	0x08008a29
 8008954:	08008a5d 	.word	0x08008a5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897a:	e091      	b.n	8008aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa94 	bl	8008eac <USBD_CtlError>
            err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
          break;
 800898a:	e089      	b.n	8008aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ae:	e077      	b.n	8008aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa7a 	bl	8008eac <USBD_CtlError>
            err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
          break;
 80089be:	e06f      	b.n	8008aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e2:	e05d      	b.n	8008aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa60 	bl	8008eac <USBD_CtlError>
            err++;
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	3301      	adds	r3, #1
 80089f0:	72fb      	strb	r3, [r7, #11]
          break;
 80089f2:	e055      	b.n	8008aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a16:	e043      	b.n	8008aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa46 	bl	8008eac <USBD_CtlError>
            err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
          break;
 8008a26:	e03b      	b.n	8008aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4a:	e029      	b.n	8008aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa2c 	bl	8008eac <USBD_CtlError>
            err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5a:	e021      	b.n	8008aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7c12      	ldrb	r2, [r2, #16]
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a7e:	e00f      	b.n	8008aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa12 	bl	8008eac <USBD_CtlError>
            err++;
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a8e:	e007      	b.n	8008aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa0a 	bl	8008eac <USBD_CtlError>
          err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a9e:	e038      	b.n	8008b12 <USBD_GetDescriptor+0x286>
 8008aa0:	e037      	b.n	8008b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7c1b      	ldrb	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab2:	f107 0208 	add.w	r2, r7, #8
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4798      	blx	r3
 8008aba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008abc:	e029      	b.n	8008b12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9f3 	bl	8008eac <USBD_CtlError>
        err++;
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	72fb      	strb	r3, [r7, #11]
      break;
 8008acc:	e021      	b.n	8008b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7c1b      	ldrb	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10d      	bne.n	8008af2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ade:	f107 0208 	add.w	r2, r7, #8
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	4798      	blx	r3
 8008ae6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	2207      	movs	r2, #7
 8008aee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af0:	e00f      	b.n	8008b12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f9d9 	bl	8008eac <USBD_CtlError>
        err++;
 8008afa:	7afb      	ldrb	r3, [r7, #11]
 8008afc:	3301      	adds	r3, #1
 8008afe:	72fb      	strb	r3, [r7, #11]
      break;
 8008b00:	e007      	b.n	8008b12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f9d1 	bl	8008eac <USBD_CtlError>
      err++;
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b10:	bf00      	nop
  }

  if (err != 0U)
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11c      	bne.n	8008b52 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d011      	beq.n	8008b42 <USBD_GetDescriptor+0x2b6>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88db      	ldrh	r3, [r3, #6]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00d      	beq.n	8008b42 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	88da      	ldrh	r2, [r3, #6]
 8008b2a:	893b      	ldrh	r3, [r7, #8]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bf28      	it	cs
 8008b30:	4613      	movcs	r3, r2
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b36:	893b      	ldrh	r3, [r7, #8]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa1f 	bl	8008f80 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	88db      	ldrh	r3, [r3, #6]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fa76 	bl	800903c <USBD_CtlSendStatus>
 8008b50:	e000      	b.n	8008b54 <USBD_GetDescriptor+0x2c8>
    return;
 8008b52:	bf00      	nop
    }
  }
}
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop

08008b5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	889b      	ldrh	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d130      	bne.n	8008bd0 <USBD_SetAddress+0x74>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d12c      	bne.n	8008bd0 <USBD_SetAddress+0x74>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	885b      	ldrh	r3, [r3, #2]
 8008b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b7c:	d828      	bhi.n	8008bd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d104      	bne.n	8008b9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f988 	bl	8008eac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9c:	e01d      	b.n	8008bda <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7bfa      	ldrb	r2, [r7, #15]
 8008ba2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fe55 	bl	800985a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fa43 	bl	800903c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d004      	beq.n	8008bc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc4:	e009      	b.n	8008bda <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bce:	e004      	b.n	8008bda <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f96a 	bl	8008eac <USBD_CtlError>
  }
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	4b41      	ldr	r3, [pc, #260]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008bf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf8:	4b40      	ldr	r3, [pc, #256]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d904      	bls.n	8008c0a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f952 	bl	8008eac <USBD_CtlError>
 8008c08:	e075      	b.n	8008cf6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d002      	beq.n	8008c1a <USBD_SetConfig+0x36>
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d023      	beq.n	8008c60 <USBD_SetConfig+0x7c>
 8008c18:	e062      	b.n	8008ce0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c1a:	4b38      	ldr	r3, [pc, #224]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01a      	beq.n	8008c58 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c22:	4b36      	ldr	r3, [pc, #216]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2203      	movs	r2, #3
 8008c30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c34:	4b31      	ldr	r3, [pc, #196]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff f9e8 	bl	8008010 <USBD_SetClassConfig>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d104      	bne.n	8008c50 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f92f 	bl	8008eac <USBD_CtlError>
            return;
 8008c4e:	e052      	b.n	8008cf6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f9f3 	bl	800903c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c56:	e04e      	b.n	8008cf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f9ef 	bl	800903c <USBD_CtlSendStatus>
        break;
 8008c5e:	e04a      	b.n	8008cf6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c60:	4b26      	ldr	r3, [pc, #152]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d112      	bne.n	8008c8e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008c70:	4b22      	ldr	r3, [pc, #136]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c7a:	4b20      	ldr	r3, [pc, #128]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff f9e4 	bl	800804e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f9d8 	bl	800903c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c8c:	e033      	b.n	8008cf6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d01d      	beq.n	8008cd8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff f9d2 	bl	800804e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008caa:	4b14      	ldr	r3, [pc, #80]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cb4:	4b11      	ldr	r3, [pc, #68]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff f9a8 	bl	8008010 <USBD_SetClassConfig>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d104      	bne.n	8008cd0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f8ef 	bl	8008eac <USBD_CtlError>
            return;
 8008cce:	e012      	b.n	8008cf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f9b3 	bl	800903c <USBD_CtlSendStatus>
        break;
 8008cd6:	e00e      	b.n	8008cf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f9af 	bl	800903c <USBD_CtlSendStatus>
        break;
 8008cde:	e00a      	b.n	8008cf6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8e2 	bl	8008eac <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008ce8:	4b04      	ldr	r3, [pc, #16]	@ (8008cfc <USBD_SetConfig+0x118>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff f9ad 	bl	800804e <USBD_ClrClassConfig>
        break;
 8008cf4:	bf00      	nop
    }
  }
}
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200004a8 	.word	0x200004a8

08008d00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88db      	ldrh	r3, [r3, #6]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d004      	beq.n	8008d1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f8c9 	bl	8008eac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d1a:	e022      	b.n	8008d62 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	dc02      	bgt.n	8008d2c <USBD_GetConfig+0x2c>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dc03      	bgt.n	8008d32 <USBD_GetConfig+0x32>
 8008d2a:	e015      	b.n	8008d58 <USBD_GetConfig+0x58>
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d00b      	beq.n	8008d48 <USBD_GetConfig+0x48>
 8008d30:	e012      	b.n	8008d58 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f91d 	bl	8008f80 <USBD_CtlSendData>
        break;
 8008d46:	e00c      	b.n	8008d62 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f915 	bl	8008f80 <USBD_CtlSendData>
        break;
 8008d56:	e004      	b.n	8008d62 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f8a6 	bl	8008eac <USBD_CtlError>
        break;
 8008d60:	bf00      	nop
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d81e      	bhi.n	8008dbe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d004      	beq.n	8008d92 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f88e 	bl	8008eac <USBD_CtlError>
        break;
 8008d90:	e01a      	b.n	8008dc8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f043 0202 	orr.w	r2, r3, #2
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	330c      	adds	r3, #12
 8008db2:	2202      	movs	r2, #2
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8e2 	bl	8008f80 <USBD_CtlSendData>
      break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f873 	bl	8008eac <USBD_CtlError>
      break;
 8008dc6:	bf00      	nop
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d106      	bne.n	8008df0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f926 	bl	800903c <USBD_CtlSendStatus>
  }
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d80b      	bhi.n	8008e26 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d10c      	bne.n	8008e30 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f90c 	bl	800903c <USBD_CtlSendStatus>
      }
      break;
 8008e24:	e004      	b.n	8008e30 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f83f 	bl	8008eac <USBD_CtlError>
      break;
 8008e2e:	e000      	b.n	8008e32 <USBD_ClrFeature+0x3a>
      break;
 8008e30:	bf00      	nop
  }
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	785a      	ldrb	r2, [r3, #1]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	3302      	adds	r3, #2
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	3303      	adds	r3, #3
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	4413      	add	r3, r2
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	3304      	adds	r3, #4
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	3305      	adds	r3, #5
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	3306      	adds	r3, #6
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	3307      	adds	r3, #7
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	4413      	add	r3, r2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	80da      	strh	r2, [r3, #6]

}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008eb6:	2180      	movs	r1, #128	@ 0x80
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fc65 	bl	8009788 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fc61 	bl	8009788 <USBD_LL_StallEP>
}
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b086      	sub	sp, #24
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d032      	beq.n	8008f4a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f834 	bl	8008f52 <USBD_GetLen>
 8008eea:	4603      	mov	r3, r0
 8008eec:	3301      	adds	r3, #1
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	75fa      	strb	r2, [r7, #23]
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4413      	add	r3, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	7812      	ldrb	r2, [r2, #0]
 8008f08:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	75fa      	strb	r2, [r7, #23]
 8008f10:	461a      	mov	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	2203      	movs	r2, #3
 8008f18:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f1a:	e012      	b.n	8008f42 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	60fa      	str	r2, [r7, #12]
 8008f22:	7dfa      	ldrb	r2, [r7, #23]
 8008f24:	1c51      	adds	r1, r2, #1
 8008f26:	75f9      	strb	r1, [r7, #23]
 8008f28:	4611      	mov	r1, r2
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	75fa      	strb	r2, [r7, #23]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e8      	bne.n	8008f1c <USBD_GetString+0x4e>
    }
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f5e:	e005      	b.n	8008f6c <USBD_GetLen+0x1a>
  {
    len++;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	3301      	adds	r3, #1
 8008f64:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1f5      	bne.n	8008f60 <USBD_GetLen+0xe>
  }

  return len;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f96:	88fa      	ldrh	r2, [r7, #6]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fa2:	88fb      	ldrh	r3, [r7, #6]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fc75 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fc6:	88fb      	ldrh	r3, [r7, #6]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	2100      	movs	r1, #0
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fc63 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2203      	movs	r2, #3
 8008fee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008ff2:	88fa      	ldrh	r2, [r7, #6]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008ffa:	88fa      	ldrh	r2, [r7, #6]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009002:	88fb      	ldrh	r3, [r7, #6]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	2100      	movs	r1, #0
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fc68 	bl	80098de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	2100      	movs	r1, #0
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 fc56 	bl	80098de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2204      	movs	r2, #4
 8009048:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800904c:	2300      	movs	r3, #0
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fc20 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2205      	movs	r2, #5
 800906e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009072:	2300      	movs	r3, #0
 8009074:	2200      	movs	r2, #0
 8009076:	2100      	movs	r1, #0
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fc30 	bl	80098de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800908c:	2200      	movs	r2, #0
 800908e:	4912      	ldr	r1, [pc, #72]	@ (80090d8 <MX_USB_DEVICE_Init+0x50>)
 8009090:	4812      	ldr	r0, [pc, #72]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 8009092:	f7fe ff63 	bl	8007f5c <USBD_Init>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800909c:	f7f8 fc28 	bl	80018f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090a0:	490f      	ldr	r1, [pc, #60]	@ (80090e0 <MX_USB_DEVICE_Init+0x58>)
 80090a2:	480e      	ldr	r0, [pc, #56]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090a4:	f7fe ff85 	bl	8007fb2 <USBD_RegisterClass>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090ae:	f7f8 fc1f 	bl	80018f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090b2:	490c      	ldr	r1, [pc, #48]	@ (80090e4 <MX_USB_DEVICE_Init+0x5c>)
 80090b4:	4809      	ldr	r0, [pc, #36]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090b6:	f7fe fee5 	bl	8007e84 <USBD_CDC_RegisterInterface>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090c0:	f7f8 fc16 	bl	80018f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090c4:	4805      	ldr	r0, [pc, #20]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090c6:	f7fe ff8d 	bl	8007fe4 <USBD_Start>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090d0:	f7f8 fc0e 	bl	80018f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090d4:	bf00      	nop
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000134 	.word	0x20000134
 80090dc:	200004ac 	.word	0x200004ac
 80090e0:	20000020 	.word	0x20000020
 80090e4:	20000124 	.word	0x20000124

080090e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090ec:	2200      	movs	r2, #0
 80090ee:	4905      	ldr	r1, [pc, #20]	@ (8009104 <CDC_Init_FS+0x1c>)
 80090f0:	4805      	ldr	r0, [pc, #20]	@ (8009108 <CDC_Init_FS+0x20>)
 80090f2:	f7fe fedd 	bl	8007eb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090f6:	4905      	ldr	r1, [pc, #20]	@ (800910c <CDC_Init_FS+0x24>)
 80090f8:	4803      	ldr	r0, [pc, #12]	@ (8009108 <CDC_Init_FS+0x20>)
 80090fa:	f7fe fef2 	bl	8007ee2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009100:	4618      	mov	r0, r3
 8009102:	bd80      	pop	{r7, pc}
 8009104:	20000b70 	.word	0x20000b70
 8009108:	200004ac 	.word	0x200004ac
 800910c:	20000770 	.word	0x20000770

08009110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009116:	4618      	mov	r0, r3
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr
	...

08009120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
 800912c:	4613      	mov	r3, r2
 800912e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b23      	cmp	r3, #35	@ 0x23
 8009134:	d84a      	bhi.n	80091cc <CDC_Control_FS+0xac>
 8009136:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <CDC_Control_FS+0x1c>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	080091cd 	.word	0x080091cd
 8009140:	080091cd 	.word	0x080091cd
 8009144:	080091cd 	.word	0x080091cd
 8009148:	080091cd 	.word	0x080091cd
 800914c:	080091cd 	.word	0x080091cd
 8009150:	080091cd 	.word	0x080091cd
 8009154:	080091cd 	.word	0x080091cd
 8009158:	080091cd 	.word	0x080091cd
 800915c:	080091cd 	.word	0x080091cd
 8009160:	080091cd 	.word	0x080091cd
 8009164:	080091cd 	.word	0x080091cd
 8009168:	080091cd 	.word	0x080091cd
 800916c:	080091cd 	.word	0x080091cd
 8009170:	080091cd 	.word	0x080091cd
 8009174:	080091cd 	.word	0x080091cd
 8009178:	080091cd 	.word	0x080091cd
 800917c:	080091cd 	.word	0x080091cd
 8009180:	080091cd 	.word	0x080091cd
 8009184:	080091cd 	.word	0x080091cd
 8009188:	080091cd 	.word	0x080091cd
 800918c:	080091cd 	.word	0x080091cd
 8009190:	080091cd 	.word	0x080091cd
 8009194:	080091cd 	.word	0x080091cd
 8009198:	080091cd 	.word	0x080091cd
 800919c:	080091cd 	.word	0x080091cd
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091cd 	.word	0x080091cd
 80091b0:	080091cd 	.word	0x080091cd
 80091b4:	080091cd 	.word	0x080091cd
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091cd 	.word	0x080091cd
 80091c4:	080091cd 	.word	0x080091cd
 80091c8:	080091cd 	.word	0x080091cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091cc:	bf00      	nop
  }

  return (USBD_OK);
 80091ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop

080091dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	481e      	ldr	r0, [pc, #120]	@ (8009264 <CDC_Receive_FS+0x88>)
 80091ea:	f7fe fe7a 	bl	8007ee2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091ee:	481d      	ldr	r0, [pc, #116]	@ (8009264 <CDC_Receive_FS+0x88>)
 80091f0:	f7fe fe8a 	bl	8007f08 <USBD_CDC_ReceivePacket>
  for (uint32_t i = 0; i < *Len; i++){
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e026      	b.n	8009248 <CDC_Receive_FS+0x6c>
	  if (Buf[i] == '\n') {
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b0a      	cmp	r3, #10
 8009204:	d10c      	bne.n	8009220 <CDC_Receive_FS+0x44>
		  buffer[buf_index] = '\0';
 8009206:	4b18      	ldr	r3, [pc, #96]	@ (8009268 <CDC_Receive_FS+0x8c>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	4b17      	ldr	r3, [pc, #92]	@ (800926c <CDC_Receive_FS+0x90>)
 800920e:	2100      	movs	r1, #0
 8009210:	5499      	strb	r1, [r3, r2]
		  usb_data_ready = true;
 8009212:	4b17      	ldr	r3, [pc, #92]	@ (8009270 <CDC_Receive_FS+0x94>)
 8009214:	2201      	movs	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
		  buf_index = 0;
 8009218:	4b13      	ldr	r3, [pc, #76]	@ (8009268 <CDC_Receive_FS+0x8c>)
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	e010      	b.n	8009242 <CDC_Receive_FS+0x66>
	  }
	  else if (buf_index < sizeof(buffer) - 1)
 8009220:	4b11      	ldr	r3, [pc, #68]	@ (8009268 <CDC_Receive_FS+0x8c>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b3e      	cmp	r3, #62	@ 0x3e
 8009226:	d80c      	bhi.n	8009242 <CDC_Receive_FS+0x66>
	          {
	              buffer[buf_index++] = Buf[i];
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	441a      	add	r2, r3
 800922e:	4b0e      	ldr	r3, [pc, #56]	@ (8009268 <CDC_Receive_FS+0x8c>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	1c59      	adds	r1, r3, #1
 8009234:	b2c8      	uxtb	r0, r1
 8009236:	490c      	ldr	r1, [pc, #48]	@ (8009268 <CDC_Receive_FS+0x8c>)
 8009238:	7008      	strb	r0, [r1, #0]
 800923a:	4619      	mov	r1, r3
 800923c:	7812      	ldrb	r2, [r2, #0]
 800923e:	4b0b      	ldr	r3, [pc, #44]	@ (800926c <CDC_Receive_FS+0x90>)
 8009240:	545a      	strb	r2, [r3, r1]
  for (uint32_t i = 0; i < *Len; i++){
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	429a      	cmp	r2, r3
 8009250:	d3d3      	bcc.n	80091fa <CDC_Receive_FS+0x1e>

  }



  usb_data_ready = true;
 8009252:	4b07      	ldr	r3, [pc, #28]	@ (8009270 <CDC_Receive_FS+0x94>)
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
	return (USBD_OK);
 8009258:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200004ac 	.word	0x200004ac
 8009268:	20000f70 	.word	0x20000f70
 800926c:	2000040c 	.word	0x2000040c
 8009270:	2000044c 	.word	0x2000044c

08009274 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2212      	movs	r2, #18
 8009284:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009286:	4b03      	ldr	r3, [pc, #12]	@ (8009294 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	bc80      	pop	{r7}
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000150 	.word	0x20000150

08009298 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2204      	movs	r2, #4
 80092a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092aa:	4b03      	ldr	r3, [pc, #12]	@ (80092b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20000164 	.word	0x20000164

080092bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4907      	ldr	r1, [pc, #28]	@ (80092f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80092d2:	4808      	ldr	r0, [pc, #32]	@ (80092f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80092d4:	f7ff fdfb 	bl	8008ece <USBD_GetString>
 80092d8:	e004      	b.n	80092e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4904      	ldr	r1, [pc, #16]	@ (80092f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80092de:	4805      	ldr	r0, [pc, #20]	@ (80092f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80092e0:	f7ff fdf5 	bl	8008ece <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e4:	4b02      	ldr	r3, [pc, #8]	@ (80092f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000f74 	.word	0x20000f74
 80092f4:	0800e914 	.word	0x0800e914

080092f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	6039      	str	r1, [r7, #0]
 8009302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	4904      	ldr	r1, [pc, #16]	@ (8009318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009308:	4804      	ldr	r0, [pc, #16]	@ (800931c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800930a:	f7ff fde0 	bl	8008ece <USBD_GetString>
  return USBD_StrDesc;
 800930e:	4b02      	ldr	r3, [pc, #8]	@ (8009318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000f74 	.word	0x20000f74
 800931c:	0800e92c 	.word	0x0800e92c

08009320 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	221a      	movs	r2, #26
 8009330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009332:	f000 f843 	bl	80093bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009336:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000168 	.word	0x20000168

08009344 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	6039      	str	r1, [r7, #0]
 800934e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4907      	ldr	r1, [pc, #28]	@ (8009378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800935a:	4808      	ldr	r0, [pc, #32]	@ (800937c <USBD_FS_ConfigStrDescriptor+0x38>)
 800935c:	f7ff fdb7 	bl	8008ece <USBD_GetString>
 8009360:	e004      	b.n	800936c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4904      	ldr	r1, [pc, #16]	@ (8009378 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009366:	4805      	ldr	r0, [pc, #20]	@ (800937c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009368:	f7ff fdb1 	bl	8008ece <USBD_GetString>
  }
  return USBD_StrDesc;
 800936c:	4b02      	ldr	r3, [pc, #8]	@ (8009378 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000f74 	.word	0x20000f74
 800937c:	0800e940 	.word	0x0800e940

08009380 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4907      	ldr	r1, [pc, #28]	@ (80093b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009396:	4808      	ldr	r0, [pc, #32]	@ (80093b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009398:	f7ff fd99 	bl	8008ece <USBD_GetString>
 800939c:	e004      	b.n	80093a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	4904      	ldr	r1, [pc, #16]	@ (80093b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093a2:	4805      	ldr	r0, [pc, #20]	@ (80093b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093a4:	f7ff fd93 	bl	8008ece <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a8:	4b02      	ldr	r3, [pc, #8]	@ (80093b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000f74 	.word	0x20000f74
 80093b8:	0800e94c 	.word	0x0800e94c

080093bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009400 <Get_SerialNum+0x44>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009404 <Get_SerialNum+0x48>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009408 <Get_SerialNum+0x4c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093e2:	2208      	movs	r2, #8
 80093e4:	4909      	ldr	r1, [pc, #36]	@ (800940c <Get_SerialNum+0x50>)
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f814 	bl	8009414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093ec:	2204      	movs	r2, #4
 80093ee:	4908      	ldr	r1, [pc, #32]	@ (8009410 <Get_SerialNum+0x54>)
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f000 f80f 	bl	8009414 <IntToUnicode>
  }
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	1ffff7e8 	.word	0x1ffff7e8
 8009404:	1ffff7ec 	.word	0x1ffff7ec
 8009408:	1ffff7f0 	.word	0x1ffff7f0
 800940c:	2000016a 	.word	0x2000016a
 8009410:	2000017a 	.word	0x2000017a

08009414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]
 800942a:	e027      	b.n	800947c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0f1b      	lsrs	r3, r3, #28
 8009430:	2b09      	cmp	r3, #9
 8009432:	d80b      	bhi.n	800944c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	0f1b      	lsrs	r3, r3, #28
 8009438:	b2da      	uxtb	r2, r3
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	4619      	mov	r1, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	440b      	add	r3, r1
 8009444:	3230      	adds	r2, #48	@ 0x30
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	e00a      	b.n	8009462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	b2da      	uxtb	r2, r3
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4619      	mov	r1, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	440b      	add	r3, r1
 800945c:	3237      	adds	r2, #55	@ 0x37
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	3301      	adds	r3, #1
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	3301      	adds	r3, #1
 800947a:	75fb      	strb	r3, [r7, #23]
 800947c:	7dfa      	ldrb	r2, [r7, #23]
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	429a      	cmp	r2, r3
 8009482:	d3d3      	bcc.n	800942c <IntToUnicode+0x18>
  }
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr

08009490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a0d      	ldr	r2, [pc, #52]	@ (80094d4 <HAL_PCD_MspInit+0x44>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d113      	bne.n	80094ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094a2:	4b0d      	ldr	r3, [pc, #52]	@ (80094d8 <HAL_PCD_MspInit+0x48>)
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	4a0c      	ldr	r2, [pc, #48]	@ (80094d8 <HAL_PCD_MspInit+0x48>)
 80094a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80094ac:	61d3      	str	r3, [r2, #28]
 80094ae:	4b0a      	ldr	r3, [pc, #40]	@ (80094d8 <HAL_PCD_MspInit+0x48>)
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	2014      	movs	r0, #20
 80094c0:	f7f8 fd2d 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80094c4:	2014      	movs	r0, #20
 80094c6:	f7f8 fd46 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40005c00 	.word	0x40005c00
 80094d8:	40021000 	.word	0x40021000

080094dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fe fdbe 	bl	8008074 <USBD_LL_SetupStage>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009512:	78fa      	ldrb	r2, [r7, #3]
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	440b      	add	r3, r1
 8009520:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	4619      	mov	r1, r3
 800952a:	f7fe fdf0 	bl	800810e <USBD_LL_DataOutStage>
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009548:	78fa      	ldrb	r2, [r7, #3]
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	440b      	add	r3, r1
 8009556:	3324      	adds	r3, #36	@ 0x24
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	4619      	mov	r1, r3
 800955e:	f7fe fe47 	bl	80081f0 <USBD_LL_DataInStage>
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe ff57 	bl	800842c <USBD_LL_SOF>
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	799b      	ldrb	r3, [r3, #6]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d001      	beq.n	800959e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800959a:	f7f8 f9a9 	bl	80018f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095a4:	7bfa      	ldrb	r2, [r7, #15]
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe ff07 	bl	80083bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fec0 	bl	800833a <USBD_LL_Reset>
}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe ff01 	bl	80083da <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	7a9b      	ldrb	r3, [r3, #10]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095e0:	4b04      	ldr	r3, [pc, #16]	@ (80095f4 <HAL_PCD_SuspendCallback+0x30>)
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	4a03      	ldr	r2, [pc, #12]	@ (80095f4 <HAL_PCD_SuspendCallback+0x30>)
 80095e6:	f043 0306 	orr.w	r3, r3, #6
 80095ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	e000ed00 	.word	0xe000ed00

080095f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fefb 	bl	8008402 <USBD_LL_Resume>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800961c:	4a28      	ldr	r2, [pc, #160]	@ (80096c0 <USBD_LL_Init+0xac>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a26      	ldr	r2, [pc, #152]	@ (80096c0 <USBD_LL_Init+0xac>)
 8009628:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800962c:	4b24      	ldr	r3, [pc, #144]	@ (80096c0 <USBD_LL_Init+0xac>)
 800962e:	4a25      	ldr	r2, [pc, #148]	@ (80096c4 <USBD_LL_Init+0xb0>)
 8009630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009632:	4b23      	ldr	r3, [pc, #140]	@ (80096c0 <USBD_LL_Init+0xac>)
 8009634:	2208      	movs	r2, #8
 8009636:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009638:	4b21      	ldr	r3, [pc, #132]	@ (80096c0 <USBD_LL_Init+0xac>)
 800963a:	2202      	movs	r2, #2
 800963c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800963e:	4b20      	ldr	r3, [pc, #128]	@ (80096c0 <USBD_LL_Init+0xac>)
 8009640:	2200      	movs	r2, #0
 8009642:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009644:	4b1e      	ldr	r3, [pc, #120]	@ (80096c0 <USBD_LL_Init+0xac>)
 8009646:	2200      	movs	r2, #0
 8009648:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800964a:	4b1d      	ldr	r3, [pc, #116]	@ (80096c0 <USBD_LL_Init+0xac>)
 800964c:	2200      	movs	r2, #0
 800964e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009650:	481b      	ldr	r0, [pc, #108]	@ (80096c0 <USBD_LL_Init+0xac>)
 8009652:	f7f8 fe1f 	bl	8002294 <HAL_PCD_Init>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800965c:	f7f8 f948 	bl	80018f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009666:	2318      	movs	r3, #24
 8009668:	2200      	movs	r2, #0
 800966a:	2100      	movs	r1, #0
 800966c:	f7fa fb30 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009676:	2358      	movs	r3, #88	@ 0x58
 8009678:	2200      	movs	r2, #0
 800967a:	2180      	movs	r1, #128	@ 0x80
 800967c:	f7fa fb28 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009686:	23c0      	movs	r3, #192	@ 0xc0
 8009688:	2200      	movs	r2, #0
 800968a:	2181      	movs	r1, #129	@ 0x81
 800968c:	f7fa fb20 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009696:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800969a:	2200      	movs	r2, #0
 800969c:	2101      	movs	r1, #1
 800969e:	f7fa fb17 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096ac:	2200      	movs	r2, #0
 80096ae:	2182      	movs	r1, #130	@ 0x82
 80096b0:	f7fa fb0e 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20001174 	.word	0x20001174
 80096c4:	40005c00 	.word	0x40005c00

080096c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80096de:	4618      	mov	r0, r3
 80096e0:	f7f8 fece 	bl	8002480 <HAL_PCD_Start>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 f94e 	bl	800998c <USBD_Get_USB_Status>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	4608      	mov	r0, r1
 8009708:	4611      	mov	r1, r2
 800970a:	461a      	mov	r2, r3
 800970c:	4603      	mov	r3, r0
 800970e:	70fb      	strb	r3, [r7, #3]
 8009710:	460b      	mov	r3, r1
 8009712:	70bb      	strb	r3, [r7, #2]
 8009714:	4613      	mov	r3, r2
 8009716:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009726:	78bb      	ldrb	r3, [r7, #2]
 8009728:	883a      	ldrh	r2, [r7, #0]
 800972a:	78f9      	ldrb	r1, [r7, #3]
 800972c:	f7f9 f822 	bl	8002774 <HAL_PCD_EP_Open>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f928 	bl	800998c <USBD_Get_USB_Status>
 800973c:	4603      	mov	r3, r0
 800973e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009740:	7bbb      	ldrb	r3, [r7, #14]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009764:	78fa      	ldrb	r2, [r7, #3]
 8009766:	4611      	mov	r1, r2
 8009768:	4618      	mov	r0, r3
 800976a:	f7f9 f860 	bl	800282e <HAL_PCD_EP_Close>
 800976e:	4603      	mov	r3, r0
 8009770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f909 	bl	800998c <USBD_Get_USB_Status>
 800977a:	4603      	mov	r3, r0
 800977c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	4611      	mov	r1, r2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7f9 f908 	bl	80029bc <HAL_PCD_EP_SetStall>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f8ea 	bl	800998c <USBD_Get_USB_Status>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097e0:	78fa      	ldrb	r2, [r7, #3]
 80097e2:	4611      	mov	r1, r2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7f9 f949 	bl	8002a7c <HAL_PCD_EP_ClrStall>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 f8cb 	bl	800998c <USBD_Get_USB_Status>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009816:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800981c:	2b00      	cmp	r3, #0
 800981e:	da0b      	bge.n	8009838 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009826:	68f9      	ldr	r1, [r7, #12]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	00db      	lsls	r3, r3, #3
 8009830:	440b      	add	r3, r1
 8009832:	3312      	adds	r3, #18
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	e00b      	b.n	8009850 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	440b      	add	r3, r1
 800984a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800984e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr

0800985a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7f8 ff57 	bl	800272c <HAL_PCD_SetAddress>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f881 	bl	800998c <USBD_Get_USB_Status>
 800988a:	4603      	mov	r3, r0
 800988c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	461a      	mov	r2, r3
 80098a4:	460b      	mov	r3, r1
 80098a6:	72fb      	strb	r3, [r7, #11]
 80098a8:	4613      	mov	r3, r2
 80098aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80098ba:	893b      	ldrh	r3, [r7, #8]
 80098bc:	7af9      	ldrb	r1, [r7, #11]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	f7f9 f845 	bl	800294e <HAL_PCD_EP_Transmit>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 f85e 	bl	800998c <USBD_Get_USB_Status>
 80098d0:	4603      	mov	r3, r0
 80098d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b086      	sub	sp, #24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	461a      	mov	r2, r3
 80098ea:	460b      	mov	r3, r1
 80098ec:	72fb      	strb	r3, [r7, #11]
 80098ee:	4613      	mov	r3, r2
 80098f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009900:	893b      	ldrh	r3, [r7, #8]
 8009902:	7af9      	ldrb	r1, [r7, #11]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	f7f8 ffda 	bl	80028be <HAL_PCD_EP_Receive>
 800990a:	4603      	mov	r3, r0
 800990c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f83b 	bl	800998c <USBD_Get_USB_Status>
 8009916:	4603      	mov	r3, r0
 8009918:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800991a:	7dbb      	ldrb	r3, [r7, #22]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009936:	78fa      	ldrb	r2, [r7, #3]
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f7f8 fff0 	bl	8002920 <HAL_PCD_EP_GetRxCount>
 8009940:	4603      	mov	r3, r0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009954:	4b02      	ldr	r3, [pc, #8]	@ (8009960 <USBD_static_malloc+0x14>)
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr
 8009960:	2000144c 	.word	0x2000144c

08009964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	bc80      	pop	{r7}
 8009974:	4770      	bx	lr

08009976 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr

0800998c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	2b03      	cmp	r3, #3
 800999e:	d817      	bhi.n	80099d0 <USBD_Get_USB_Status+0x44>
 80099a0:	a201      	add	r2, pc, #4	@ (adr r2, 80099a8 <USBD_Get_USB_Status+0x1c>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099b9 	.word	0x080099b9
 80099ac:	080099bf 	.word	0x080099bf
 80099b0:	080099c5 	.word	0x080099c5
 80099b4:	080099cb 	.word	0x080099cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]
    break;
 80099bc:	e00b      	b.n	80099d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099be:	2302      	movs	r3, #2
 80099c0:	73fb      	strb	r3, [r7, #15]
    break;
 80099c2:	e008      	b.n	80099d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099c4:	2301      	movs	r3, #1
 80099c6:	73fb      	strb	r3, [r7, #15]
    break;
 80099c8:	e005      	b.n	80099d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099ca:	2302      	movs	r3, #2
 80099cc:	73fb      	strb	r3, [r7, #15]
    break;
 80099ce:	e002      	b.n	80099d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099d0:	2302      	movs	r3, #2
 80099d2:	73fb      	strb	r3, [r7, #15]
    break;
 80099d4:	bf00      	nop
  }
  return usb_status;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	bc80      	pop	{r7}
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop

080099e4 <__cvt>:
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ea:	461d      	mov	r5, r3
 80099ec:	bfbb      	ittet	lt
 80099ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80099f2:	461d      	movlt	r5, r3
 80099f4:	2300      	movge	r3, #0
 80099f6:	232d      	movlt	r3, #45	@ 0x2d
 80099f8:	b088      	sub	sp, #32
 80099fa:	4614      	mov	r4, r2
 80099fc:	bfb8      	it	lt
 80099fe:	4614      	movlt	r4, r2
 8009a00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a02:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009a04:	7013      	strb	r3, [r2, #0]
 8009a06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a08:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009a0c:	f023 0820 	bic.w	r8, r3, #32
 8009a10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a14:	d005      	beq.n	8009a22 <__cvt+0x3e>
 8009a16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a1a:	d100      	bne.n	8009a1e <__cvt+0x3a>
 8009a1c:	3601      	adds	r6, #1
 8009a1e:	2302      	movs	r3, #2
 8009a20:	e000      	b.n	8009a24 <__cvt+0x40>
 8009a22:	2303      	movs	r3, #3
 8009a24:	aa07      	add	r2, sp, #28
 8009a26:	9204      	str	r2, [sp, #16]
 8009a28:	aa06      	add	r2, sp, #24
 8009a2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009a2e:	e9cd 3600 	strd	r3, r6, [sp]
 8009a32:	4622      	mov	r2, r4
 8009a34:	462b      	mov	r3, r5
 8009a36:	f001 f8ab 	bl	800ab90 <_dtoa_r>
 8009a3a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a3e:	4607      	mov	r7, r0
 8009a40:	d119      	bne.n	8009a76 <__cvt+0x92>
 8009a42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a44:	07db      	lsls	r3, r3, #31
 8009a46:	d50e      	bpl.n	8009a66 <__cvt+0x82>
 8009a48:	eb00 0906 	add.w	r9, r0, r6
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4620      	mov	r0, r4
 8009a52:	4629      	mov	r1, r5
 8009a54:	f7f6 ffa8 	bl	80009a8 <__aeabi_dcmpeq>
 8009a58:	b108      	cbz	r0, 8009a5e <__cvt+0x7a>
 8009a5a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a5e:	2230      	movs	r2, #48	@ 0x30
 8009a60:	9b07      	ldr	r3, [sp, #28]
 8009a62:	454b      	cmp	r3, r9
 8009a64:	d31e      	bcc.n	8009aa4 <__cvt+0xc0>
 8009a66:	4638      	mov	r0, r7
 8009a68:	9b07      	ldr	r3, [sp, #28]
 8009a6a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009a6c:	1bdb      	subs	r3, r3, r7
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	b008      	add	sp, #32
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a7a:	eb00 0906 	add.w	r9, r0, r6
 8009a7e:	d1e5      	bne.n	8009a4c <__cvt+0x68>
 8009a80:	7803      	ldrb	r3, [r0, #0]
 8009a82:	2b30      	cmp	r3, #48	@ 0x30
 8009a84:	d10a      	bne.n	8009a9c <__cvt+0xb8>
 8009a86:	2200      	movs	r2, #0
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	f7f6 ff8b 	bl	80009a8 <__aeabi_dcmpeq>
 8009a92:	b918      	cbnz	r0, 8009a9c <__cvt+0xb8>
 8009a94:	f1c6 0601 	rsb	r6, r6, #1
 8009a98:	f8ca 6000 	str.w	r6, [sl]
 8009a9c:	f8da 3000 	ldr.w	r3, [sl]
 8009aa0:	4499      	add	r9, r3
 8009aa2:	e7d3      	b.n	8009a4c <__cvt+0x68>
 8009aa4:	1c59      	adds	r1, r3, #1
 8009aa6:	9107      	str	r1, [sp, #28]
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	e7d9      	b.n	8009a60 <__cvt+0x7c>

08009aac <__exponent>:
 8009aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	bfb6      	itet	lt
 8009ab2:	232d      	movlt	r3, #45	@ 0x2d
 8009ab4:	232b      	movge	r3, #43	@ 0x2b
 8009ab6:	4249      	neglt	r1, r1
 8009ab8:	2909      	cmp	r1, #9
 8009aba:	7002      	strb	r2, [r0, #0]
 8009abc:	7043      	strb	r3, [r0, #1]
 8009abe:	dd29      	ble.n	8009b14 <__exponent+0x68>
 8009ac0:	f10d 0307 	add.w	r3, sp, #7
 8009ac4:	461d      	mov	r5, r3
 8009ac6:	270a      	movs	r7, #10
 8009ac8:	fbb1 f6f7 	udiv	r6, r1, r7
 8009acc:	461a      	mov	r2, r3
 8009ace:	fb07 1416 	mls	r4, r7, r6, r1
 8009ad2:	3430      	adds	r4, #48	@ 0x30
 8009ad4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ad8:	460c      	mov	r4, r1
 8009ada:	2c63      	cmp	r4, #99	@ 0x63
 8009adc:	4631      	mov	r1, r6
 8009ade:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ae2:	dcf1      	bgt.n	8009ac8 <__exponent+0x1c>
 8009ae4:	3130      	adds	r1, #48	@ 0x30
 8009ae6:	1e94      	subs	r4, r2, #2
 8009ae8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009aec:	4623      	mov	r3, r4
 8009aee:	1c41      	adds	r1, r0, #1
 8009af0:	42ab      	cmp	r3, r5
 8009af2:	d30a      	bcc.n	8009b0a <__exponent+0x5e>
 8009af4:	f10d 0309 	add.w	r3, sp, #9
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	42ac      	cmp	r4, r5
 8009afc:	bf88      	it	hi
 8009afe:	2300      	movhi	r3, #0
 8009b00:	3302      	adds	r3, #2
 8009b02:	4403      	add	r3, r0
 8009b04:	1a18      	subs	r0, r3, r0
 8009b06:	b003      	add	sp, #12
 8009b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b12:	e7ed      	b.n	8009af0 <__exponent+0x44>
 8009b14:	2330      	movs	r3, #48	@ 0x30
 8009b16:	3130      	adds	r1, #48	@ 0x30
 8009b18:	7083      	strb	r3, [r0, #2]
 8009b1a:	70c1      	strb	r1, [r0, #3]
 8009b1c:	1d03      	adds	r3, r0, #4
 8009b1e:	e7f1      	b.n	8009b04 <__exponent+0x58>

08009b20 <_printf_float>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	b091      	sub	sp, #68	@ 0x44
 8009b26:	460c      	mov	r4, r1
 8009b28:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	461f      	mov	r7, r3
 8009b30:	4605      	mov	r5, r0
 8009b32:	f000 ff19 	bl	800a968 <_localeconv_r>
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	9308      	str	r3, [sp, #32]
 8009b3c:	f7f6 fb08 	bl	8000150 <strlen>
 8009b40:	2300      	movs	r3, #0
 8009b42:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b44:	f8d8 3000 	ldr.w	r3, [r8]
 8009b48:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b4a:	3307      	adds	r3, #7
 8009b4c:	f023 0307 	bic.w	r3, r3, #7
 8009b50:	f103 0208 	add.w	r2, r3, #8
 8009b54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b58:	f8d4 b000 	ldr.w	fp, [r4]
 8009b5c:	f8c8 2000 	str.w	r2, [r8]
 8009b60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b6a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8009dec <_printf_float+0x2cc>)
 8009b7c:	f7f6 ff46 	bl	8000a0c <__aeabi_dcmpun>
 8009b80:	bb70      	cbnz	r0, 8009be0 <_printf_float+0xc0>
 8009b82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	4b98      	ldr	r3, [pc, #608]	@ (8009dec <_printf_float+0x2cc>)
 8009b8c:	f7f6 ff20 	bl	80009d0 <__aeabi_dcmple>
 8009b90:	bb30      	cbnz	r0, 8009be0 <_printf_float+0xc0>
 8009b92:	2200      	movs	r2, #0
 8009b94:	2300      	movs	r3, #0
 8009b96:	4640      	mov	r0, r8
 8009b98:	4649      	mov	r1, r9
 8009b9a:	f7f6 ff0f 	bl	80009bc <__aeabi_dcmplt>
 8009b9e:	b110      	cbz	r0, 8009ba6 <_printf_float+0x86>
 8009ba0:	232d      	movs	r3, #45	@ 0x2d
 8009ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ba6:	4a92      	ldr	r2, [pc, #584]	@ (8009df0 <_printf_float+0x2d0>)
 8009ba8:	4b92      	ldr	r3, [pc, #584]	@ (8009df4 <_printf_float+0x2d4>)
 8009baa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bae:	bf8c      	ite	hi
 8009bb0:	4690      	movhi	r8, r2
 8009bb2:	4698      	movls	r8, r3
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	f04f 0900 	mov.w	r9, #0
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	f02b 0304 	bic.w	r3, fp, #4
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	4633      	mov	r3, r6
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	9700      	str	r7, [sp, #0]
 8009bca:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009bcc:	f000 f9d4 	bl	8009f78 <_printf_common>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f040 8090 	bne.w	8009cf6 <_printf_float+0x1d6>
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bda:	b011      	add	sp, #68	@ 0x44
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	4642      	mov	r2, r8
 8009be2:	464b      	mov	r3, r9
 8009be4:	4640      	mov	r0, r8
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 ff10 	bl	8000a0c <__aeabi_dcmpun>
 8009bec:	b148      	cbz	r0, 8009c02 <_printf_float+0xe2>
 8009bee:	464b      	mov	r3, r9
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bfb8      	it	lt
 8009bf4:	232d      	movlt	r3, #45	@ 0x2d
 8009bf6:	4a80      	ldr	r2, [pc, #512]	@ (8009df8 <_printf_float+0x2d8>)
 8009bf8:	bfb8      	it	lt
 8009bfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8009dfc <_printf_float+0x2dc>)
 8009c00:	e7d3      	b.n	8009baa <_printf_float+0x8a>
 8009c02:	6863      	ldr	r3, [r4, #4]
 8009c04:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	d13f      	bne.n	8009c8c <_printf_float+0x16c>
 8009c0c:	2306      	movs	r3, #6
 8009c0e:	6063      	str	r3, [r4, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	9206      	str	r2, [sp, #24]
 8009c1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8009c1c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009c20:	aa0d      	add	r2, sp, #52	@ 0x34
 8009c22:	9203      	str	r2, [sp, #12]
 8009c24:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009c28:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	4642      	mov	r2, r8
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4628      	mov	r0, r5
 8009c34:	464b      	mov	r3, r9
 8009c36:	910a      	str	r1, [sp, #40]	@ 0x28
 8009c38:	f7ff fed4 	bl	80099e4 <__cvt>
 8009c3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c3e:	4680      	mov	r8, r0
 8009c40:	2947      	cmp	r1, #71	@ 0x47
 8009c42:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009c44:	d128      	bne.n	8009c98 <_printf_float+0x178>
 8009c46:	1cc8      	adds	r0, r1, #3
 8009c48:	db02      	blt.n	8009c50 <_printf_float+0x130>
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	dd40      	ble.n	8009cd2 <_printf_float+0x1b2>
 8009c50:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c54:	fa5f fa8a 	uxtb.w	sl, sl
 8009c58:	4652      	mov	r2, sl
 8009c5a:	3901      	subs	r1, #1
 8009c5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c60:	910d      	str	r1, [sp, #52]	@ 0x34
 8009c62:	f7ff ff23 	bl	8009aac <__exponent>
 8009c66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c68:	4681      	mov	r9, r0
 8009c6a:	1813      	adds	r3, r2, r0
 8009c6c:	2a01      	cmp	r2, #1
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	dc02      	bgt.n	8009c78 <_printf_float+0x158>
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	07d2      	lsls	r2, r2, #31
 8009c76:	d501      	bpl.n	8009c7c <_printf_float+0x15c>
 8009c78:	3301      	adds	r3, #1
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d09e      	beq.n	8009bc2 <_printf_float+0xa2>
 8009c84:	232d      	movs	r3, #45	@ 0x2d
 8009c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c8a:	e79a      	b.n	8009bc2 <_printf_float+0xa2>
 8009c8c:	2947      	cmp	r1, #71	@ 0x47
 8009c8e:	d1bf      	bne.n	8009c10 <_printf_float+0xf0>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1bd      	bne.n	8009c10 <_printf_float+0xf0>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7ba      	b.n	8009c0e <_printf_float+0xee>
 8009c98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c9c:	d9dc      	bls.n	8009c58 <_printf_float+0x138>
 8009c9e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ca2:	d118      	bne.n	8009cd6 <_printf_float+0x1b6>
 8009ca4:	2900      	cmp	r1, #0
 8009ca6:	6863      	ldr	r3, [r4, #4]
 8009ca8:	dd0b      	ble.n	8009cc2 <_printf_float+0x1a2>
 8009caa:	6121      	str	r1, [r4, #16]
 8009cac:	b913      	cbnz	r3, 8009cb4 <_printf_float+0x194>
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	07d0      	lsls	r0, r2, #31
 8009cb2:	d502      	bpl.n	8009cba <_printf_float+0x19a>
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	440b      	add	r3, r1
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	f04f 0900 	mov.w	r9, #0
 8009cbe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cc0:	e7dc      	b.n	8009c7c <_printf_float+0x15c>
 8009cc2:	b913      	cbnz	r3, 8009cca <_printf_float+0x1aa>
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	07d2      	lsls	r2, r2, #31
 8009cc8:	d501      	bpl.n	8009cce <_printf_float+0x1ae>
 8009cca:	3302      	adds	r3, #2
 8009ccc:	e7f4      	b.n	8009cb8 <_printf_float+0x198>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e7f2      	b.n	8009cb8 <_printf_float+0x198>
 8009cd2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd8:	4299      	cmp	r1, r3
 8009cda:	db05      	blt.n	8009ce8 <_printf_float+0x1c8>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	6121      	str	r1, [r4, #16]
 8009ce0:	07d8      	lsls	r0, r3, #31
 8009ce2:	d5ea      	bpl.n	8009cba <_printf_float+0x19a>
 8009ce4:	1c4b      	adds	r3, r1, #1
 8009ce6:	e7e7      	b.n	8009cb8 <_printf_float+0x198>
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	bfcc      	ite	gt
 8009cec:	2201      	movgt	r2, #1
 8009cee:	f1c1 0202 	rsble	r2, r1, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	e7e0      	b.n	8009cb8 <_printf_float+0x198>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	055a      	lsls	r2, r3, #21
 8009cfa:	d407      	bmi.n	8009d0c <_printf_float+0x1ec>
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	4642      	mov	r2, r8
 8009d00:	4631      	mov	r1, r6
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b8      	blx	r7
 8009d06:	3001      	adds	r0, #1
 8009d08:	d12b      	bne.n	8009d62 <_printf_float+0x242>
 8009d0a:	e764      	b.n	8009bd6 <_printf_float+0xb6>
 8009d0c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d10:	f240 80dc 	bls.w	8009ecc <_printf_float+0x3ac>
 8009d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f7f6 fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d033      	beq.n	8009d8c <_printf_float+0x26c>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4631      	mov	r1, r6
 8009d28:	4628      	mov	r0, r5
 8009d2a:	4a35      	ldr	r2, [pc, #212]	@ (8009e00 <_printf_float+0x2e0>)
 8009d2c:	47b8      	blx	r7
 8009d2e:	3001      	adds	r0, #1
 8009d30:	f43f af51 	beq.w	8009bd6 <_printf_float+0xb6>
 8009d34:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009d38:	4543      	cmp	r3, r8
 8009d3a:	db02      	blt.n	8009d42 <_printf_float+0x222>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	07d8      	lsls	r0, r3, #31
 8009d40:	d50f      	bpl.n	8009d62 <_printf_float+0x242>
 8009d42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b8      	blx	r7
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f43f af42 	beq.w	8009bd6 <_printf_float+0xb6>
 8009d52:	f04f 0900 	mov.w	r9, #0
 8009d56:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d5a:	f104 0a1a 	add.w	sl, r4, #26
 8009d5e:	45c8      	cmp	r8, r9
 8009d60:	dc09      	bgt.n	8009d76 <_printf_float+0x256>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	079b      	lsls	r3, r3, #30
 8009d66:	f100 8102 	bmi.w	8009f6e <_printf_float+0x44e>
 8009d6a:	68e0      	ldr	r0, [r4, #12]
 8009d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d6e:	4298      	cmp	r0, r3
 8009d70:	bfb8      	it	lt
 8009d72:	4618      	movlt	r0, r3
 8009d74:	e731      	b.n	8009bda <_printf_float+0xba>
 8009d76:	2301      	movs	r3, #1
 8009d78:	4652      	mov	r2, sl
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b8      	blx	r7
 8009d80:	3001      	adds	r0, #1
 8009d82:	f43f af28 	beq.w	8009bd6 <_printf_float+0xb6>
 8009d86:	f109 0901 	add.w	r9, r9, #1
 8009d8a:	e7e8      	b.n	8009d5e <_printf_float+0x23e>
 8009d8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	dc38      	bgt.n	8009e04 <_printf_float+0x2e4>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	4a19      	ldr	r2, [pc, #100]	@ (8009e00 <_printf_float+0x2e0>)
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f af1a 	beq.w	8009bd6 <_printf_float+0xb6>
 8009da2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009da6:	ea59 0303 	orrs.w	r3, r9, r3
 8009daa:	d102      	bne.n	8009db2 <_printf_float+0x292>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	07d9      	lsls	r1, r3, #31
 8009db0:	d5d7      	bpl.n	8009d62 <_printf_float+0x242>
 8009db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009db6:	4631      	mov	r1, r6
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b8      	blx	r7
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	f43f af0a 	beq.w	8009bd6 <_printf_float+0xb6>
 8009dc2:	f04f 0a00 	mov.w	sl, #0
 8009dc6:	f104 0b1a 	add.w	fp, r4, #26
 8009dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dcc:	425b      	negs	r3, r3
 8009dce:	4553      	cmp	r3, sl
 8009dd0:	dc01      	bgt.n	8009dd6 <_printf_float+0x2b6>
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	e793      	b.n	8009cfe <_printf_float+0x1de>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	465a      	mov	r2, fp
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	f43f aef8 	beq.w	8009bd6 <_printf_float+0xb6>
 8009de6:	f10a 0a01 	add.w	sl, sl, #1
 8009dea:	e7ee      	b.n	8009dca <_printf_float+0x2aa>
 8009dec:	7fefffff 	.word	0x7fefffff
 8009df0:	0800e98e 	.word	0x0800e98e
 8009df4:	0800e98a 	.word	0x0800e98a
 8009df8:	0800e996 	.word	0x0800e996
 8009dfc:	0800e992 	.word	0x0800e992
 8009e00:	0800ead0 	.word	0x0800ead0
 8009e04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e06:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009e0a:	4553      	cmp	r3, sl
 8009e0c:	bfa8      	it	ge
 8009e0e:	4653      	movge	r3, sl
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	4699      	mov	r9, r3
 8009e14:	dc36      	bgt.n	8009e84 <_printf_float+0x364>
 8009e16:	f04f 0b00 	mov.w	fp, #0
 8009e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e1e:	f104 021a 	add.w	r2, r4, #26
 8009e22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e26:	eba3 0309 	sub.w	r3, r3, r9
 8009e2a:	455b      	cmp	r3, fp
 8009e2c:	dc31      	bgt.n	8009e92 <_printf_float+0x372>
 8009e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e30:	459a      	cmp	sl, r3
 8009e32:	dc3a      	bgt.n	8009eaa <_printf_float+0x38a>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	07da      	lsls	r2, r3, #31
 8009e38:	d437      	bmi.n	8009eaa <_printf_float+0x38a>
 8009e3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e3c:	ebaa 0903 	sub.w	r9, sl, r3
 8009e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e42:	ebaa 0303 	sub.w	r3, sl, r3
 8009e46:	4599      	cmp	r9, r3
 8009e48:	bfa8      	it	ge
 8009e4a:	4699      	movge	r9, r3
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	dc33      	bgt.n	8009eba <_printf_float+0x39a>
 8009e52:	f04f 0800 	mov.w	r8, #0
 8009e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e5a:	f104 0b1a 	add.w	fp, r4, #26
 8009e5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e60:	ebaa 0303 	sub.w	r3, sl, r3
 8009e64:	eba3 0309 	sub.w	r3, r3, r9
 8009e68:	4543      	cmp	r3, r8
 8009e6a:	f77f af7a 	ble.w	8009d62 <_printf_float+0x242>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	465a      	mov	r2, fp
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f43f aeac 	beq.w	8009bd6 <_printf_float+0xb6>
 8009e7e:	f108 0801 	add.w	r8, r8, #1
 8009e82:	e7ec      	b.n	8009e5e <_printf_float+0x33e>
 8009e84:	4642      	mov	r2, r8
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d1c2      	bne.n	8009e16 <_printf_float+0x2f6>
 8009e90:	e6a1      	b.n	8009bd6 <_printf_float+0xb6>
 8009e92:	2301      	movs	r3, #1
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	920a      	str	r2, [sp, #40]	@ 0x28
 8009e9a:	47b8      	blx	r7
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f43f ae9a 	beq.w	8009bd6 <_printf_float+0xb6>
 8009ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ea4:	f10b 0b01 	add.w	fp, fp, #1
 8009ea8:	e7bb      	b.n	8009e22 <_printf_float+0x302>
 8009eaa:	4631      	mov	r1, r6
 8009eac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d1c0      	bne.n	8009e3a <_printf_float+0x31a>
 8009eb8:	e68d      	b.n	8009bd6 <_printf_float+0xb6>
 8009eba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ebc:	464b      	mov	r3, r9
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	4442      	add	r2, r8
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d1c3      	bne.n	8009e52 <_printf_float+0x332>
 8009eca:	e684      	b.n	8009bd6 <_printf_float+0xb6>
 8009ecc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009ed0:	f1ba 0f01 	cmp.w	sl, #1
 8009ed4:	dc01      	bgt.n	8009eda <_printf_float+0x3ba>
 8009ed6:	07db      	lsls	r3, r3, #31
 8009ed8:	d536      	bpl.n	8009f48 <_printf_float+0x428>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4642      	mov	r2, r8
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	f43f ae76 	beq.w	8009bd6 <_printf_float+0xb6>
 8009eea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f43f ae6e 	beq.w	8009bd6 <_printf_float+0xb6>
 8009efa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009efe:	2200      	movs	r2, #0
 8009f00:	2300      	movs	r3, #0
 8009f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f06:	f7f6 fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8009f0a:	b9c0      	cbnz	r0, 8009f3e <_printf_float+0x41e>
 8009f0c:	4653      	mov	r3, sl
 8009f0e:	f108 0201 	add.w	r2, r8, #1
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d10c      	bne.n	8009f36 <_printf_float+0x416>
 8009f1c:	e65b      	b.n	8009bd6 <_printf_float+0xb6>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	465a      	mov	r2, fp
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f ae54 	beq.w	8009bd6 <_printf_float+0xb6>
 8009f2e:	f108 0801 	add.w	r8, r8, #1
 8009f32:	45d0      	cmp	r8, sl
 8009f34:	dbf3      	blt.n	8009f1e <_printf_float+0x3fe>
 8009f36:	464b      	mov	r3, r9
 8009f38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f3c:	e6e0      	b.n	8009d00 <_printf_float+0x1e0>
 8009f3e:	f04f 0800 	mov.w	r8, #0
 8009f42:	f104 0b1a 	add.w	fp, r4, #26
 8009f46:	e7f4      	b.n	8009f32 <_printf_float+0x412>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	e7e1      	b.n	8009f12 <_printf_float+0x3f2>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	464a      	mov	r2, r9
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae3c 	beq.w	8009bd6 <_printf_float+0xb6>
 8009f5e:	f108 0801 	add.w	r8, r8, #1
 8009f62:	68e3      	ldr	r3, [r4, #12]
 8009f64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f66:	1a5b      	subs	r3, r3, r1
 8009f68:	4543      	cmp	r3, r8
 8009f6a:	dcf0      	bgt.n	8009f4e <_printf_float+0x42e>
 8009f6c:	e6fd      	b.n	8009d6a <_printf_float+0x24a>
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	f104 0919 	add.w	r9, r4, #25
 8009f76:	e7f4      	b.n	8009f62 <_printf_float+0x442>

08009f78 <_printf_common>:
 8009f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	4698      	mov	r8, r3
 8009f80:	688a      	ldr	r2, [r1, #8]
 8009f82:	690b      	ldr	r3, [r1, #16]
 8009f84:	4607      	mov	r7, r0
 8009f86:	4293      	cmp	r3, r2
 8009f88:	bfb8      	it	lt
 8009f8a:	4613      	movlt	r3, r2
 8009f8c:	6033      	str	r3, [r6, #0]
 8009f8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f92:	460c      	mov	r4, r1
 8009f94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f98:	b10a      	cbz	r2, 8009f9e <_printf_common+0x26>
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	6033      	str	r3, [r6, #0]
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	0699      	lsls	r1, r3, #26
 8009fa2:	bf42      	ittt	mi
 8009fa4:	6833      	ldrmi	r3, [r6, #0]
 8009fa6:	3302      	addmi	r3, #2
 8009fa8:	6033      	strmi	r3, [r6, #0]
 8009faa:	6825      	ldr	r5, [r4, #0]
 8009fac:	f015 0506 	ands.w	r5, r5, #6
 8009fb0:	d106      	bne.n	8009fc0 <_printf_common+0x48>
 8009fb2:	f104 0a19 	add.w	sl, r4, #25
 8009fb6:	68e3      	ldr	r3, [r4, #12]
 8009fb8:	6832      	ldr	r2, [r6, #0]
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	dc2b      	bgt.n	800a018 <_printf_common+0xa0>
 8009fc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	3b00      	subs	r3, #0
 8009fc8:	bf18      	it	ne
 8009fca:	2301      	movne	r3, #1
 8009fcc:	0692      	lsls	r2, r2, #26
 8009fce:	d430      	bmi.n	800a032 <_printf_common+0xba>
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fd8:	47c8      	blx	r9
 8009fda:	3001      	adds	r0, #1
 8009fdc:	d023      	beq.n	800a026 <_printf_common+0xae>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	6922      	ldr	r2, [r4, #16]
 8009fe2:	f003 0306 	and.w	r3, r3, #6
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	bf14      	ite	ne
 8009fea:	2500      	movne	r5, #0
 8009fec:	6833      	ldreq	r3, [r6, #0]
 8009fee:	f04f 0600 	mov.w	r6, #0
 8009ff2:	bf08      	it	eq
 8009ff4:	68e5      	ldreq	r5, [r4, #12]
 8009ff6:	f104 041a 	add.w	r4, r4, #26
 8009ffa:	bf08      	it	eq
 8009ffc:	1aed      	subeq	r5, r5, r3
 8009ffe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a002:	bf08      	it	eq
 800a004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a008:	4293      	cmp	r3, r2
 800a00a:	bfc4      	itt	gt
 800a00c:	1a9b      	subgt	r3, r3, r2
 800a00e:	18ed      	addgt	r5, r5, r3
 800a010:	42b5      	cmp	r5, r6
 800a012:	d11a      	bne.n	800a04a <_printf_common+0xd2>
 800a014:	2000      	movs	r0, #0
 800a016:	e008      	b.n	800a02a <_printf_common+0xb2>
 800a018:	2301      	movs	r3, #1
 800a01a:	4652      	mov	r2, sl
 800a01c:	4641      	mov	r1, r8
 800a01e:	4638      	mov	r0, r7
 800a020:	47c8      	blx	r9
 800a022:	3001      	adds	r0, #1
 800a024:	d103      	bne.n	800a02e <_printf_common+0xb6>
 800a026:	f04f 30ff 	mov.w	r0, #4294967295
 800a02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02e:	3501      	adds	r5, #1
 800a030:	e7c1      	b.n	8009fb6 <_printf_common+0x3e>
 800a032:	2030      	movs	r0, #48	@ 0x30
 800a034:	18e1      	adds	r1, r4, r3
 800a036:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a040:	4422      	add	r2, r4
 800a042:	3302      	adds	r3, #2
 800a044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a048:	e7c2      	b.n	8009fd0 <_printf_common+0x58>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4622      	mov	r2, r4
 800a04e:	4641      	mov	r1, r8
 800a050:	4638      	mov	r0, r7
 800a052:	47c8      	blx	r9
 800a054:	3001      	adds	r0, #1
 800a056:	d0e6      	beq.n	800a026 <_printf_common+0xae>
 800a058:	3601      	adds	r6, #1
 800a05a:	e7d9      	b.n	800a010 <_printf_common+0x98>

0800a05c <_printf_i>:
 800a05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	7e0f      	ldrb	r7, [r1, #24]
 800a062:	4691      	mov	r9, r2
 800a064:	2f78      	cmp	r7, #120	@ 0x78
 800a066:	4680      	mov	r8, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	469a      	mov	sl, r3
 800a06c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a06e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a072:	d807      	bhi.n	800a084 <_printf_i+0x28>
 800a074:	2f62      	cmp	r7, #98	@ 0x62
 800a076:	d80a      	bhi.n	800a08e <_printf_i+0x32>
 800a078:	2f00      	cmp	r7, #0
 800a07a:	f000 80d1 	beq.w	800a220 <_printf_i+0x1c4>
 800a07e:	2f58      	cmp	r7, #88	@ 0x58
 800a080:	f000 80b8 	beq.w	800a1f4 <_printf_i+0x198>
 800a084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a088:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a08c:	e03a      	b.n	800a104 <_printf_i+0xa8>
 800a08e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a092:	2b15      	cmp	r3, #21
 800a094:	d8f6      	bhi.n	800a084 <_printf_i+0x28>
 800a096:	a101      	add	r1, pc, #4	@ (adr r1, 800a09c <_printf_i+0x40>)
 800a098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a09c:	0800a0f5 	.word	0x0800a0f5
 800a0a0:	0800a109 	.word	0x0800a109
 800a0a4:	0800a085 	.word	0x0800a085
 800a0a8:	0800a085 	.word	0x0800a085
 800a0ac:	0800a085 	.word	0x0800a085
 800a0b0:	0800a085 	.word	0x0800a085
 800a0b4:	0800a109 	.word	0x0800a109
 800a0b8:	0800a085 	.word	0x0800a085
 800a0bc:	0800a085 	.word	0x0800a085
 800a0c0:	0800a085 	.word	0x0800a085
 800a0c4:	0800a085 	.word	0x0800a085
 800a0c8:	0800a207 	.word	0x0800a207
 800a0cc:	0800a133 	.word	0x0800a133
 800a0d0:	0800a1c1 	.word	0x0800a1c1
 800a0d4:	0800a085 	.word	0x0800a085
 800a0d8:	0800a085 	.word	0x0800a085
 800a0dc:	0800a229 	.word	0x0800a229
 800a0e0:	0800a085 	.word	0x0800a085
 800a0e4:	0800a133 	.word	0x0800a133
 800a0e8:	0800a085 	.word	0x0800a085
 800a0ec:	0800a085 	.word	0x0800a085
 800a0f0:	0800a1c9 	.word	0x0800a1c9
 800a0f4:	6833      	ldr	r3, [r6, #0]
 800a0f6:	1d1a      	adds	r2, r3, #4
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6032      	str	r2, [r6, #0]
 800a0fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a104:	2301      	movs	r3, #1
 800a106:	e09c      	b.n	800a242 <_printf_i+0x1e6>
 800a108:	6833      	ldr	r3, [r6, #0]
 800a10a:	6820      	ldr	r0, [r4, #0]
 800a10c:	1d19      	adds	r1, r3, #4
 800a10e:	6031      	str	r1, [r6, #0]
 800a110:	0606      	lsls	r6, r0, #24
 800a112:	d501      	bpl.n	800a118 <_printf_i+0xbc>
 800a114:	681d      	ldr	r5, [r3, #0]
 800a116:	e003      	b.n	800a120 <_printf_i+0xc4>
 800a118:	0645      	lsls	r5, r0, #25
 800a11a:	d5fb      	bpl.n	800a114 <_printf_i+0xb8>
 800a11c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a120:	2d00      	cmp	r5, #0
 800a122:	da03      	bge.n	800a12c <_printf_i+0xd0>
 800a124:	232d      	movs	r3, #45	@ 0x2d
 800a126:	426d      	negs	r5, r5
 800a128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a12c:	230a      	movs	r3, #10
 800a12e:	4858      	ldr	r0, [pc, #352]	@ (800a290 <_printf_i+0x234>)
 800a130:	e011      	b.n	800a156 <_printf_i+0xfa>
 800a132:	6821      	ldr	r1, [r4, #0]
 800a134:	6833      	ldr	r3, [r6, #0]
 800a136:	0608      	lsls	r0, r1, #24
 800a138:	f853 5b04 	ldr.w	r5, [r3], #4
 800a13c:	d402      	bmi.n	800a144 <_printf_i+0xe8>
 800a13e:	0649      	lsls	r1, r1, #25
 800a140:	bf48      	it	mi
 800a142:	b2ad      	uxthmi	r5, r5
 800a144:	2f6f      	cmp	r7, #111	@ 0x6f
 800a146:	6033      	str	r3, [r6, #0]
 800a148:	bf14      	ite	ne
 800a14a:	230a      	movne	r3, #10
 800a14c:	2308      	moveq	r3, #8
 800a14e:	4850      	ldr	r0, [pc, #320]	@ (800a290 <_printf_i+0x234>)
 800a150:	2100      	movs	r1, #0
 800a152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a156:	6866      	ldr	r6, [r4, #4]
 800a158:	2e00      	cmp	r6, #0
 800a15a:	60a6      	str	r6, [r4, #8]
 800a15c:	db05      	blt.n	800a16a <_printf_i+0x10e>
 800a15e:	6821      	ldr	r1, [r4, #0]
 800a160:	432e      	orrs	r6, r5
 800a162:	f021 0104 	bic.w	r1, r1, #4
 800a166:	6021      	str	r1, [r4, #0]
 800a168:	d04b      	beq.n	800a202 <_printf_i+0x1a6>
 800a16a:	4616      	mov	r6, r2
 800a16c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a170:	fb03 5711 	mls	r7, r3, r1, r5
 800a174:	5dc7      	ldrb	r7, [r0, r7]
 800a176:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a17a:	462f      	mov	r7, r5
 800a17c:	42bb      	cmp	r3, r7
 800a17e:	460d      	mov	r5, r1
 800a180:	d9f4      	bls.n	800a16c <_printf_i+0x110>
 800a182:	2b08      	cmp	r3, #8
 800a184:	d10b      	bne.n	800a19e <_printf_i+0x142>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	07df      	lsls	r7, r3, #31
 800a18a:	d508      	bpl.n	800a19e <_printf_i+0x142>
 800a18c:	6923      	ldr	r3, [r4, #16]
 800a18e:	6861      	ldr	r1, [r4, #4]
 800a190:	4299      	cmp	r1, r3
 800a192:	bfde      	ittt	le
 800a194:	2330      	movle	r3, #48	@ 0x30
 800a196:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a19a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a19e:	1b92      	subs	r2, r2, r6
 800a1a0:	6122      	str	r2, [r4, #16]
 800a1a2:	464b      	mov	r3, r9
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f8cd a000 	str.w	sl, [sp]
 800a1ac:	aa03      	add	r2, sp, #12
 800a1ae:	f7ff fee3 	bl	8009f78 <_printf_common>
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	d14a      	bne.n	800a24c <_printf_i+0x1f0>
 800a1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ba:	b004      	add	sp, #16
 800a1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	f043 0320 	orr.w	r3, r3, #32
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	2778      	movs	r7, #120	@ 0x78
 800a1ca:	4832      	ldr	r0, [pc, #200]	@ (800a294 <_printf_i+0x238>)
 800a1cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	6831      	ldr	r1, [r6, #0]
 800a1d4:	061f      	lsls	r7, r3, #24
 800a1d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1da:	d402      	bmi.n	800a1e2 <_printf_i+0x186>
 800a1dc:	065f      	lsls	r7, r3, #25
 800a1de:	bf48      	it	mi
 800a1e0:	b2ad      	uxthmi	r5, r5
 800a1e2:	6031      	str	r1, [r6, #0]
 800a1e4:	07d9      	lsls	r1, r3, #31
 800a1e6:	bf44      	itt	mi
 800a1e8:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ec:	6023      	strmi	r3, [r4, #0]
 800a1ee:	b11d      	cbz	r5, 800a1f8 <_printf_i+0x19c>
 800a1f0:	2310      	movs	r3, #16
 800a1f2:	e7ad      	b.n	800a150 <_printf_i+0xf4>
 800a1f4:	4826      	ldr	r0, [pc, #152]	@ (800a290 <_printf_i+0x234>)
 800a1f6:	e7e9      	b.n	800a1cc <_printf_i+0x170>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	f023 0320 	bic.w	r3, r3, #32
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	e7f6      	b.n	800a1f0 <_printf_i+0x194>
 800a202:	4616      	mov	r6, r2
 800a204:	e7bd      	b.n	800a182 <_printf_i+0x126>
 800a206:	6833      	ldr	r3, [r6, #0]
 800a208:	6825      	ldr	r5, [r4, #0]
 800a20a:	1d18      	adds	r0, r3, #4
 800a20c:	6961      	ldr	r1, [r4, #20]
 800a20e:	6030      	str	r0, [r6, #0]
 800a210:	062e      	lsls	r6, r5, #24
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	d501      	bpl.n	800a21a <_printf_i+0x1be>
 800a216:	6019      	str	r1, [r3, #0]
 800a218:	e002      	b.n	800a220 <_printf_i+0x1c4>
 800a21a:	0668      	lsls	r0, r5, #25
 800a21c:	d5fb      	bpl.n	800a216 <_printf_i+0x1ba>
 800a21e:	8019      	strh	r1, [r3, #0]
 800a220:	2300      	movs	r3, #0
 800a222:	4616      	mov	r6, r2
 800a224:	6123      	str	r3, [r4, #16]
 800a226:	e7bc      	b.n	800a1a2 <_printf_i+0x146>
 800a228:	6833      	ldr	r3, [r6, #0]
 800a22a:	2100      	movs	r1, #0
 800a22c:	1d1a      	adds	r2, r3, #4
 800a22e:	6032      	str	r2, [r6, #0]
 800a230:	681e      	ldr	r6, [r3, #0]
 800a232:	6862      	ldr	r2, [r4, #4]
 800a234:	4630      	mov	r0, r6
 800a236:	f000 fc0e 	bl	800aa56 <memchr>
 800a23a:	b108      	cbz	r0, 800a240 <_printf_i+0x1e4>
 800a23c:	1b80      	subs	r0, r0, r6
 800a23e:	6060      	str	r0, [r4, #4]
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	2300      	movs	r3, #0
 800a246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a24a:	e7aa      	b.n	800a1a2 <_printf_i+0x146>
 800a24c:	4632      	mov	r2, r6
 800a24e:	4649      	mov	r1, r9
 800a250:	4640      	mov	r0, r8
 800a252:	6923      	ldr	r3, [r4, #16]
 800a254:	47d0      	blx	sl
 800a256:	3001      	adds	r0, #1
 800a258:	d0ad      	beq.n	800a1b6 <_printf_i+0x15a>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	079b      	lsls	r3, r3, #30
 800a25e:	d413      	bmi.n	800a288 <_printf_i+0x22c>
 800a260:	68e0      	ldr	r0, [r4, #12]
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	4298      	cmp	r0, r3
 800a266:	bfb8      	it	lt
 800a268:	4618      	movlt	r0, r3
 800a26a:	e7a6      	b.n	800a1ba <_printf_i+0x15e>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4632      	mov	r2, r6
 800a270:	4649      	mov	r1, r9
 800a272:	4640      	mov	r0, r8
 800a274:	47d0      	blx	sl
 800a276:	3001      	adds	r0, #1
 800a278:	d09d      	beq.n	800a1b6 <_printf_i+0x15a>
 800a27a:	3501      	adds	r5, #1
 800a27c:	68e3      	ldr	r3, [r4, #12]
 800a27e:	9903      	ldr	r1, [sp, #12]
 800a280:	1a5b      	subs	r3, r3, r1
 800a282:	42ab      	cmp	r3, r5
 800a284:	dcf2      	bgt.n	800a26c <_printf_i+0x210>
 800a286:	e7eb      	b.n	800a260 <_printf_i+0x204>
 800a288:	2500      	movs	r5, #0
 800a28a:	f104 0619 	add.w	r6, r4, #25
 800a28e:	e7f5      	b.n	800a27c <_printf_i+0x220>
 800a290:	0800e99a 	.word	0x0800e99a
 800a294:	0800e9ab 	.word	0x0800e9ab

0800a298 <_scanf_float>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	b087      	sub	sp, #28
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	688b      	ldr	r3, [r1, #8]
 800a2a2:	4691      	mov	r9, r2
 800a2a4:	1e5a      	subs	r2, r3, #1
 800a2a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a2aa:	bf82      	ittt	hi
 800a2ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a2b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a2b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	f04f 0500 	mov.w	r5, #0
 800a2be:	bf88      	it	hi
 800a2c0:	608b      	strhi	r3, [r1, #8]
 800a2c2:	680b      	ldr	r3, [r1, #0]
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a2ca:	f842 3b1c 	str.w	r3, [r2], #28
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	bf98      	it	ls
 800a2d2:	f04f 0b00 	movls.w	fp, #0
 800a2d6:	4616      	mov	r6, r2
 800a2d8:	46aa      	mov	sl, r5
 800a2da:	462f      	mov	r7, r5
 800a2dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a2e0:	9201      	str	r2, [sp, #4]
 800a2e2:	9502      	str	r5, [sp, #8]
 800a2e4:	68a2      	ldr	r2, [r4, #8]
 800a2e6:	b15a      	cbz	r2, 800a300 <_scanf_float+0x68>
 800a2e8:	f8d9 3000 	ldr.w	r3, [r9]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	2b4e      	cmp	r3, #78	@ 0x4e
 800a2f0:	d862      	bhi.n	800a3b8 <_scanf_float+0x120>
 800a2f2:	2b40      	cmp	r3, #64	@ 0x40
 800a2f4:	d83a      	bhi.n	800a36c <_scanf_float+0xd4>
 800a2f6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a2fa:	b2c8      	uxtb	r0, r1
 800a2fc:	280e      	cmp	r0, #14
 800a2fe:	d938      	bls.n	800a372 <_scanf_float+0xda>
 800a300:	b11f      	cbz	r7, 800a30a <_scanf_float+0x72>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a30e:	f1ba 0f01 	cmp.w	sl, #1
 800a312:	f200 8114 	bhi.w	800a53e <_scanf_float+0x2a6>
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	429e      	cmp	r6, r3
 800a31a:	f200 8105 	bhi.w	800a528 <_scanf_float+0x290>
 800a31e:	2001      	movs	r0, #1
 800a320:	b007      	add	sp, #28
 800a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a326:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a32a:	2a0d      	cmp	r2, #13
 800a32c:	d8e8      	bhi.n	800a300 <_scanf_float+0x68>
 800a32e:	a101      	add	r1, pc, #4	@ (adr r1, 800a334 <_scanf_float+0x9c>)
 800a330:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a334:	0800a47d 	.word	0x0800a47d
 800a338:	0800a301 	.word	0x0800a301
 800a33c:	0800a301 	.word	0x0800a301
 800a340:	0800a301 	.word	0x0800a301
 800a344:	0800a4d9 	.word	0x0800a4d9
 800a348:	0800a4b3 	.word	0x0800a4b3
 800a34c:	0800a301 	.word	0x0800a301
 800a350:	0800a301 	.word	0x0800a301
 800a354:	0800a48b 	.word	0x0800a48b
 800a358:	0800a301 	.word	0x0800a301
 800a35c:	0800a301 	.word	0x0800a301
 800a360:	0800a301 	.word	0x0800a301
 800a364:	0800a301 	.word	0x0800a301
 800a368:	0800a447 	.word	0x0800a447
 800a36c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a370:	e7db      	b.n	800a32a <_scanf_float+0x92>
 800a372:	290e      	cmp	r1, #14
 800a374:	d8c4      	bhi.n	800a300 <_scanf_float+0x68>
 800a376:	a001      	add	r0, pc, #4	@ (adr r0, 800a37c <_scanf_float+0xe4>)
 800a378:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a37c:	0800a437 	.word	0x0800a437
 800a380:	0800a301 	.word	0x0800a301
 800a384:	0800a437 	.word	0x0800a437
 800a388:	0800a4c7 	.word	0x0800a4c7
 800a38c:	0800a301 	.word	0x0800a301
 800a390:	0800a3d9 	.word	0x0800a3d9
 800a394:	0800a41d 	.word	0x0800a41d
 800a398:	0800a41d 	.word	0x0800a41d
 800a39c:	0800a41d 	.word	0x0800a41d
 800a3a0:	0800a41d 	.word	0x0800a41d
 800a3a4:	0800a41d 	.word	0x0800a41d
 800a3a8:	0800a41d 	.word	0x0800a41d
 800a3ac:	0800a41d 	.word	0x0800a41d
 800a3b0:	0800a41d 	.word	0x0800a41d
 800a3b4:	0800a41d 	.word	0x0800a41d
 800a3b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a3ba:	d809      	bhi.n	800a3d0 <_scanf_float+0x138>
 800a3bc:	2b60      	cmp	r3, #96	@ 0x60
 800a3be:	d8b2      	bhi.n	800a326 <_scanf_float+0x8e>
 800a3c0:	2b54      	cmp	r3, #84	@ 0x54
 800a3c2:	d07b      	beq.n	800a4bc <_scanf_float+0x224>
 800a3c4:	2b59      	cmp	r3, #89	@ 0x59
 800a3c6:	d19b      	bne.n	800a300 <_scanf_float+0x68>
 800a3c8:	2d07      	cmp	r5, #7
 800a3ca:	d199      	bne.n	800a300 <_scanf_float+0x68>
 800a3cc:	2508      	movs	r5, #8
 800a3ce:	e02f      	b.n	800a430 <_scanf_float+0x198>
 800a3d0:	2b74      	cmp	r3, #116	@ 0x74
 800a3d2:	d073      	beq.n	800a4bc <_scanf_float+0x224>
 800a3d4:	2b79      	cmp	r3, #121	@ 0x79
 800a3d6:	e7f6      	b.n	800a3c6 <_scanf_float+0x12e>
 800a3d8:	6821      	ldr	r1, [r4, #0]
 800a3da:	05c8      	lsls	r0, r1, #23
 800a3dc:	d51e      	bpl.n	800a41c <_scanf_float+0x184>
 800a3de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a3e2:	6021      	str	r1, [r4, #0]
 800a3e4:	3701      	adds	r7, #1
 800a3e6:	f1bb 0f00 	cmp.w	fp, #0
 800a3ea:	d003      	beq.n	800a3f4 <_scanf_float+0x15c>
 800a3ec:	3201      	adds	r2, #1
 800a3ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3f2:	60a2      	str	r2, [r4, #8]
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	60a3      	str	r3, [r4, #8]
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a404:	3b01      	subs	r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	f8c9 3004 	str.w	r3, [r9, #4]
 800a40c:	f340 8083 	ble.w	800a516 <_scanf_float+0x27e>
 800a410:	f8d9 3000 	ldr.w	r3, [r9]
 800a414:	3301      	adds	r3, #1
 800a416:	f8c9 3000 	str.w	r3, [r9]
 800a41a:	e763      	b.n	800a2e4 <_scanf_float+0x4c>
 800a41c:	eb1a 0105 	adds.w	r1, sl, r5
 800a420:	f47f af6e 	bne.w	800a300 <_scanf_float+0x68>
 800a424:	460d      	mov	r5, r1
 800a426:	468a      	mov	sl, r1
 800a428:	6822      	ldr	r2, [r4, #0]
 800a42a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a42e:	6022      	str	r2, [r4, #0]
 800a430:	f806 3b01 	strb.w	r3, [r6], #1
 800a434:	e7de      	b.n	800a3f4 <_scanf_float+0x15c>
 800a436:	6822      	ldr	r2, [r4, #0]
 800a438:	0610      	lsls	r0, r2, #24
 800a43a:	f57f af61 	bpl.w	800a300 <_scanf_float+0x68>
 800a43e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	e7f4      	b.n	800a430 <_scanf_float+0x198>
 800a446:	f1ba 0f00 	cmp.w	sl, #0
 800a44a:	d10c      	bne.n	800a466 <_scanf_float+0x1ce>
 800a44c:	b977      	cbnz	r7, 800a46c <_scanf_float+0x1d4>
 800a44e:	6822      	ldr	r2, [r4, #0]
 800a450:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a454:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a458:	d108      	bne.n	800a46c <_scanf_float+0x1d4>
 800a45a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a45e:	f04f 0a01 	mov.w	sl, #1
 800a462:	6022      	str	r2, [r4, #0]
 800a464:	e7e4      	b.n	800a430 <_scanf_float+0x198>
 800a466:	f1ba 0f02 	cmp.w	sl, #2
 800a46a:	d051      	beq.n	800a510 <_scanf_float+0x278>
 800a46c:	2d01      	cmp	r5, #1
 800a46e:	d002      	beq.n	800a476 <_scanf_float+0x1de>
 800a470:	2d04      	cmp	r5, #4
 800a472:	f47f af45 	bne.w	800a300 <_scanf_float+0x68>
 800a476:	3501      	adds	r5, #1
 800a478:	b2ed      	uxtb	r5, r5
 800a47a:	e7d9      	b.n	800a430 <_scanf_float+0x198>
 800a47c:	f1ba 0f01 	cmp.w	sl, #1
 800a480:	f47f af3e 	bne.w	800a300 <_scanf_float+0x68>
 800a484:	f04f 0a02 	mov.w	sl, #2
 800a488:	e7d2      	b.n	800a430 <_scanf_float+0x198>
 800a48a:	b975      	cbnz	r5, 800a4aa <_scanf_float+0x212>
 800a48c:	2f00      	cmp	r7, #0
 800a48e:	f47f af38 	bne.w	800a302 <_scanf_float+0x6a>
 800a492:	6822      	ldr	r2, [r4, #0]
 800a494:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a498:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a49c:	f040 80ff 	bne.w	800a69e <_scanf_float+0x406>
 800a4a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a4a4:	2501      	movs	r5, #1
 800a4a6:	6022      	str	r2, [r4, #0]
 800a4a8:	e7c2      	b.n	800a430 <_scanf_float+0x198>
 800a4aa:	2d03      	cmp	r5, #3
 800a4ac:	d0e3      	beq.n	800a476 <_scanf_float+0x1de>
 800a4ae:	2d05      	cmp	r5, #5
 800a4b0:	e7df      	b.n	800a472 <_scanf_float+0x1da>
 800a4b2:	2d02      	cmp	r5, #2
 800a4b4:	f47f af24 	bne.w	800a300 <_scanf_float+0x68>
 800a4b8:	2503      	movs	r5, #3
 800a4ba:	e7b9      	b.n	800a430 <_scanf_float+0x198>
 800a4bc:	2d06      	cmp	r5, #6
 800a4be:	f47f af1f 	bne.w	800a300 <_scanf_float+0x68>
 800a4c2:	2507      	movs	r5, #7
 800a4c4:	e7b4      	b.n	800a430 <_scanf_float+0x198>
 800a4c6:	6822      	ldr	r2, [r4, #0]
 800a4c8:	0591      	lsls	r1, r2, #22
 800a4ca:	f57f af19 	bpl.w	800a300 <_scanf_float+0x68>
 800a4ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	9702      	str	r7, [sp, #8]
 800a4d6:	e7ab      	b.n	800a430 <_scanf_float+0x198>
 800a4d8:	6822      	ldr	r2, [r4, #0]
 800a4da:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a4de:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a4e2:	d005      	beq.n	800a4f0 <_scanf_float+0x258>
 800a4e4:	0550      	lsls	r0, r2, #21
 800a4e6:	f57f af0b 	bpl.w	800a300 <_scanf_float+0x68>
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	f000 80d7 	beq.w	800a69e <_scanf_float+0x406>
 800a4f0:	0591      	lsls	r1, r2, #22
 800a4f2:	bf58      	it	pl
 800a4f4:	9902      	ldrpl	r1, [sp, #8]
 800a4f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a4fa:	bf58      	it	pl
 800a4fc:	1a79      	subpl	r1, r7, r1
 800a4fe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a502:	f04f 0700 	mov.w	r7, #0
 800a506:	bf58      	it	pl
 800a508:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	e78f      	b.n	800a430 <_scanf_float+0x198>
 800a510:	f04f 0a03 	mov.w	sl, #3
 800a514:	e78c      	b.n	800a430 <_scanf_float+0x198>
 800a516:	4649      	mov	r1, r9
 800a518:	4640      	mov	r0, r8
 800a51a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a51e:	4798      	blx	r3
 800a520:	2800      	cmp	r0, #0
 800a522:	f43f aedf 	beq.w	800a2e4 <_scanf_float+0x4c>
 800a526:	e6eb      	b.n	800a300 <_scanf_float+0x68>
 800a528:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a52c:	464a      	mov	r2, r9
 800a52e:	4640      	mov	r0, r8
 800a530:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a534:	4798      	blx	r3
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	3b01      	subs	r3, #1
 800a53a:	6123      	str	r3, [r4, #16]
 800a53c:	e6eb      	b.n	800a316 <_scanf_float+0x7e>
 800a53e:	1e6b      	subs	r3, r5, #1
 800a540:	2b06      	cmp	r3, #6
 800a542:	d824      	bhi.n	800a58e <_scanf_float+0x2f6>
 800a544:	2d02      	cmp	r5, #2
 800a546:	d836      	bhi.n	800a5b6 <_scanf_float+0x31e>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	429e      	cmp	r6, r3
 800a54c:	f67f aee7 	bls.w	800a31e <_scanf_float+0x86>
 800a550:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a554:	464a      	mov	r2, r9
 800a556:	4640      	mov	r0, r8
 800a558:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a55c:	4798      	blx	r3
 800a55e:	6923      	ldr	r3, [r4, #16]
 800a560:	3b01      	subs	r3, #1
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	e7f0      	b.n	800a548 <_scanf_float+0x2b0>
 800a566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a56a:	464a      	mov	r2, r9
 800a56c:	4640      	mov	r0, r8
 800a56e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a572:	4798      	blx	r3
 800a574:	6923      	ldr	r3, [r4, #16]
 800a576:	3b01      	subs	r3, #1
 800a578:	6123      	str	r3, [r4, #16]
 800a57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a57e:	fa5f fa8a 	uxtb.w	sl, sl
 800a582:	f1ba 0f02 	cmp.w	sl, #2
 800a586:	d1ee      	bne.n	800a566 <_scanf_float+0x2ce>
 800a588:	3d03      	subs	r5, #3
 800a58a:	b2ed      	uxtb	r5, r5
 800a58c:	1b76      	subs	r6, r6, r5
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	05da      	lsls	r2, r3, #23
 800a592:	d530      	bpl.n	800a5f6 <_scanf_float+0x35e>
 800a594:	055b      	lsls	r3, r3, #21
 800a596:	d511      	bpl.n	800a5bc <_scanf_float+0x324>
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	429e      	cmp	r6, r3
 800a59c:	f67f aebf 	bls.w	800a31e <_scanf_float+0x86>
 800a5a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5a4:	464a      	mov	r2, r9
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5ac:	4798      	blx	r3
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	e7f0      	b.n	800a598 <_scanf_float+0x300>
 800a5b6:	46aa      	mov	sl, r5
 800a5b8:	46b3      	mov	fp, r6
 800a5ba:	e7de      	b.n	800a57a <_scanf_float+0x2e2>
 800a5bc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	2965      	cmp	r1, #101	@ 0x65
 800a5c4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5c8:	f106 35ff 	add.w	r5, r6, #4294967295
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	d00c      	beq.n	800a5ea <_scanf_float+0x352>
 800a5d0:	2945      	cmp	r1, #69	@ 0x45
 800a5d2:	d00a      	beq.n	800a5ea <_scanf_float+0x352>
 800a5d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5d8:	464a      	mov	r2, r9
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4798      	blx	r3
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	1eb5      	subs	r5, r6, #2
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	464a      	mov	r2, r9
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5f2:	4798      	blx	r3
 800a5f4:	462e      	mov	r6, r5
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	f012 0210 	ands.w	r2, r2, #16
 800a5fc:	d001      	beq.n	800a602 <_scanf_float+0x36a>
 800a5fe:	2000      	movs	r0, #0
 800a600:	e68e      	b.n	800a320 <_scanf_float+0x88>
 800a602:	7032      	strb	r2, [r6, #0]
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a60a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a60e:	d125      	bne.n	800a65c <_scanf_float+0x3c4>
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	429f      	cmp	r7, r3
 800a614:	d00a      	beq.n	800a62c <_scanf_float+0x394>
 800a616:	1bda      	subs	r2, r3, r7
 800a618:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a61c:	429e      	cmp	r6, r3
 800a61e:	bf28      	it	cs
 800a620:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a624:	4630      	mov	r0, r6
 800a626:	491f      	ldr	r1, [pc, #124]	@ (800a6a4 <_scanf_float+0x40c>)
 800a628:	f000 f902 	bl	800a830 <siprintf>
 800a62c:	2200      	movs	r2, #0
 800a62e:	4640      	mov	r0, r8
 800a630:	9901      	ldr	r1, [sp, #4]
 800a632:	f002 fc19 	bl	800ce68 <_strtod_r>
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	6825      	ldr	r5, [r4, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f015 0f02 	tst.w	r5, #2
 800a640:	4606      	mov	r6, r0
 800a642:	460f      	mov	r7, r1
 800a644:	f103 0204 	add.w	r2, r3, #4
 800a648:	d015      	beq.n	800a676 <_scanf_float+0x3de>
 800a64a:	9903      	ldr	r1, [sp, #12]
 800a64c:	600a      	str	r2, [r1, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	e9c3 6700 	strd	r6, r7, [r3]
 800a654:	68e3      	ldr	r3, [r4, #12]
 800a656:	3301      	adds	r3, #1
 800a658:	60e3      	str	r3, [r4, #12]
 800a65a:	e7d0      	b.n	800a5fe <_scanf_float+0x366>
 800a65c:	9b04      	ldr	r3, [sp, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0e4      	beq.n	800a62c <_scanf_float+0x394>
 800a662:	9905      	ldr	r1, [sp, #20]
 800a664:	230a      	movs	r3, #10
 800a666:	4640      	mov	r0, r8
 800a668:	3101      	adds	r1, #1
 800a66a:	f002 fc7d 	bl	800cf68 <_strtol_r>
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	9e05      	ldr	r6, [sp, #20]
 800a672:	1ac2      	subs	r2, r0, r3
 800a674:	e7d0      	b.n	800a618 <_scanf_float+0x380>
 800a676:	076d      	lsls	r5, r5, #29
 800a678:	d4e7      	bmi.n	800a64a <_scanf_float+0x3b2>
 800a67a:	9d03      	ldr	r5, [sp, #12]
 800a67c:	602a      	str	r2, [r5, #0]
 800a67e:	681d      	ldr	r5, [r3, #0]
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	f7f6 f9c2 	bl	8000a0c <__aeabi_dcmpun>
 800a688:	b120      	cbz	r0, 800a694 <_scanf_float+0x3fc>
 800a68a:	4807      	ldr	r0, [pc, #28]	@ (800a6a8 <_scanf_float+0x410>)
 800a68c:	f000 f9f2 	bl	800aa74 <nanf>
 800a690:	6028      	str	r0, [r5, #0]
 800a692:	e7df      	b.n	800a654 <_scanf_float+0x3bc>
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f7f6 fa16 	bl	8000ac8 <__aeabi_d2f>
 800a69c:	e7f8      	b.n	800a690 <_scanf_float+0x3f8>
 800a69e:	2700      	movs	r7, #0
 800a6a0:	e633      	b.n	800a30a <_scanf_float+0x72>
 800a6a2:	bf00      	nop
 800a6a4:	0800e9bc 	.word	0x0800e9bc
 800a6a8:	0800eb18 	.word	0x0800eb18

0800a6ac <std>:
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	b510      	push	{r4, lr}
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a6b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ba:	6083      	str	r3, [r0, #8]
 800a6bc:	8181      	strh	r1, [r0, #12]
 800a6be:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6c0:	81c2      	strh	r2, [r0, #14]
 800a6c2:	6183      	str	r3, [r0, #24]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	2208      	movs	r2, #8
 800a6c8:	305c      	adds	r0, #92	@ 0x5c
 800a6ca:	f000 f944 	bl	800a956 <memset>
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a704 <std+0x58>)
 800a6d0:	6224      	str	r4, [r4, #32]
 800a6d2:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a708 <std+0x5c>)
 800a6d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <std+0x60>)
 800a6da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a710 <std+0x64>)
 800a6de:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <std+0x68>)
 800a6e2:	429c      	cmp	r4, r3
 800a6e4:	d006      	beq.n	800a6f4 <std+0x48>
 800a6e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6ea:	4294      	cmp	r4, r2
 800a6ec:	d002      	beq.n	800a6f4 <std+0x48>
 800a6ee:	33d0      	adds	r3, #208	@ 0xd0
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	d105      	bne.n	800a700 <std+0x54>
 800a6f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6fc:	f000 b9a8 	b.w	800aa50 <__retarget_lock_init_recursive>
 800a700:	bd10      	pop	{r4, pc}
 800a702:	bf00      	nop
 800a704:	0800a8cd 	.word	0x0800a8cd
 800a708:	0800a8f3 	.word	0x0800a8f3
 800a70c:	0800a92b 	.word	0x0800a92b
 800a710:	0800a94f 	.word	0x0800a94f
 800a714:	2000166c 	.word	0x2000166c

0800a718 <stdio_exit_handler>:
 800a718:	4a02      	ldr	r2, [pc, #8]	@ (800a724 <stdio_exit_handler+0xc>)
 800a71a:	4903      	ldr	r1, [pc, #12]	@ (800a728 <stdio_exit_handler+0x10>)
 800a71c:	4803      	ldr	r0, [pc, #12]	@ (800a72c <stdio_exit_handler+0x14>)
 800a71e:	f000 b869 	b.w	800a7f4 <_fwalk_sglue>
 800a722:	bf00      	nop
 800a724:	20000184 	.word	0x20000184
 800a728:	0800d951 	.word	0x0800d951
 800a72c:	20000194 	.word	0x20000194

0800a730 <cleanup_stdio>:
 800a730:	6841      	ldr	r1, [r0, #4]
 800a732:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <cleanup_stdio+0x34>)
 800a734:	b510      	push	{r4, lr}
 800a736:	4299      	cmp	r1, r3
 800a738:	4604      	mov	r4, r0
 800a73a:	d001      	beq.n	800a740 <cleanup_stdio+0x10>
 800a73c:	f003 f908 	bl	800d950 <_fflush_r>
 800a740:	68a1      	ldr	r1, [r4, #8]
 800a742:	4b09      	ldr	r3, [pc, #36]	@ (800a768 <cleanup_stdio+0x38>)
 800a744:	4299      	cmp	r1, r3
 800a746:	d002      	beq.n	800a74e <cleanup_stdio+0x1e>
 800a748:	4620      	mov	r0, r4
 800a74a:	f003 f901 	bl	800d950 <_fflush_r>
 800a74e:	68e1      	ldr	r1, [r4, #12]
 800a750:	4b06      	ldr	r3, [pc, #24]	@ (800a76c <cleanup_stdio+0x3c>)
 800a752:	4299      	cmp	r1, r3
 800a754:	d004      	beq.n	800a760 <cleanup_stdio+0x30>
 800a756:	4620      	mov	r0, r4
 800a758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a75c:	f003 b8f8 	b.w	800d950 <_fflush_r>
 800a760:	bd10      	pop	{r4, pc}
 800a762:	bf00      	nop
 800a764:	2000166c 	.word	0x2000166c
 800a768:	200016d4 	.word	0x200016d4
 800a76c:	2000173c 	.word	0x2000173c

0800a770 <global_stdio_init.part.0>:
 800a770:	b510      	push	{r4, lr}
 800a772:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a0 <global_stdio_init.part.0+0x30>)
 800a774:	4c0b      	ldr	r4, [pc, #44]	@ (800a7a4 <global_stdio_init.part.0+0x34>)
 800a776:	4a0c      	ldr	r2, [pc, #48]	@ (800a7a8 <global_stdio_init.part.0+0x38>)
 800a778:	4620      	mov	r0, r4
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	2104      	movs	r1, #4
 800a77e:	2200      	movs	r2, #0
 800a780:	f7ff ff94 	bl	800a6ac <std>
 800a784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a788:	2201      	movs	r2, #1
 800a78a:	2109      	movs	r1, #9
 800a78c:	f7ff ff8e 	bl	800a6ac <std>
 800a790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a794:	2202      	movs	r2, #2
 800a796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a79a:	2112      	movs	r1, #18
 800a79c:	f7ff bf86 	b.w	800a6ac <std>
 800a7a0:	200017a4 	.word	0x200017a4
 800a7a4:	2000166c 	.word	0x2000166c
 800a7a8:	0800a719 	.word	0x0800a719

0800a7ac <__sfp_lock_acquire>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	@ (800a7b4 <__sfp_lock_acquire+0x8>)
 800a7ae:	f000 b950 	b.w	800aa52 <__retarget_lock_acquire_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	200017ad 	.word	0x200017ad

0800a7b8 <__sfp_lock_release>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	@ (800a7c0 <__sfp_lock_release+0x8>)
 800a7ba:	f000 b94b 	b.w	800aa54 <__retarget_lock_release_recursive>
 800a7be:	bf00      	nop
 800a7c0:	200017ad 	.word	0x200017ad

0800a7c4 <__sinit>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	f7ff fff0 	bl	800a7ac <__sfp_lock_acquire>
 800a7cc:	6a23      	ldr	r3, [r4, #32]
 800a7ce:	b11b      	cbz	r3, 800a7d8 <__sinit+0x14>
 800a7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7d4:	f7ff bff0 	b.w	800a7b8 <__sfp_lock_release>
 800a7d8:	4b04      	ldr	r3, [pc, #16]	@ (800a7ec <__sinit+0x28>)
 800a7da:	6223      	str	r3, [r4, #32]
 800a7dc:	4b04      	ldr	r3, [pc, #16]	@ (800a7f0 <__sinit+0x2c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1f5      	bne.n	800a7d0 <__sinit+0xc>
 800a7e4:	f7ff ffc4 	bl	800a770 <global_stdio_init.part.0>
 800a7e8:	e7f2      	b.n	800a7d0 <__sinit+0xc>
 800a7ea:	bf00      	nop
 800a7ec:	0800a731 	.word	0x0800a731
 800a7f0:	200017a4 	.word	0x200017a4

0800a7f4 <_fwalk_sglue>:
 800a7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	4688      	mov	r8, r1
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	2600      	movs	r6, #0
 800a800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a804:	f1b9 0901 	subs.w	r9, r9, #1
 800a808:	d505      	bpl.n	800a816 <_fwalk_sglue+0x22>
 800a80a:	6824      	ldr	r4, [r4, #0]
 800a80c:	2c00      	cmp	r4, #0
 800a80e:	d1f7      	bne.n	800a800 <_fwalk_sglue+0xc>
 800a810:	4630      	mov	r0, r6
 800a812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d907      	bls.n	800a82c <_fwalk_sglue+0x38>
 800a81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a820:	3301      	adds	r3, #1
 800a822:	d003      	beq.n	800a82c <_fwalk_sglue+0x38>
 800a824:	4629      	mov	r1, r5
 800a826:	4638      	mov	r0, r7
 800a828:	47c0      	blx	r8
 800a82a:	4306      	orrs	r6, r0
 800a82c:	3568      	adds	r5, #104	@ 0x68
 800a82e:	e7e9      	b.n	800a804 <_fwalk_sglue+0x10>

0800a830 <siprintf>:
 800a830:	b40e      	push	{r1, r2, r3}
 800a832:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a836:	b510      	push	{r4, lr}
 800a838:	2400      	movs	r4, #0
 800a83a:	b09d      	sub	sp, #116	@ 0x74
 800a83c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a83e:	9002      	str	r0, [sp, #8]
 800a840:	9006      	str	r0, [sp, #24]
 800a842:	9107      	str	r1, [sp, #28]
 800a844:	9104      	str	r1, [sp, #16]
 800a846:	4809      	ldr	r0, [pc, #36]	@ (800a86c <siprintf+0x3c>)
 800a848:	4909      	ldr	r1, [pc, #36]	@ (800a870 <siprintf+0x40>)
 800a84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84e:	9105      	str	r1, [sp, #20]
 800a850:	6800      	ldr	r0, [r0, #0]
 800a852:	a902      	add	r1, sp, #8
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a858:	f002 fbe4 	bl	800d024 <_svfiprintf_r>
 800a85c:	9b02      	ldr	r3, [sp, #8]
 800a85e:	701c      	strb	r4, [r3, #0]
 800a860:	b01d      	add	sp, #116	@ 0x74
 800a862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a866:	b003      	add	sp, #12
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	20000190 	.word	0x20000190
 800a870:	ffff0208 	.word	0xffff0208

0800a874 <siscanf>:
 800a874:	b40e      	push	{r1, r2, r3}
 800a876:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a87a:	b570      	push	{r4, r5, r6, lr}
 800a87c:	2500      	movs	r5, #0
 800a87e:	b09d      	sub	sp, #116	@ 0x74
 800a880:	ac21      	add	r4, sp, #132	@ 0x84
 800a882:	f854 6b04 	ldr.w	r6, [r4], #4
 800a886:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a88a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a88c:	9002      	str	r0, [sp, #8]
 800a88e:	9006      	str	r0, [sp, #24]
 800a890:	f7f5 fc5e 	bl	8000150 <strlen>
 800a894:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c4 <siscanf+0x50>)
 800a896:	9003      	str	r0, [sp, #12]
 800a898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a89a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a89e:	9007      	str	r0, [sp, #28]
 800a8a0:	4809      	ldr	r0, [pc, #36]	@ (800a8c8 <siscanf+0x54>)
 800a8a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8a6:	4632      	mov	r2, r6
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	a902      	add	r1, sp, #8
 800a8ac:	6800      	ldr	r0, [r0, #0]
 800a8ae:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a8b0:	9514      	str	r5, [sp, #80]	@ 0x50
 800a8b2:	9401      	str	r4, [sp, #4]
 800a8b4:	f002 fd0c 	bl	800d2d0 <__ssvfiscanf_r>
 800a8b8:	b01d      	add	sp, #116	@ 0x74
 800a8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8be:	b003      	add	sp, #12
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	0800a8ef 	.word	0x0800a8ef
 800a8c8:	20000190 	.word	0x20000190

0800a8cc <__sread>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d4:	f000 f86e 	bl	800a9b4 <_read_r>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	bfab      	itete	ge
 800a8dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8de:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e0:	181b      	addge	r3, r3, r0
 800a8e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8e6:	bfac      	ite	ge
 800a8e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8ea:	81a3      	strhlt	r3, [r4, #12]
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <__seofread>:
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	4770      	bx	lr

0800a8f2 <__swrite>:
 800a8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f6:	461f      	mov	r7, r3
 800a8f8:	898b      	ldrh	r3, [r1, #12]
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	05db      	lsls	r3, r3, #23
 800a8fe:	460c      	mov	r4, r1
 800a900:	4616      	mov	r6, r2
 800a902:	d505      	bpl.n	800a910 <__swrite+0x1e>
 800a904:	2302      	movs	r3, #2
 800a906:	2200      	movs	r2, #0
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	f000 f840 	bl	800a990 <_lseek_r>
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	4632      	mov	r2, r6
 800a914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	4628      	mov	r0, r5
 800a91c:	463b      	mov	r3, r7
 800a91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a926:	f000 b857 	b.w	800a9d8 <_write_r>

0800a92a <__sseek>:
 800a92a:	b510      	push	{r4, lr}
 800a92c:	460c      	mov	r4, r1
 800a92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a932:	f000 f82d 	bl	800a990 <_lseek_r>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	bf15      	itete	ne
 800a93c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a93e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a946:	81a3      	strheq	r3, [r4, #12]
 800a948:	bf18      	it	ne
 800a94a:	81a3      	strhne	r3, [r4, #12]
 800a94c:	bd10      	pop	{r4, pc}

0800a94e <__sclose>:
 800a94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a952:	f000 b80d 	b.w	800a970 <_close_r>

0800a956 <memset>:
 800a956:	4603      	mov	r3, r0
 800a958:	4402      	add	r2, r0
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d100      	bne.n	800a960 <memset+0xa>
 800a95e:	4770      	bx	lr
 800a960:	f803 1b01 	strb.w	r1, [r3], #1
 800a964:	e7f9      	b.n	800a95a <memset+0x4>
	...

0800a968 <_localeconv_r>:
 800a968:	4800      	ldr	r0, [pc, #0]	@ (800a96c <_localeconv_r+0x4>)
 800a96a:	4770      	bx	lr
 800a96c:	200002d0 	.word	0x200002d0

0800a970 <_close_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	2300      	movs	r3, #0
 800a974:	4d05      	ldr	r5, [pc, #20]	@ (800a98c <_close_r+0x1c>)
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	602b      	str	r3, [r5, #0]
 800a97c:	f7f7 f903 	bl	8001b86 <_close>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_close_r+0x1a>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_close_r+0x1a>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	200017a8 	.word	0x200017a8

0800a990 <_lseek_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4604      	mov	r4, r0
 800a994:	4608      	mov	r0, r1
 800a996:	4611      	mov	r1, r2
 800a998:	2200      	movs	r2, #0
 800a99a:	4d05      	ldr	r5, [pc, #20]	@ (800a9b0 <_lseek_r+0x20>)
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f7f7 f915 	bl	8001bce <_lseek>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_lseek_r+0x1e>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_lseek_r+0x1e>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	200017a8 	.word	0x200017a8

0800a9b4 <_read_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4d05      	ldr	r5, [pc, #20]	@ (800a9d4 <_read_r+0x20>)
 800a9c0:	602a      	str	r2, [r5, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f7f7 f8a6 	bl	8001b14 <_read>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_read_r+0x1e>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_read_r+0x1e>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	200017a8 	.word	0x200017a8

0800a9d8 <_write_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4d05      	ldr	r5, [pc, #20]	@ (800a9f8 <_write_r+0x20>)
 800a9e4:	602a      	str	r2, [r5, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f7f7 f8b1 	bl	8001b4e <_write>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d102      	bne.n	800a9f6 <_write_r+0x1e>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	b103      	cbz	r3, 800a9f6 <_write_r+0x1e>
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	200017a8 	.word	0x200017a8

0800a9fc <__errno>:
 800a9fc:	4b01      	ldr	r3, [pc, #4]	@ (800aa04 <__errno+0x8>)
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	20000190 	.word	0x20000190

0800aa08 <__libc_init_array>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	2600      	movs	r6, #0
 800aa0c:	4d0c      	ldr	r5, [pc, #48]	@ (800aa40 <__libc_init_array+0x38>)
 800aa0e:	4c0d      	ldr	r4, [pc, #52]	@ (800aa44 <__libc_init_array+0x3c>)
 800aa10:	1b64      	subs	r4, r4, r5
 800aa12:	10a4      	asrs	r4, r4, #2
 800aa14:	42a6      	cmp	r6, r4
 800aa16:	d109      	bne.n	800aa2c <__libc_init_array+0x24>
 800aa18:	f003 ff6a 	bl	800e8f0 <_init>
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	4d0a      	ldr	r5, [pc, #40]	@ (800aa48 <__libc_init_array+0x40>)
 800aa20:	4c0a      	ldr	r4, [pc, #40]	@ (800aa4c <__libc_init_array+0x44>)
 800aa22:	1b64      	subs	r4, r4, r5
 800aa24:	10a4      	asrs	r4, r4, #2
 800aa26:	42a6      	cmp	r6, r4
 800aa28:	d105      	bne.n	800aa36 <__libc_init_array+0x2e>
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa30:	4798      	blx	r3
 800aa32:	3601      	adds	r6, #1
 800aa34:	e7ee      	b.n	800aa14 <__libc_init_array+0xc>
 800aa36:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa3a:	4798      	blx	r3
 800aa3c:	3601      	adds	r6, #1
 800aa3e:	e7f2      	b.n	800aa26 <__libc_init_array+0x1e>
 800aa40:	0800edd4 	.word	0x0800edd4
 800aa44:	0800edd4 	.word	0x0800edd4
 800aa48:	0800edd4 	.word	0x0800edd4
 800aa4c:	0800edd8 	.word	0x0800edd8

0800aa50 <__retarget_lock_init_recursive>:
 800aa50:	4770      	bx	lr

0800aa52 <__retarget_lock_acquire_recursive>:
 800aa52:	4770      	bx	lr

0800aa54 <__retarget_lock_release_recursive>:
 800aa54:	4770      	bx	lr

0800aa56 <memchr>:
 800aa56:	4603      	mov	r3, r0
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	b2c9      	uxtb	r1, r1
 800aa5c:	4402      	add	r2, r0
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	d101      	bne.n	800aa68 <memchr+0x12>
 800aa64:	2000      	movs	r0, #0
 800aa66:	e003      	b.n	800aa70 <memchr+0x1a>
 800aa68:	7804      	ldrb	r4, [r0, #0]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	428c      	cmp	r4, r1
 800aa6e:	d1f6      	bne.n	800aa5e <memchr+0x8>
 800aa70:	bd10      	pop	{r4, pc}
	...

0800aa74 <nanf>:
 800aa74:	4800      	ldr	r0, [pc, #0]	@ (800aa78 <nanf+0x4>)
 800aa76:	4770      	bx	lr
 800aa78:	7fc00000 	.word	0x7fc00000

0800aa7c <quorem>:
 800aa7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	6903      	ldr	r3, [r0, #16]
 800aa82:	690c      	ldr	r4, [r1, #16]
 800aa84:	4607      	mov	r7, r0
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	db7e      	blt.n	800ab88 <quorem+0x10c>
 800aa8a:	3c01      	subs	r4, #1
 800aa8c:	00a3      	lsls	r3, r4, #2
 800aa8e:	f100 0514 	add.w	r5, r0, #20
 800aa92:	f101 0814 	add.w	r8, r1, #20
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aaa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	fbb2 f6f3 	udiv	r6, r2, r3
 800aaae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aab2:	d32e      	bcc.n	800ab12 <quorem+0x96>
 800aab4:	f04f 0a00 	mov.w	sl, #0
 800aab8:	46c4      	mov	ip, r8
 800aaba:	46ae      	mov	lr, r5
 800aabc:	46d3      	mov	fp, sl
 800aabe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aac2:	b298      	uxth	r0, r3
 800aac4:	fb06 a000 	mla	r0, r6, r0, sl
 800aac8:	0c1b      	lsrs	r3, r3, #16
 800aaca:	0c02      	lsrs	r2, r0, #16
 800aacc:	fb06 2303 	mla	r3, r6, r3, r2
 800aad0:	f8de 2000 	ldr.w	r2, [lr]
 800aad4:	b280      	uxth	r0, r0
 800aad6:	b292      	uxth	r2, r2
 800aad8:	1a12      	subs	r2, r2, r0
 800aada:	445a      	add	r2, fp
 800aadc:	f8de 0000 	ldr.w	r0, [lr]
 800aae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aaea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aaf4:	45e1      	cmp	r9, ip
 800aaf6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aafa:	f84e 2b04 	str.w	r2, [lr], #4
 800aafe:	d2de      	bcs.n	800aabe <quorem+0x42>
 800ab00:	9b00      	ldr	r3, [sp, #0]
 800ab02:	58eb      	ldr	r3, [r5, r3]
 800ab04:	b92b      	cbnz	r3, 800ab12 <quorem+0x96>
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	3b04      	subs	r3, #4
 800ab0a:	429d      	cmp	r5, r3
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	d32f      	bcc.n	800ab70 <quorem+0xf4>
 800ab10:	613c      	str	r4, [r7, #16]
 800ab12:	4638      	mov	r0, r7
 800ab14:	f001 f9ca 	bl	800beac <__mcmp>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	db25      	blt.n	800ab68 <quorem+0xec>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	2000      	movs	r0, #0
 800ab20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab24:	f8d1 c000 	ldr.w	ip, [r1]
 800ab28:	fa1f fe82 	uxth.w	lr, r2
 800ab2c:	fa1f f38c 	uxth.w	r3, ip
 800ab30:	eba3 030e 	sub.w	r3, r3, lr
 800ab34:	4403      	add	r3, r0
 800ab36:	0c12      	lsrs	r2, r2, #16
 800ab38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab46:	45c1      	cmp	r9, r8
 800ab48:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab4c:	f841 3b04 	str.w	r3, [r1], #4
 800ab50:	d2e6      	bcs.n	800ab20 <quorem+0xa4>
 800ab52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab5a:	b922      	cbnz	r2, 800ab66 <quorem+0xea>
 800ab5c:	3b04      	subs	r3, #4
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	d30b      	bcc.n	800ab7c <quorem+0x100>
 800ab64:	613c      	str	r4, [r7, #16]
 800ab66:	3601      	adds	r6, #1
 800ab68:	4630      	mov	r0, r6
 800ab6a:	b003      	add	sp, #12
 800ab6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab70:	6812      	ldr	r2, [r2, #0]
 800ab72:	3b04      	subs	r3, #4
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	d1cb      	bne.n	800ab10 <quorem+0x94>
 800ab78:	3c01      	subs	r4, #1
 800ab7a:	e7c6      	b.n	800ab0a <quorem+0x8e>
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	3b04      	subs	r3, #4
 800ab80:	2a00      	cmp	r2, #0
 800ab82:	d1ef      	bne.n	800ab64 <quorem+0xe8>
 800ab84:	3c01      	subs	r4, #1
 800ab86:	e7ea      	b.n	800ab5e <quorem+0xe2>
 800ab88:	2000      	movs	r0, #0
 800ab8a:	e7ee      	b.n	800ab6a <quorem+0xee>
 800ab8c:	0000      	movs	r0, r0
	...

0800ab90 <_dtoa_r>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	4614      	mov	r4, r2
 800ab96:	461d      	mov	r5, r3
 800ab98:	69c7      	ldr	r7, [r0, #28]
 800ab9a:	b097      	sub	sp, #92	@ 0x5c
 800ab9c:	4681      	mov	r9, r0
 800ab9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aba2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800aba4:	b97f      	cbnz	r7, 800abc6 <_dtoa_r+0x36>
 800aba6:	2010      	movs	r0, #16
 800aba8:	f000 fe0e 	bl	800b7c8 <malloc>
 800abac:	4602      	mov	r2, r0
 800abae:	f8c9 001c 	str.w	r0, [r9, #28]
 800abb2:	b920      	cbnz	r0, 800abbe <_dtoa_r+0x2e>
 800abb4:	21ef      	movs	r1, #239	@ 0xef
 800abb6:	4bac      	ldr	r3, [pc, #688]	@ (800ae68 <_dtoa_r+0x2d8>)
 800abb8:	48ac      	ldr	r0, [pc, #688]	@ (800ae6c <_dtoa_r+0x2dc>)
 800abba:	f002 ffb3 	bl	800db24 <__assert_func>
 800abbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800abc2:	6007      	str	r7, [r0, #0]
 800abc4:	60c7      	str	r7, [r0, #12]
 800abc6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abca:	6819      	ldr	r1, [r3, #0]
 800abcc:	b159      	cbz	r1, 800abe6 <_dtoa_r+0x56>
 800abce:	685a      	ldr	r2, [r3, #4]
 800abd0:	2301      	movs	r3, #1
 800abd2:	4093      	lsls	r3, r2
 800abd4:	604a      	str	r2, [r1, #4]
 800abd6:	608b      	str	r3, [r1, #8]
 800abd8:	4648      	mov	r0, r9
 800abda:	f000 feeb 	bl	800b9b4 <_Bfree>
 800abde:	2200      	movs	r2, #0
 800abe0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	1e2b      	subs	r3, r5, #0
 800abe8:	bfaf      	iteee	ge
 800abea:	2300      	movge	r3, #0
 800abec:	2201      	movlt	r2, #1
 800abee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800abf2:	9307      	strlt	r3, [sp, #28]
 800abf4:	bfa8      	it	ge
 800abf6:	6033      	strge	r3, [r6, #0]
 800abf8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800abfc:	4b9c      	ldr	r3, [pc, #624]	@ (800ae70 <_dtoa_r+0x2e0>)
 800abfe:	bfb8      	it	lt
 800ac00:	6032      	strlt	r2, [r6, #0]
 800ac02:	ea33 0308 	bics.w	r3, r3, r8
 800ac06:	d112      	bne.n	800ac2e <_dtoa_r+0x9e>
 800ac08:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ac0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ac0e:	6013      	str	r3, [r2, #0]
 800ac10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ac14:	4323      	orrs	r3, r4
 800ac16:	f000 855e 	beq.w	800b6d6 <_dtoa_r+0xb46>
 800ac1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ac1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ae74 <_dtoa_r+0x2e4>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 8560 	beq.w	800b6e6 <_dtoa_r+0xb56>
 800ac26:	f10a 0303 	add.w	r3, sl, #3
 800ac2a:	f000 bd5a 	b.w	800b6e2 <_dtoa_r+0xb52>
 800ac2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f7f5 feb3 	bl	80009a8 <__aeabi_dcmpeq>
 800ac42:	4607      	mov	r7, r0
 800ac44:	b158      	cbz	r0, 800ac5e <_dtoa_r+0xce>
 800ac46:	2301      	movs	r3, #1
 800ac48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ac4e:	b113      	cbz	r3, 800ac56 <_dtoa_r+0xc6>
 800ac50:	4b89      	ldr	r3, [pc, #548]	@ (800ae78 <_dtoa_r+0x2e8>)
 800ac52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800ae7c <_dtoa_r+0x2ec>
 800ac5a:	f000 bd44 	b.w	800b6e6 <_dtoa_r+0xb56>
 800ac5e:	ab14      	add	r3, sp, #80	@ 0x50
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	ab15      	add	r3, sp, #84	@ 0x54
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	4648      	mov	r0, r9
 800ac68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac6c:	f001 fa36 	bl	800c0dc <__d2b>
 800ac70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ac74:	9003      	str	r0, [sp, #12]
 800ac76:	2e00      	cmp	r6, #0
 800ac78:	d078      	beq.n	800ad6c <_dtoa_r+0x1dc>
 800ac7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ac90:	9712      	str	r7, [sp, #72]	@ 0x48
 800ac92:	4619      	mov	r1, r3
 800ac94:	2200      	movs	r2, #0
 800ac96:	4b7a      	ldr	r3, [pc, #488]	@ (800ae80 <_dtoa_r+0x2f0>)
 800ac98:	f7f5 fa66 	bl	8000168 <__aeabi_dsub>
 800ac9c:	a36c      	add	r3, pc, #432	@ (adr r3, 800ae50 <_dtoa_r+0x2c0>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 fc19 	bl	80004d8 <__aeabi_dmul>
 800aca6:	a36c      	add	r3, pc, #432	@ (adr r3, 800ae58 <_dtoa_r+0x2c8>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 fa5e 	bl	800016c <__adddf3>
 800acb0:	4604      	mov	r4, r0
 800acb2:	4630      	mov	r0, r6
 800acb4:	460d      	mov	r5, r1
 800acb6:	f7f5 fba5 	bl	8000404 <__aeabi_i2d>
 800acba:	a369      	add	r3, pc, #420	@ (adr r3, 800ae60 <_dtoa_r+0x2d0>)
 800acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc0:	f7f5 fc0a 	bl	80004d8 <__aeabi_dmul>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4620      	mov	r0, r4
 800acca:	4629      	mov	r1, r5
 800accc:	f7f5 fa4e 	bl	800016c <__adddf3>
 800acd0:	4604      	mov	r4, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	f7f5 feb0 	bl	8000a38 <__aeabi_d2iz>
 800acd8:	2200      	movs	r2, #0
 800acda:	4607      	mov	r7, r0
 800acdc:	2300      	movs	r3, #0
 800acde:	4620      	mov	r0, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7f5 fe6b 	bl	80009bc <__aeabi_dcmplt>
 800ace6:	b140      	cbz	r0, 800acfa <_dtoa_r+0x16a>
 800ace8:	4638      	mov	r0, r7
 800acea:	f7f5 fb8b 	bl	8000404 <__aeabi_i2d>
 800acee:	4622      	mov	r2, r4
 800acf0:	462b      	mov	r3, r5
 800acf2:	f7f5 fe59 	bl	80009a8 <__aeabi_dcmpeq>
 800acf6:	b900      	cbnz	r0, 800acfa <_dtoa_r+0x16a>
 800acf8:	3f01      	subs	r7, #1
 800acfa:	2f16      	cmp	r7, #22
 800acfc:	d854      	bhi.n	800ada8 <_dtoa_r+0x218>
 800acfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad02:	4b60      	ldr	r3, [pc, #384]	@ (800ae84 <_dtoa_r+0x2f4>)
 800ad04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fe56 	bl	80009bc <__aeabi_dcmplt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d04b      	beq.n	800adac <_dtoa_r+0x21c>
 800ad14:	2300      	movs	r3, #0
 800ad16:	3f01      	subs	r7, #1
 800ad18:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad1c:	1b9b      	subs	r3, r3, r6
 800ad1e:	1e5a      	subs	r2, r3, #1
 800ad20:	bf49      	itett	mi
 800ad22:	f1c3 0301 	rsbmi	r3, r3, #1
 800ad26:	2300      	movpl	r3, #0
 800ad28:	9304      	strmi	r3, [sp, #16]
 800ad2a:	2300      	movmi	r3, #0
 800ad2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad2e:	bf54      	ite	pl
 800ad30:	9304      	strpl	r3, [sp, #16]
 800ad32:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ad34:	2f00      	cmp	r7, #0
 800ad36:	db3b      	blt.n	800adb0 <_dtoa_r+0x220>
 800ad38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad3a:	970e      	str	r7, [sp, #56]	@ 0x38
 800ad3c:	443b      	add	r3, r7
 800ad3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad40:	2300      	movs	r3, #0
 800ad42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ad46:	2b09      	cmp	r3, #9
 800ad48:	d865      	bhi.n	800ae16 <_dtoa_r+0x286>
 800ad4a:	2b05      	cmp	r3, #5
 800ad4c:	bfc4      	itt	gt
 800ad4e:	3b04      	subgt	r3, #4
 800ad50:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ad52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ad54:	bfc8      	it	gt
 800ad56:	2400      	movgt	r4, #0
 800ad58:	f1a3 0302 	sub.w	r3, r3, #2
 800ad5c:	bfd8      	it	le
 800ad5e:	2401      	movle	r4, #1
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d864      	bhi.n	800ae2e <_dtoa_r+0x29e>
 800ad64:	e8df f003 	tbb	[pc, r3]
 800ad68:	2c385553 	.word	0x2c385553
 800ad6c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ad70:	441e      	add	r6, r3
 800ad72:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	bfc1      	itttt	gt
 800ad7a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ad7e:	fa08 f803 	lslgt.w	r8, r8, r3
 800ad82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ad86:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ad8a:	bfd6      	itet	le
 800ad8c:	f1c3 0320 	rsble	r3, r3, #32
 800ad90:	ea48 0003 	orrgt.w	r0, r8, r3
 800ad94:	fa04 f003 	lslle.w	r0, r4, r3
 800ad98:	f7f5 fb24 	bl	80003e4 <__aeabi_ui2d>
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ada2:	3e01      	subs	r6, #1
 800ada4:	9212      	str	r2, [sp, #72]	@ 0x48
 800ada6:	e774      	b.n	800ac92 <_dtoa_r+0x102>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e7b5      	b.n	800ad18 <_dtoa_r+0x188>
 800adac:	900f      	str	r0, [sp, #60]	@ 0x3c
 800adae:	e7b4      	b.n	800ad1a <_dtoa_r+0x18a>
 800adb0:	9b04      	ldr	r3, [sp, #16]
 800adb2:	1bdb      	subs	r3, r3, r7
 800adb4:	9304      	str	r3, [sp, #16]
 800adb6:	427b      	negs	r3, r7
 800adb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800adba:	2300      	movs	r3, #0
 800adbc:	930e      	str	r3, [sp, #56]	@ 0x38
 800adbe:	e7c1      	b.n	800ad44 <_dtoa_r+0x1b4>
 800adc0:	2301      	movs	r3, #1
 800adc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adc6:	eb07 0b03 	add.w	fp, r7, r3
 800adca:	f10b 0301 	add.w	r3, fp, #1
 800adce:	2b01      	cmp	r3, #1
 800add0:	9308      	str	r3, [sp, #32]
 800add2:	bfb8      	it	lt
 800add4:	2301      	movlt	r3, #1
 800add6:	e006      	b.n	800ade6 <_dtoa_r+0x256>
 800add8:	2301      	movs	r3, #1
 800adda:	930b      	str	r3, [sp, #44]	@ 0x2c
 800addc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adde:	2b00      	cmp	r3, #0
 800ade0:	dd28      	ble.n	800ae34 <_dtoa_r+0x2a4>
 800ade2:	469b      	mov	fp, r3
 800ade4:	9308      	str	r3, [sp, #32]
 800ade6:	2100      	movs	r1, #0
 800ade8:	2204      	movs	r2, #4
 800adea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800adee:	f102 0514 	add.w	r5, r2, #20
 800adf2:	429d      	cmp	r5, r3
 800adf4:	d926      	bls.n	800ae44 <_dtoa_r+0x2b4>
 800adf6:	6041      	str	r1, [r0, #4]
 800adf8:	4648      	mov	r0, r9
 800adfa:	f000 fd9b 	bl	800b934 <_Balloc>
 800adfe:	4682      	mov	sl, r0
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d143      	bne.n	800ae8c <_dtoa_r+0x2fc>
 800ae04:	4602      	mov	r2, r0
 800ae06:	f240 11af 	movw	r1, #431	@ 0x1af
 800ae0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ae88 <_dtoa_r+0x2f8>)
 800ae0c:	e6d4      	b.n	800abb8 <_dtoa_r+0x28>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e7e3      	b.n	800adda <_dtoa_r+0x24a>
 800ae12:	2300      	movs	r3, #0
 800ae14:	e7d5      	b.n	800adc2 <_dtoa_r+0x232>
 800ae16:	2401      	movs	r4, #1
 800ae18:	2300      	movs	r3, #0
 800ae1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae1c:	9320      	str	r3, [sp, #128]	@ 0x80
 800ae1e:	f04f 3bff 	mov.w	fp, #4294967295
 800ae22:	2200      	movs	r2, #0
 800ae24:	2312      	movs	r3, #18
 800ae26:	f8cd b020 	str.w	fp, [sp, #32]
 800ae2a:	9221      	str	r2, [sp, #132]	@ 0x84
 800ae2c:	e7db      	b.n	800ade6 <_dtoa_r+0x256>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae32:	e7f4      	b.n	800ae1e <_dtoa_r+0x28e>
 800ae34:	f04f 0b01 	mov.w	fp, #1
 800ae38:	465b      	mov	r3, fp
 800ae3a:	f8cd b020 	str.w	fp, [sp, #32]
 800ae3e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800ae42:	e7d0      	b.n	800ade6 <_dtoa_r+0x256>
 800ae44:	3101      	adds	r1, #1
 800ae46:	0052      	lsls	r2, r2, #1
 800ae48:	e7d1      	b.n	800adee <_dtoa_r+0x25e>
 800ae4a:	bf00      	nop
 800ae4c:	f3af 8000 	nop.w
 800ae50:	636f4361 	.word	0x636f4361
 800ae54:	3fd287a7 	.word	0x3fd287a7
 800ae58:	8b60c8b3 	.word	0x8b60c8b3
 800ae5c:	3fc68a28 	.word	0x3fc68a28
 800ae60:	509f79fb 	.word	0x509f79fb
 800ae64:	3fd34413 	.word	0x3fd34413
 800ae68:	0800e9ce 	.word	0x0800e9ce
 800ae6c:	0800e9e5 	.word	0x0800e9e5
 800ae70:	7ff00000 	.word	0x7ff00000
 800ae74:	0800e9ca 	.word	0x0800e9ca
 800ae78:	0800ead1 	.word	0x0800ead1
 800ae7c:	0800ead0 	.word	0x0800ead0
 800ae80:	3ff80000 	.word	0x3ff80000
 800ae84:	0800ebb0 	.word	0x0800ebb0
 800ae88:	0800ea3d 	.word	0x0800ea3d
 800ae8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae90:	6018      	str	r0, [r3, #0]
 800ae92:	9b08      	ldr	r3, [sp, #32]
 800ae94:	2b0e      	cmp	r3, #14
 800ae96:	f200 80a1 	bhi.w	800afdc <_dtoa_r+0x44c>
 800ae9a:	2c00      	cmp	r4, #0
 800ae9c:	f000 809e 	beq.w	800afdc <_dtoa_r+0x44c>
 800aea0:	2f00      	cmp	r7, #0
 800aea2:	dd33      	ble.n	800af0c <_dtoa_r+0x37c>
 800aea4:	4b9c      	ldr	r3, [pc, #624]	@ (800b118 <_dtoa_r+0x588>)
 800aea6:	f007 020f 	and.w	r2, r7, #15
 800aeaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeae:	05f8      	lsls	r0, r7, #23
 800aeb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800aeb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aebc:	d516      	bpl.n	800aeec <_dtoa_r+0x35c>
 800aebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aec2:	4b96      	ldr	r3, [pc, #600]	@ (800b11c <_dtoa_r+0x58c>)
 800aec4:	2603      	movs	r6, #3
 800aec6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aeca:	f7f5 fc2f 	bl	800072c <__aeabi_ddiv>
 800aece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aed2:	f004 040f 	and.w	r4, r4, #15
 800aed6:	4d91      	ldr	r5, [pc, #580]	@ (800b11c <_dtoa_r+0x58c>)
 800aed8:	b954      	cbnz	r4, 800aef0 <_dtoa_r+0x360>
 800aeda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aee2:	f7f5 fc23 	bl	800072c <__aeabi_ddiv>
 800aee6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aeea:	e028      	b.n	800af3e <_dtoa_r+0x3ae>
 800aeec:	2602      	movs	r6, #2
 800aeee:	e7f2      	b.n	800aed6 <_dtoa_r+0x346>
 800aef0:	07e1      	lsls	r1, r4, #31
 800aef2:	d508      	bpl.n	800af06 <_dtoa_r+0x376>
 800aef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aefc:	f7f5 faec 	bl	80004d8 <__aeabi_dmul>
 800af00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af04:	3601      	adds	r6, #1
 800af06:	1064      	asrs	r4, r4, #1
 800af08:	3508      	adds	r5, #8
 800af0a:	e7e5      	b.n	800aed8 <_dtoa_r+0x348>
 800af0c:	f000 80af 	beq.w	800b06e <_dtoa_r+0x4de>
 800af10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af14:	427c      	negs	r4, r7
 800af16:	4b80      	ldr	r3, [pc, #512]	@ (800b118 <_dtoa_r+0x588>)
 800af18:	f004 020f 	and.w	r2, r4, #15
 800af1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 fad8 	bl	80004d8 <__aeabi_dmul>
 800af28:	2602      	movs	r6, #2
 800af2a:	2300      	movs	r3, #0
 800af2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af30:	4d7a      	ldr	r5, [pc, #488]	@ (800b11c <_dtoa_r+0x58c>)
 800af32:	1124      	asrs	r4, r4, #4
 800af34:	2c00      	cmp	r4, #0
 800af36:	f040 808f 	bne.w	800b058 <_dtoa_r+0x4c8>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1d3      	bne.n	800aee6 <_dtoa_r+0x356>
 800af3e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800af42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 8094 	beq.w	800b072 <_dtoa_r+0x4e2>
 800af4a:	2200      	movs	r2, #0
 800af4c:	4620      	mov	r0, r4
 800af4e:	4629      	mov	r1, r5
 800af50:	4b73      	ldr	r3, [pc, #460]	@ (800b120 <_dtoa_r+0x590>)
 800af52:	f7f5 fd33 	bl	80009bc <__aeabi_dcmplt>
 800af56:	2800      	cmp	r0, #0
 800af58:	f000 808b 	beq.w	800b072 <_dtoa_r+0x4e2>
 800af5c:	9b08      	ldr	r3, [sp, #32]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 8087 	beq.w	800b072 <_dtoa_r+0x4e2>
 800af64:	f1bb 0f00 	cmp.w	fp, #0
 800af68:	dd34      	ble.n	800afd4 <_dtoa_r+0x444>
 800af6a:	4620      	mov	r0, r4
 800af6c:	2200      	movs	r2, #0
 800af6e:	4629      	mov	r1, r5
 800af70:	4b6c      	ldr	r3, [pc, #432]	@ (800b124 <_dtoa_r+0x594>)
 800af72:	f7f5 fab1 	bl	80004d8 <__aeabi_dmul>
 800af76:	465c      	mov	r4, fp
 800af78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af7c:	f107 38ff 	add.w	r8, r7, #4294967295
 800af80:	3601      	adds	r6, #1
 800af82:	4630      	mov	r0, r6
 800af84:	f7f5 fa3e 	bl	8000404 <__aeabi_i2d>
 800af88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af8c:	f7f5 faa4 	bl	80004d8 <__aeabi_dmul>
 800af90:	2200      	movs	r2, #0
 800af92:	4b65      	ldr	r3, [pc, #404]	@ (800b128 <_dtoa_r+0x598>)
 800af94:	f7f5 f8ea 	bl	800016c <__adddf3>
 800af98:	4605      	mov	r5, r0
 800af9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af9e:	2c00      	cmp	r4, #0
 800afa0:	d16a      	bne.n	800b078 <_dtoa_r+0x4e8>
 800afa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afa6:	2200      	movs	r2, #0
 800afa8:	4b60      	ldr	r3, [pc, #384]	@ (800b12c <_dtoa_r+0x59c>)
 800afaa:	f7f5 f8dd 	bl	8000168 <__aeabi_dsub>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afb6:	462a      	mov	r2, r5
 800afb8:	4633      	mov	r3, r6
 800afba:	f7f5 fd1d 	bl	80009f8 <__aeabi_dcmpgt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f040 8298 	bne.w	800b4f4 <_dtoa_r+0x964>
 800afc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afc8:	462a      	mov	r2, r5
 800afca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800afce:	f7f5 fcf5 	bl	80009bc <__aeabi_dcmplt>
 800afd2:	bb38      	cbnz	r0, 800b024 <_dtoa_r+0x494>
 800afd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800afd8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800afdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f2c0 8157 	blt.w	800b292 <_dtoa_r+0x702>
 800afe4:	2f0e      	cmp	r7, #14
 800afe6:	f300 8154 	bgt.w	800b292 <_dtoa_r+0x702>
 800afea:	4b4b      	ldr	r3, [pc, #300]	@ (800b118 <_dtoa_r+0x588>)
 800afec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aff0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aff4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800affa:	2b00      	cmp	r3, #0
 800affc:	f280 80e5 	bge.w	800b1ca <_dtoa_r+0x63a>
 800b000:	9b08      	ldr	r3, [sp, #32]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f300 80e1 	bgt.w	800b1ca <_dtoa_r+0x63a>
 800b008:	d10c      	bne.n	800b024 <_dtoa_r+0x494>
 800b00a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b00e:	2200      	movs	r2, #0
 800b010:	4b46      	ldr	r3, [pc, #280]	@ (800b12c <_dtoa_r+0x59c>)
 800b012:	f7f5 fa61 	bl	80004d8 <__aeabi_dmul>
 800b016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b01a:	f7f5 fce3 	bl	80009e4 <__aeabi_dcmpge>
 800b01e:	2800      	cmp	r0, #0
 800b020:	f000 8266 	beq.w	800b4f0 <_dtoa_r+0x960>
 800b024:	2400      	movs	r4, #0
 800b026:	4625      	mov	r5, r4
 800b028:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b02a:	4656      	mov	r6, sl
 800b02c:	ea6f 0803 	mvn.w	r8, r3
 800b030:	2700      	movs	r7, #0
 800b032:	4621      	mov	r1, r4
 800b034:	4648      	mov	r0, r9
 800b036:	f000 fcbd 	bl	800b9b4 <_Bfree>
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	f000 80bd 	beq.w	800b1ba <_dtoa_r+0x62a>
 800b040:	b12f      	cbz	r7, 800b04e <_dtoa_r+0x4be>
 800b042:	42af      	cmp	r7, r5
 800b044:	d003      	beq.n	800b04e <_dtoa_r+0x4be>
 800b046:	4639      	mov	r1, r7
 800b048:	4648      	mov	r0, r9
 800b04a:	f000 fcb3 	bl	800b9b4 <_Bfree>
 800b04e:	4629      	mov	r1, r5
 800b050:	4648      	mov	r0, r9
 800b052:	f000 fcaf 	bl	800b9b4 <_Bfree>
 800b056:	e0b0      	b.n	800b1ba <_dtoa_r+0x62a>
 800b058:	07e2      	lsls	r2, r4, #31
 800b05a:	d505      	bpl.n	800b068 <_dtoa_r+0x4d8>
 800b05c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b060:	f7f5 fa3a 	bl	80004d8 <__aeabi_dmul>
 800b064:	2301      	movs	r3, #1
 800b066:	3601      	adds	r6, #1
 800b068:	1064      	asrs	r4, r4, #1
 800b06a:	3508      	adds	r5, #8
 800b06c:	e762      	b.n	800af34 <_dtoa_r+0x3a4>
 800b06e:	2602      	movs	r6, #2
 800b070:	e765      	b.n	800af3e <_dtoa_r+0x3ae>
 800b072:	46b8      	mov	r8, r7
 800b074:	9c08      	ldr	r4, [sp, #32]
 800b076:	e784      	b.n	800af82 <_dtoa_r+0x3f2>
 800b078:	4b27      	ldr	r3, [pc, #156]	@ (800b118 <_dtoa_r+0x588>)
 800b07a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b07c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b080:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b084:	4454      	add	r4, sl
 800b086:	2900      	cmp	r1, #0
 800b088:	d054      	beq.n	800b134 <_dtoa_r+0x5a4>
 800b08a:	2000      	movs	r0, #0
 800b08c:	4928      	ldr	r1, [pc, #160]	@ (800b130 <_dtoa_r+0x5a0>)
 800b08e:	f7f5 fb4d 	bl	800072c <__aeabi_ddiv>
 800b092:	4633      	mov	r3, r6
 800b094:	462a      	mov	r2, r5
 800b096:	f7f5 f867 	bl	8000168 <__aeabi_dsub>
 800b09a:	4656      	mov	r6, sl
 800b09c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b0a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0a4:	f7f5 fcc8 	bl	8000a38 <__aeabi_d2iz>
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	f7f5 f9ab 	bl	8000404 <__aeabi_i2d>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0b6:	f7f5 f857 	bl	8000168 <__aeabi_dsub>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	3530      	adds	r5, #48	@ 0x30
 800b0c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b0c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0c8:	f806 5b01 	strb.w	r5, [r6], #1
 800b0cc:	f7f5 fc76 	bl	80009bc <__aeabi_dcmplt>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d172      	bne.n	800b1ba <_dtoa_r+0x62a>
 800b0d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0d8:	2000      	movs	r0, #0
 800b0da:	4911      	ldr	r1, [pc, #68]	@ (800b120 <_dtoa_r+0x590>)
 800b0dc:	f7f5 f844 	bl	8000168 <__aeabi_dsub>
 800b0e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0e4:	f7f5 fc6a 	bl	80009bc <__aeabi_dcmplt>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f040 80b4 	bne.w	800b256 <_dtoa_r+0x6c6>
 800b0ee:	42a6      	cmp	r6, r4
 800b0f0:	f43f af70 	beq.w	800afd4 <_dtoa_r+0x444>
 800b0f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b124 <_dtoa_r+0x594>)
 800b0fc:	f7f5 f9ec 	bl	80004d8 <__aeabi_dmul>
 800b100:	2200      	movs	r2, #0
 800b102:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b10a:	4b06      	ldr	r3, [pc, #24]	@ (800b124 <_dtoa_r+0x594>)
 800b10c:	f7f5 f9e4 	bl	80004d8 <__aeabi_dmul>
 800b110:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b114:	e7c4      	b.n	800b0a0 <_dtoa_r+0x510>
 800b116:	bf00      	nop
 800b118:	0800ebb0 	.word	0x0800ebb0
 800b11c:	0800eb88 	.word	0x0800eb88
 800b120:	3ff00000 	.word	0x3ff00000
 800b124:	40240000 	.word	0x40240000
 800b128:	401c0000 	.word	0x401c0000
 800b12c:	40140000 	.word	0x40140000
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	4631      	mov	r1, r6
 800b136:	4628      	mov	r0, r5
 800b138:	f7f5 f9ce 	bl	80004d8 <__aeabi_dmul>
 800b13c:	4656      	mov	r6, sl
 800b13e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b142:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b148:	f7f5 fc76 	bl	8000a38 <__aeabi_d2iz>
 800b14c:	4605      	mov	r5, r0
 800b14e:	f7f5 f959 	bl	8000404 <__aeabi_i2d>
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b15a:	f7f5 f805 	bl	8000168 <__aeabi_dsub>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	3530      	adds	r5, #48	@ 0x30
 800b164:	f806 5b01 	strb.w	r5, [r6], #1
 800b168:	42a6      	cmp	r6, r4
 800b16a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	d124      	bne.n	800b1be <_dtoa_r+0x62e>
 800b174:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b178:	4bae      	ldr	r3, [pc, #696]	@ (800b434 <_dtoa_r+0x8a4>)
 800b17a:	f7f4 fff7 	bl	800016c <__adddf3>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b186:	f7f5 fc37 	bl	80009f8 <__aeabi_dcmpgt>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d163      	bne.n	800b256 <_dtoa_r+0x6c6>
 800b18e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b192:	2000      	movs	r0, #0
 800b194:	49a7      	ldr	r1, [pc, #668]	@ (800b434 <_dtoa_r+0x8a4>)
 800b196:	f7f4 ffe7 	bl	8000168 <__aeabi_dsub>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1a2:	f7f5 fc0b 	bl	80009bc <__aeabi_dcmplt>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f43f af14 	beq.w	800afd4 <_dtoa_r+0x444>
 800b1ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b1ae:	1e73      	subs	r3, r6, #1
 800b1b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b1b6:	2b30      	cmp	r3, #48	@ 0x30
 800b1b8:	d0f8      	beq.n	800b1ac <_dtoa_r+0x61c>
 800b1ba:	4647      	mov	r7, r8
 800b1bc:	e03b      	b.n	800b236 <_dtoa_r+0x6a6>
 800b1be:	4b9e      	ldr	r3, [pc, #632]	@ (800b438 <_dtoa_r+0x8a8>)
 800b1c0:	f7f5 f98a 	bl	80004d8 <__aeabi_dmul>
 800b1c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b1c8:	e7bc      	b.n	800b144 <_dtoa_r+0x5b4>
 800b1ca:	4656      	mov	r6, sl
 800b1cc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 faa8 	bl	800072c <__aeabi_ddiv>
 800b1dc:	f7f5 fc2c 	bl	8000a38 <__aeabi_d2iz>
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	f7f5 f90f 	bl	8000404 <__aeabi_i2d>
 800b1e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ea:	f7f5 f975 	bl	80004d8 <__aeabi_dmul>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f4 ffb7 	bl	8000168 <__aeabi_dsub>
 800b1fa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b1fe:	9d08      	ldr	r5, [sp, #32]
 800b200:	f806 4b01 	strb.w	r4, [r6], #1
 800b204:	eba6 040a 	sub.w	r4, r6, sl
 800b208:	42a5      	cmp	r5, r4
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	d133      	bne.n	800b278 <_dtoa_r+0x6e8>
 800b210:	f7f4 ffac 	bl	800016c <__adddf3>
 800b214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	f7f5 fbec 	bl	80009f8 <__aeabi_dcmpgt>
 800b220:	b9c0      	cbnz	r0, 800b254 <_dtoa_r+0x6c4>
 800b222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 fbbd 	bl	80009a8 <__aeabi_dcmpeq>
 800b22e:	b110      	cbz	r0, 800b236 <_dtoa_r+0x6a6>
 800b230:	f018 0f01 	tst.w	r8, #1
 800b234:	d10e      	bne.n	800b254 <_dtoa_r+0x6c4>
 800b236:	4648      	mov	r0, r9
 800b238:	9903      	ldr	r1, [sp, #12]
 800b23a:	f000 fbbb 	bl	800b9b4 <_Bfree>
 800b23e:	2300      	movs	r3, #0
 800b240:	7033      	strb	r3, [r6, #0]
 800b242:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b244:	3701      	adds	r7, #1
 800b246:	601f      	str	r7, [r3, #0]
 800b248:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 824b 	beq.w	800b6e6 <_dtoa_r+0xb56>
 800b250:	601e      	str	r6, [r3, #0]
 800b252:	e248      	b.n	800b6e6 <_dtoa_r+0xb56>
 800b254:	46b8      	mov	r8, r7
 800b256:	4633      	mov	r3, r6
 800b258:	461e      	mov	r6, r3
 800b25a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b25e:	2a39      	cmp	r2, #57	@ 0x39
 800b260:	d106      	bne.n	800b270 <_dtoa_r+0x6e0>
 800b262:	459a      	cmp	sl, r3
 800b264:	d1f8      	bne.n	800b258 <_dtoa_r+0x6c8>
 800b266:	2230      	movs	r2, #48	@ 0x30
 800b268:	f108 0801 	add.w	r8, r8, #1
 800b26c:	f88a 2000 	strb.w	r2, [sl]
 800b270:	781a      	ldrb	r2, [r3, #0]
 800b272:	3201      	adds	r2, #1
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	e7a0      	b.n	800b1ba <_dtoa_r+0x62a>
 800b278:	2200      	movs	r2, #0
 800b27a:	4b6f      	ldr	r3, [pc, #444]	@ (800b438 <_dtoa_r+0x8a8>)
 800b27c:	f7f5 f92c 	bl	80004d8 <__aeabi_dmul>
 800b280:	2200      	movs	r2, #0
 800b282:	2300      	movs	r3, #0
 800b284:	4604      	mov	r4, r0
 800b286:	460d      	mov	r5, r1
 800b288:	f7f5 fb8e 	bl	80009a8 <__aeabi_dcmpeq>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d09f      	beq.n	800b1d0 <_dtoa_r+0x640>
 800b290:	e7d1      	b.n	800b236 <_dtoa_r+0x6a6>
 800b292:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b294:	2a00      	cmp	r2, #0
 800b296:	f000 80ea 	beq.w	800b46e <_dtoa_r+0x8de>
 800b29a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b29c:	2a01      	cmp	r2, #1
 800b29e:	f300 80cd 	bgt.w	800b43c <_dtoa_r+0x8ac>
 800b2a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	f000 80c1 	beq.w	800b42c <_dtoa_r+0x89c>
 800b2aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b2ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2b0:	9e04      	ldr	r6, [sp, #16]
 800b2b2:	9a04      	ldr	r2, [sp, #16]
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	441a      	add	r2, r3
 800b2b8:	9204      	str	r2, [sp, #16]
 800b2ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2bc:	4648      	mov	r0, r9
 800b2be:	441a      	add	r2, r3
 800b2c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2c2:	f000 fc75 	bl	800bbb0 <__i2b>
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	b166      	cbz	r6, 800b2e4 <_dtoa_r+0x754>
 800b2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	dd09      	ble.n	800b2e4 <_dtoa_r+0x754>
 800b2d0:	42b3      	cmp	r3, r6
 800b2d2:	bfa8      	it	ge
 800b2d4:	4633      	movge	r3, r6
 800b2d6:	9a04      	ldr	r2, [sp, #16]
 800b2d8:	1af6      	subs	r6, r6, r3
 800b2da:	1ad2      	subs	r2, r2, r3
 800b2dc:	9204      	str	r2, [sp, #16]
 800b2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2e6:	b30b      	cbz	r3, 800b32c <_dtoa_r+0x79c>
 800b2e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 80c6 	beq.w	800b47c <_dtoa_r+0x8ec>
 800b2f0:	2c00      	cmp	r4, #0
 800b2f2:	f000 80c0 	beq.w	800b476 <_dtoa_r+0x8e6>
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4648      	mov	r0, r9
 800b2fc:	f000 fd10 	bl	800bd20 <__pow5mult>
 800b300:	9a03      	ldr	r2, [sp, #12]
 800b302:	4601      	mov	r1, r0
 800b304:	4605      	mov	r5, r0
 800b306:	4648      	mov	r0, r9
 800b308:	f000 fc68 	bl	800bbdc <__multiply>
 800b30c:	9903      	ldr	r1, [sp, #12]
 800b30e:	4680      	mov	r8, r0
 800b310:	4648      	mov	r0, r9
 800b312:	f000 fb4f 	bl	800b9b4 <_Bfree>
 800b316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b318:	1b1b      	subs	r3, r3, r4
 800b31a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b31c:	f000 80b1 	beq.w	800b482 <_dtoa_r+0x8f2>
 800b320:	4641      	mov	r1, r8
 800b322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b324:	4648      	mov	r0, r9
 800b326:	f000 fcfb 	bl	800bd20 <__pow5mult>
 800b32a:	9003      	str	r0, [sp, #12]
 800b32c:	2101      	movs	r1, #1
 800b32e:	4648      	mov	r0, r9
 800b330:	f000 fc3e 	bl	800bbb0 <__i2b>
 800b334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b336:	4604      	mov	r4, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 81d8 	beq.w	800b6ee <_dtoa_r+0xb5e>
 800b33e:	461a      	mov	r2, r3
 800b340:	4601      	mov	r1, r0
 800b342:	4648      	mov	r0, r9
 800b344:	f000 fcec 	bl	800bd20 <__pow5mult>
 800b348:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b34a:	4604      	mov	r4, r0
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	f300 809f 	bgt.w	800b490 <_dtoa_r+0x900>
 800b352:	9b06      	ldr	r3, [sp, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f040 8097 	bne.w	800b488 <_dtoa_r+0x8f8>
 800b35a:	9b07      	ldr	r3, [sp, #28]
 800b35c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b360:	2b00      	cmp	r3, #0
 800b362:	f040 8093 	bne.w	800b48c <_dtoa_r+0x8fc>
 800b366:	9b07      	ldr	r3, [sp, #28]
 800b368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b36c:	0d1b      	lsrs	r3, r3, #20
 800b36e:	051b      	lsls	r3, r3, #20
 800b370:	b133      	cbz	r3, 800b380 <_dtoa_r+0x7f0>
 800b372:	9b04      	ldr	r3, [sp, #16]
 800b374:	3301      	adds	r3, #1
 800b376:	9304      	str	r3, [sp, #16]
 800b378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37a:	3301      	adds	r3, #1
 800b37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37e:	2301      	movs	r3, #1
 800b380:	930a      	str	r3, [sp, #40]	@ 0x28
 800b382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 81b8 	beq.w	800b6fa <_dtoa_r+0xb6a>
 800b38a:	6923      	ldr	r3, [r4, #16]
 800b38c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b390:	6918      	ldr	r0, [r3, #16]
 800b392:	f000 fbc1 	bl	800bb18 <__hi0bits>
 800b396:	f1c0 0020 	rsb	r0, r0, #32
 800b39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b39c:	4418      	add	r0, r3
 800b39e:	f010 001f 	ands.w	r0, r0, #31
 800b3a2:	f000 8082 	beq.w	800b4aa <_dtoa_r+0x91a>
 800b3a6:	f1c0 0320 	rsb	r3, r0, #32
 800b3aa:	2b04      	cmp	r3, #4
 800b3ac:	dd73      	ble.n	800b496 <_dtoa_r+0x906>
 800b3ae:	9b04      	ldr	r3, [sp, #16]
 800b3b0:	f1c0 001c 	rsb	r0, r0, #28
 800b3b4:	4403      	add	r3, r0
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ba:	4406      	add	r6, r0
 800b3bc:	4403      	add	r3, r0
 800b3be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3c0:	9b04      	ldr	r3, [sp, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dd05      	ble.n	800b3d2 <_dtoa_r+0x842>
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	9903      	ldr	r1, [sp, #12]
 800b3cc:	f000 fd02 	bl	800bdd4 <__lshift>
 800b3d0:	9003      	str	r0, [sp, #12]
 800b3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd05      	ble.n	800b3e4 <_dtoa_r+0x854>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4648      	mov	r0, r9
 800b3de:	f000 fcf9 	bl	800bdd4 <__lshift>
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d061      	beq.n	800b4ae <_dtoa_r+0x91e>
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	9803      	ldr	r0, [sp, #12]
 800b3ee:	f000 fd5d 	bl	800beac <__mcmp>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	da5b      	bge.n	800b4ae <_dtoa_r+0x91e>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	220a      	movs	r2, #10
 800b3fa:	4648      	mov	r0, r9
 800b3fc:	9903      	ldr	r1, [sp, #12]
 800b3fe:	f000 fafb 	bl	800b9f8 <__multadd>
 800b402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b404:	f107 38ff 	add.w	r8, r7, #4294967295
 800b408:	9003      	str	r0, [sp, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 8177 	beq.w	800b6fe <_dtoa_r+0xb6e>
 800b410:	4629      	mov	r1, r5
 800b412:	2300      	movs	r3, #0
 800b414:	220a      	movs	r2, #10
 800b416:	4648      	mov	r0, r9
 800b418:	f000 faee 	bl	800b9f8 <__multadd>
 800b41c:	f1bb 0f00 	cmp.w	fp, #0
 800b420:	4605      	mov	r5, r0
 800b422:	dc6f      	bgt.n	800b504 <_dtoa_r+0x974>
 800b424:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b426:	2b02      	cmp	r3, #2
 800b428:	dc49      	bgt.n	800b4be <_dtoa_r+0x92e>
 800b42a:	e06b      	b.n	800b504 <_dtoa_r+0x974>
 800b42c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b42e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b432:	e73c      	b.n	800b2ae <_dtoa_r+0x71e>
 800b434:	3fe00000 	.word	0x3fe00000
 800b438:	40240000 	.word	0x40240000
 800b43c:	9b08      	ldr	r3, [sp, #32]
 800b43e:	1e5c      	subs	r4, r3, #1
 800b440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b442:	42a3      	cmp	r3, r4
 800b444:	db09      	blt.n	800b45a <_dtoa_r+0x8ca>
 800b446:	1b1c      	subs	r4, r3, r4
 800b448:	9b08      	ldr	r3, [sp, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f6bf af30 	bge.w	800b2b0 <_dtoa_r+0x720>
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	9a08      	ldr	r2, [sp, #32]
 800b454:	1a9e      	subs	r6, r3, r2
 800b456:	2300      	movs	r3, #0
 800b458:	e72b      	b.n	800b2b2 <_dtoa_r+0x722>
 800b45a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b45c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b45e:	1ae3      	subs	r3, r4, r3
 800b460:	441a      	add	r2, r3
 800b462:	940a      	str	r4, [sp, #40]	@ 0x28
 800b464:	9e04      	ldr	r6, [sp, #16]
 800b466:	2400      	movs	r4, #0
 800b468:	9b08      	ldr	r3, [sp, #32]
 800b46a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b46c:	e721      	b.n	800b2b2 <_dtoa_r+0x722>
 800b46e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b470:	9e04      	ldr	r6, [sp, #16]
 800b472:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b474:	e728      	b.n	800b2c8 <_dtoa_r+0x738>
 800b476:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b47a:	e751      	b.n	800b320 <_dtoa_r+0x790>
 800b47c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b47e:	9903      	ldr	r1, [sp, #12]
 800b480:	e750      	b.n	800b324 <_dtoa_r+0x794>
 800b482:	f8cd 800c 	str.w	r8, [sp, #12]
 800b486:	e751      	b.n	800b32c <_dtoa_r+0x79c>
 800b488:	2300      	movs	r3, #0
 800b48a:	e779      	b.n	800b380 <_dtoa_r+0x7f0>
 800b48c:	9b06      	ldr	r3, [sp, #24]
 800b48e:	e777      	b.n	800b380 <_dtoa_r+0x7f0>
 800b490:	2300      	movs	r3, #0
 800b492:	930a      	str	r3, [sp, #40]	@ 0x28
 800b494:	e779      	b.n	800b38a <_dtoa_r+0x7fa>
 800b496:	d093      	beq.n	800b3c0 <_dtoa_r+0x830>
 800b498:	9a04      	ldr	r2, [sp, #16]
 800b49a:	331c      	adds	r3, #28
 800b49c:	441a      	add	r2, r3
 800b49e:	9204      	str	r2, [sp, #16]
 800b4a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4a2:	441e      	add	r6, r3
 800b4a4:	441a      	add	r2, r3
 800b4a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4a8:	e78a      	b.n	800b3c0 <_dtoa_r+0x830>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	e7f4      	b.n	800b498 <_dtoa_r+0x908>
 800b4ae:	9b08      	ldr	r3, [sp, #32]
 800b4b0:	46b8      	mov	r8, r7
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	dc20      	bgt.n	800b4f8 <_dtoa_r+0x968>
 800b4b6:	469b      	mov	fp, r3
 800b4b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	dd1e      	ble.n	800b4fc <_dtoa_r+0x96c>
 800b4be:	f1bb 0f00 	cmp.w	fp, #0
 800b4c2:	f47f adb1 	bne.w	800b028 <_dtoa_r+0x498>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	465b      	mov	r3, fp
 800b4ca:	2205      	movs	r2, #5
 800b4cc:	4648      	mov	r0, r9
 800b4ce:	f000 fa93 	bl	800b9f8 <__multadd>
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	9803      	ldr	r0, [sp, #12]
 800b4d8:	f000 fce8 	bl	800beac <__mcmp>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f77f ada3 	ble.w	800b028 <_dtoa_r+0x498>
 800b4e2:	4656      	mov	r6, sl
 800b4e4:	2331      	movs	r3, #49	@ 0x31
 800b4e6:	f108 0801 	add.w	r8, r8, #1
 800b4ea:	f806 3b01 	strb.w	r3, [r6], #1
 800b4ee:	e59f      	b.n	800b030 <_dtoa_r+0x4a0>
 800b4f0:	46b8      	mov	r8, r7
 800b4f2:	9c08      	ldr	r4, [sp, #32]
 800b4f4:	4625      	mov	r5, r4
 800b4f6:	e7f4      	b.n	800b4e2 <_dtoa_r+0x952>
 800b4f8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b4fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 8101 	beq.w	800b706 <_dtoa_r+0xb76>
 800b504:	2e00      	cmp	r6, #0
 800b506:	dd05      	ble.n	800b514 <_dtoa_r+0x984>
 800b508:	4629      	mov	r1, r5
 800b50a:	4632      	mov	r2, r6
 800b50c:	4648      	mov	r0, r9
 800b50e:	f000 fc61 	bl	800bdd4 <__lshift>
 800b512:	4605      	mov	r5, r0
 800b514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b516:	2b00      	cmp	r3, #0
 800b518:	d05c      	beq.n	800b5d4 <_dtoa_r+0xa44>
 800b51a:	4648      	mov	r0, r9
 800b51c:	6869      	ldr	r1, [r5, #4]
 800b51e:	f000 fa09 	bl	800b934 <_Balloc>
 800b522:	4606      	mov	r6, r0
 800b524:	b928      	cbnz	r0, 800b532 <_dtoa_r+0x9a2>
 800b526:	4602      	mov	r2, r0
 800b528:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b52c:	4b80      	ldr	r3, [pc, #512]	@ (800b730 <_dtoa_r+0xba0>)
 800b52e:	f7ff bb43 	b.w	800abb8 <_dtoa_r+0x28>
 800b532:	692a      	ldr	r2, [r5, #16]
 800b534:	f105 010c 	add.w	r1, r5, #12
 800b538:	3202      	adds	r2, #2
 800b53a:	0092      	lsls	r2, r2, #2
 800b53c:	300c      	adds	r0, #12
 800b53e:	f002 fadd 	bl	800dafc <memcpy>
 800b542:	2201      	movs	r2, #1
 800b544:	4631      	mov	r1, r6
 800b546:	4648      	mov	r0, r9
 800b548:	f000 fc44 	bl	800bdd4 <__lshift>
 800b54c:	462f      	mov	r7, r5
 800b54e:	4605      	mov	r5, r0
 800b550:	f10a 0301 	add.w	r3, sl, #1
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	eb0a 030b 	add.w	r3, sl, fp
 800b55a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b55c:	9b06      	ldr	r3, [sp, #24]
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	9309      	str	r3, [sp, #36]	@ 0x24
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	4621      	mov	r1, r4
 800b568:	9803      	ldr	r0, [sp, #12]
 800b56a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b56e:	f7ff fa85 	bl	800aa7c <quorem>
 800b572:	4603      	mov	r3, r0
 800b574:	4639      	mov	r1, r7
 800b576:	3330      	adds	r3, #48	@ 0x30
 800b578:	9006      	str	r0, [sp, #24]
 800b57a:	9803      	ldr	r0, [sp, #12]
 800b57c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b57e:	f000 fc95 	bl	800beac <__mcmp>
 800b582:	462a      	mov	r2, r5
 800b584:	9008      	str	r0, [sp, #32]
 800b586:	4621      	mov	r1, r4
 800b588:	4648      	mov	r0, r9
 800b58a:	f000 fcab 	bl	800bee4 <__mdiff>
 800b58e:	68c2      	ldr	r2, [r0, #12]
 800b590:	4606      	mov	r6, r0
 800b592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b594:	bb02      	cbnz	r2, 800b5d8 <_dtoa_r+0xa48>
 800b596:	4601      	mov	r1, r0
 800b598:	9803      	ldr	r0, [sp, #12]
 800b59a:	f000 fc87 	bl	800beac <__mcmp>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4648      	mov	r0, r9
 800b5a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b5aa:	f000 fa03 	bl	800b9b4 <_Bfree>
 800b5ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b5b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b5b2:	9e04      	ldr	r6, [sp, #16]
 800b5b4:	ea42 0103 	orr.w	r1, r2, r3
 800b5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ba:	4319      	orrs	r1, r3
 800b5bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5be:	d10d      	bne.n	800b5dc <_dtoa_r+0xa4c>
 800b5c0:	2b39      	cmp	r3, #57	@ 0x39
 800b5c2:	d027      	beq.n	800b614 <_dtoa_r+0xa84>
 800b5c4:	9a08      	ldr	r2, [sp, #32]
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	dd01      	ble.n	800b5ce <_dtoa_r+0xa3e>
 800b5ca:	9b06      	ldr	r3, [sp, #24]
 800b5cc:	3331      	adds	r3, #49	@ 0x31
 800b5ce:	f88b 3000 	strb.w	r3, [fp]
 800b5d2:	e52e      	b.n	800b032 <_dtoa_r+0x4a2>
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	e7b9      	b.n	800b54c <_dtoa_r+0x9bc>
 800b5d8:	2201      	movs	r2, #1
 800b5da:	e7e2      	b.n	800b5a2 <_dtoa_r+0xa12>
 800b5dc:	9908      	ldr	r1, [sp, #32]
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	db04      	blt.n	800b5ec <_dtoa_r+0xa5c>
 800b5e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b5e4:	4301      	orrs	r1, r0
 800b5e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5e8:	4301      	orrs	r1, r0
 800b5ea:	d120      	bne.n	800b62e <_dtoa_r+0xa9e>
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	ddee      	ble.n	800b5ce <_dtoa_r+0xa3e>
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	9903      	ldr	r1, [sp, #12]
 800b5f4:	4648      	mov	r0, r9
 800b5f6:	9304      	str	r3, [sp, #16]
 800b5f8:	f000 fbec 	bl	800bdd4 <__lshift>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	9003      	str	r0, [sp, #12]
 800b600:	f000 fc54 	bl	800beac <__mcmp>
 800b604:	2800      	cmp	r0, #0
 800b606:	9b04      	ldr	r3, [sp, #16]
 800b608:	dc02      	bgt.n	800b610 <_dtoa_r+0xa80>
 800b60a:	d1e0      	bne.n	800b5ce <_dtoa_r+0xa3e>
 800b60c:	07da      	lsls	r2, r3, #31
 800b60e:	d5de      	bpl.n	800b5ce <_dtoa_r+0xa3e>
 800b610:	2b39      	cmp	r3, #57	@ 0x39
 800b612:	d1da      	bne.n	800b5ca <_dtoa_r+0xa3a>
 800b614:	2339      	movs	r3, #57	@ 0x39
 800b616:	f88b 3000 	strb.w	r3, [fp]
 800b61a:	4633      	mov	r3, r6
 800b61c:	461e      	mov	r6, r3
 800b61e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b622:	3b01      	subs	r3, #1
 800b624:	2a39      	cmp	r2, #57	@ 0x39
 800b626:	d04e      	beq.n	800b6c6 <_dtoa_r+0xb36>
 800b628:	3201      	adds	r2, #1
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	e501      	b.n	800b032 <_dtoa_r+0x4a2>
 800b62e:	2a00      	cmp	r2, #0
 800b630:	dd03      	ble.n	800b63a <_dtoa_r+0xaaa>
 800b632:	2b39      	cmp	r3, #57	@ 0x39
 800b634:	d0ee      	beq.n	800b614 <_dtoa_r+0xa84>
 800b636:	3301      	adds	r3, #1
 800b638:	e7c9      	b.n	800b5ce <_dtoa_r+0xa3e>
 800b63a:	9a04      	ldr	r2, [sp, #16]
 800b63c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b63e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b642:	428a      	cmp	r2, r1
 800b644:	d028      	beq.n	800b698 <_dtoa_r+0xb08>
 800b646:	2300      	movs	r3, #0
 800b648:	220a      	movs	r2, #10
 800b64a:	9903      	ldr	r1, [sp, #12]
 800b64c:	4648      	mov	r0, r9
 800b64e:	f000 f9d3 	bl	800b9f8 <__multadd>
 800b652:	42af      	cmp	r7, r5
 800b654:	9003      	str	r0, [sp, #12]
 800b656:	f04f 0300 	mov.w	r3, #0
 800b65a:	f04f 020a 	mov.w	r2, #10
 800b65e:	4639      	mov	r1, r7
 800b660:	4648      	mov	r0, r9
 800b662:	d107      	bne.n	800b674 <_dtoa_r+0xae4>
 800b664:	f000 f9c8 	bl	800b9f8 <__multadd>
 800b668:	4607      	mov	r7, r0
 800b66a:	4605      	mov	r5, r0
 800b66c:	9b04      	ldr	r3, [sp, #16]
 800b66e:	3301      	adds	r3, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	e777      	b.n	800b564 <_dtoa_r+0x9d4>
 800b674:	f000 f9c0 	bl	800b9f8 <__multadd>
 800b678:	4629      	mov	r1, r5
 800b67a:	4607      	mov	r7, r0
 800b67c:	2300      	movs	r3, #0
 800b67e:	220a      	movs	r2, #10
 800b680:	4648      	mov	r0, r9
 800b682:	f000 f9b9 	bl	800b9f8 <__multadd>
 800b686:	4605      	mov	r5, r0
 800b688:	e7f0      	b.n	800b66c <_dtoa_r+0xadc>
 800b68a:	f1bb 0f00 	cmp.w	fp, #0
 800b68e:	bfcc      	ite	gt
 800b690:	465e      	movgt	r6, fp
 800b692:	2601      	movle	r6, #1
 800b694:	2700      	movs	r7, #0
 800b696:	4456      	add	r6, sl
 800b698:	2201      	movs	r2, #1
 800b69a:	9903      	ldr	r1, [sp, #12]
 800b69c:	4648      	mov	r0, r9
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	f000 fb98 	bl	800bdd4 <__lshift>
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	9003      	str	r0, [sp, #12]
 800b6a8:	f000 fc00 	bl	800beac <__mcmp>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	dcb4      	bgt.n	800b61a <_dtoa_r+0xa8a>
 800b6b0:	d102      	bne.n	800b6b8 <_dtoa_r+0xb28>
 800b6b2:	9b04      	ldr	r3, [sp, #16]
 800b6b4:	07db      	lsls	r3, r3, #31
 800b6b6:	d4b0      	bmi.n	800b61a <_dtoa_r+0xa8a>
 800b6b8:	4633      	mov	r3, r6
 800b6ba:	461e      	mov	r6, r3
 800b6bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6c0:	2a30      	cmp	r2, #48	@ 0x30
 800b6c2:	d0fa      	beq.n	800b6ba <_dtoa_r+0xb2a>
 800b6c4:	e4b5      	b.n	800b032 <_dtoa_r+0x4a2>
 800b6c6:	459a      	cmp	sl, r3
 800b6c8:	d1a8      	bne.n	800b61c <_dtoa_r+0xa8c>
 800b6ca:	2331      	movs	r3, #49	@ 0x31
 800b6cc:	f108 0801 	add.w	r8, r8, #1
 800b6d0:	f88a 3000 	strb.w	r3, [sl]
 800b6d4:	e4ad      	b.n	800b032 <_dtoa_r+0x4a2>
 800b6d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b6d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b734 <_dtoa_r+0xba4>
 800b6dc:	b11b      	cbz	r3, 800b6e6 <_dtoa_r+0xb56>
 800b6de:	f10a 0308 	add.w	r3, sl, #8
 800b6e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	4650      	mov	r0, sl
 800b6e8:	b017      	add	sp, #92	@ 0x5c
 800b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	f77f ae2e 	ble.w	800b352 <_dtoa_r+0x7c2>
 800b6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6fa:	2001      	movs	r0, #1
 800b6fc:	e64d      	b.n	800b39a <_dtoa_r+0x80a>
 800b6fe:	f1bb 0f00 	cmp.w	fp, #0
 800b702:	f77f aed9 	ble.w	800b4b8 <_dtoa_r+0x928>
 800b706:	4656      	mov	r6, sl
 800b708:	4621      	mov	r1, r4
 800b70a:	9803      	ldr	r0, [sp, #12]
 800b70c:	f7ff f9b6 	bl	800aa7c <quorem>
 800b710:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b714:	f806 3b01 	strb.w	r3, [r6], #1
 800b718:	eba6 020a 	sub.w	r2, r6, sl
 800b71c:	4593      	cmp	fp, r2
 800b71e:	ddb4      	ble.n	800b68a <_dtoa_r+0xafa>
 800b720:	2300      	movs	r3, #0
 800b722:	220a      	movs	r2, #10
 800b724:	4648      	mov	r0, r9
 800b726:	9903      	ldr	r1, [sp, #12]
 800b728:	f000 f966 	bl	800b9f8 <__multadd>
 800b72c:	9003      	str	r0, [sp, #12]
 800b72e:	e7eb      	b.n	800b708 <_dtoa_r+0xb78>
 800b730:	0800ea3d 	.word	0x0800ea3d
 800b734:	0800e9c1 	.word	0x0800e9c1

0800b738 <_free_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4605      	mov	r5, r0
 800b73c:	2900      	cmp	r1, #0
 800b73e:	d040      	beq.n	800b7c2 <_free_r+0x8a>
 800b740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b744:	1f0c      	subs	r4, r1, #4
 800b746:	2b00      	cmp	r3, #0
 800b748:	bfb8      	it	lt
 800b74a:	18e4      	addlt	r4, r4, r3
 800b74c:	f000 f8e6 	bl	800b91c <__malloc_lock>
 800b750:	4a1c      	ldr	r2, [pc, #112]	@ (800b7c4 <_free_r+0x8c>)
 800b752:	6813      	ldr	r3, [r2, #0]
 800b754:	b933      	cbnz	r3, 800b764 <_free_r+0x2c>
 800b756:	6063      	str	r3, [r4, #4]
 800b758:	6014      	str	r4, [r2, #0]
 800b75a:	4628      	mov	r0, r5
 800b75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b760:	f000 b8e2 	b.w	800b928 <__malloc_unlock>
 800b764:	42a3      	cmp	r3, r4
 800b766:	d908      	bls.n	800b77a <_free_r+0x42>
 800b768:	6820      	ldr	r0, [r4, #0]
 800b76a:	1821      	adds	r1, r4, r0
 800b76c:	428b      	cmp	r3, r1
 800b76e:	bf01      	itttt	eq
 800b770:	6819      	ldreq	r1, [r3, #0]
 800b772:	685b      	ldreq	r3, [r3, #4]
 800b774:	1809      	addeq	r1, r1, r0
 800b776:	6021      	streq	r1, [r4, #0]
 800b778:	e7ed      	b.n	800b756 <_free_r+0x1e>
 800b77a:	461a      	mov	r2, r3
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	b10b      	cbz	r3, 800b784 <_free_r+0x4c>
 800b780:	42a3      	cmp	r3, r4
 800b782:	d9fa      	bls.n	800b77a <_free_r+0x42>
 800b784:	6811      	ldr	r1, [r2, #0]
 800b786:	1850      	adds	r0, r2, r1
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d10b      	bne.n	800b7a4 <_free_r+0x6c>
 800b78c:	6820      	ldr	r0, [r4, #0]
 800b78e:	4401      	add	r1, r0
 800b790:	1850      	adds	r0, r2, r1
 800b792:	4283      	cmp	r3, r0
 800b794:	6011      	str	r1, [r2, #0]
 800b796:	d1e0      	bne.n	800b75a <_free_r+0x22>
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	4408      	add	r0, r1
 800b79e:	6010      	str	r0, [r2, #0]
 800b7a0:	6053      	str	r3, [r2, #4]
 800b7a2:	e7da      	b.n	800b75a <_free_r+0x22>
 800b7a4:	d902      	bls.n	800b7ac <_free_r+0x74>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	e7d6      	b.n	800b75a <_free_r+0x22>
 800b7ac:	6820      	ldr	r0, [r4, #0]
 800b7ae:	1821      	adds	r1, r4, r0
 800b7b0:	428b      	cmp	r3, r1
 800b7b2:	bf01      	itttt	eq
 800b7b4:	6819      	ldreq	r1, [r3, #0]
 800b7b6:	685b      	ldreq	r3, [r3, #4]
 800b7b8:	1809      	addeq	r1, r1, r0
 800b7ba:	6021      	streq	r1, [r4, #0]
 800b7bc:	6063      	str	r3, [r4, #4]
 800b7be:	6054      	str	r4, [r2, #4]
 800b7c0:	e7cb      	b.n	800b75a <_free_r+0x22>
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	200017b4 	.word	0x200017b4

0800b7c8 <malloc>:
 800b7c8:	4b02      	ldr	r3, [pc, #8]	@ (800b7d4 <malloc+0xc>)
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	6818      	ldr	r0, [r3, #0]
 800b7ce:	f000 b825 	b.w	800b81c <_malloc_r>
 800b7d2:	bf00      	nop
 800b7d4:	20000190 	.word	0x20000190

0800b7d8 <sbrk_aligned>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	4e0f      	ldr	r6, [pc, #60]	@ (800b818 <sbrk_aligned+0x40>)
 800b7dc:	460c      	mov	r4, r1
 800b7de:	6831      	ldr	r1, [r6, #0]
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	b911      	cbnz	r1, 800b7ea <sbrk_aligned+0x12>
 800b7e4:	f002 f97a 	bl	800dadc <_sbrk_r>
 800b7e8:	6030      	str	r0, [r6, #0]
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f002 f975 	bl	800dadc <_sbrk_r>
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	d103      	bne.n	800b7fe <sbrk_aligned+0x26>
 800b7f6:	f04f 34ff 	mov.w	r4, #4294967295
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	bd70      	pop	{r4, r5, r6, pc}
 800b7fe:	1cc4      	adds	r4, r0, #3
 800b800:	f024 0403 	bic.w	r4, r4, #3
 800b804:	42a0      	cmp	r0, r4
 800b806:	d0f8      	beq.n	800b7fa <sbrk_aligned+0x22>
 800b808:	1a21      	subs	r1, r4, r0
 800b80a:	4628      	mov	r0, r5
 800b80c:	f002 f966 	bl	800dadc <_sbrk_r>
 800b810:	3001      	adds	r0, #1
 800b812:	d1f2      	bne.n	800b7fa <sbrk_aligned+0x22>
 800b814:	e7ef      	b.n	800b7f6 <sbrk_aligned+0x1e>
 800b816:	bf00      	nop
 800b818:	200017b0 	.word	0x200017b0

0800b81c <_malloc_r>:
 800b81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b820:	1ccd      	adds	r5, r1, #3
 800b822:	f025 0503 	bic.w	r5, r5, #3
 800b826:	3508      	adds	r5, #8
 800b828:	2d0c      	cmp	r5, #12
 800b82a:	bf38      	it	cc
 800b82c:	250c      	movcc	r5, #12
 800b82e:	2d00      	cmp	r5, #0
 800b830:	4606      	mov	r6, r0
 800b832:	db01      	blt.n	800b838 <_malloc_r+0x1c>
 800b834:	42a9      	cmp	r1, r5
 800b836:	d904      	bls.n	800b842 <_malloc_r+0x26>
 800b838:	230c      	movs	r3, #12
 800b83a:	6033      	str	r3, [r6, #0]
 800b83c:	2000      	movs	r0, #0
 800b83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b918 <_malloc_r+0xfc>
 800b846:	f000 f869 	bl	800b91c <__malloc_lock>
 800b84a:	f8d8 3000 	ldr.w	r3, [r8]
 800b84e:	461c      	mov	r4, r3
 800b850:	bb44      	cbnz	r4, 800b8a4 <_malloc_r+0x88>
 800b852:	4629      	mov	r1, r5
 800b854:	4630      	mov	r0, r6
 800b856:	f7ff ffbf 	bl	800b7d8 <sbrk_aligned>
 800b85a:	1c43      	adds	r3, r0, #1
 800b85c:	4604      	mov	r4, r0
 800b85e:	d158      	bne.n	800b912 <_malloc_r+0xf6>
 800b860:	f8d8 4000 	ldr.w	r4, [r8]
 800b864:	4627      	mov	r7, r4
 800b866:	2f00      	cmp	r7, #0
 800b868:	d143      	bne.n	800b8f2 <_malloc_r+0xd6>
 800b86a:	2c00      	cmp	r4, #0
 800b86c:	d04b      	beq.n	800b906 <_malloc_r+0xea>
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	4639      	mov	r1, r7
 800b872:	4630      	mov	r0, r6
 800b874:	eb04 0903 	add.w	r9, r4, r3
 800b878:	f002 f930 	bl	800dadc <_sbrk_r>
 800b87c:	4581      	cmp	r9, r0
 800b87e:	d142      	bne.n	800b906 <_malloc_r+0xea>
 800b880:	6821      	ldr	r1, [r4, #0]
 800b882:	4630      	mov	r0, r6
 800b884:	1a6d      	subs	r5, r5, r1
 800b886:	4629      	mov	r1, r5
 800b888:	f7ff ffa6 	bl	800b7d8 <sbrk_aligned>
 800b88c:	3001      	adds	r0, #1
 800b88e:	d03a      	beq.n	800b906 <_malloc_r+0xea>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	442b      	add	r3, r5
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	f8d8 3000 	ldr.w	r3, [r8]
 800b89a:	685a      	ldr	r2, [r3, #4]
 800b89c:	bb62      	cbnz	r2, 800b8f8 <_malloc_r+0xdc>
 800b89e:	f8c8 7000 	str.w	r7, [r8]
 800b8a2:	e00f      	b.n	800b8c4 <_malloc_r+0xa8>
 800b8a4:	6822      	ldr	r2, [r4, #0]
 800b8a6:	1b52      	subs	r2, r2, r5
 800b8a8:	d420      	bmi.n	800b8ec <_malloc_r+0xd0>
 800b8aa:	2a0b      	cmp	r2, #11
 800b8ac:	d917      	bls.n	800b8de <_malloc_r+0xc2>
 800b8ae:	1961      	adds	r1, r4, r5
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	6025      	str	r5, [r4, #0]
 800b8b4:	bf18      	it	ne
 800b8b6:	6059      	strne	r1, [r3, #4]
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	bf08      	it	eq
 800b8bc:	f8c8 1000 	streq.w	r1, [r8]
 800b8c0:	5162      	str	r2, [r4, r5]
 800b8c2:	604b      	str	r3, [r1, #4]
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f000 f82f 	bl	800b928 <__malloc_unlock>
 800b8ca:	f104 000b 	add.w	r0, r4, #11
 800b8ce:	1d23      	adds	r3, r4, #4
 800b8d0:	f020 0007 	bic.w	r0, r0, #7
 800b8d4:	1ac2      	subs	r2, r0, r3
 800b8d6:	bf1c      	itt	ne
 800b8d8:	1a1b      	subne	r3, r3, r0
 800b8da:	50a3      	strne	r3, [r4, r2]
 800b8dc:	e7af      	b.n	800b83e <_malloc_r+0x22>
 800b8de:	6862      	ldr	r2, [r4, #4]
 800b8e0:	42a3      	cmp	r3, r4
 800b8e2:	bf0c      	ite	eq
 800b8e4:	f8c8 2000 	streq.w	r2, [r8]
 800b8e8:	605a      	strne	r2, [r3, #4]
 800b8ea:	e7eb      	b.n	800b8c4 <_malloc_r+0xa8>
 800b8ec:	4623      	mov	r3, r4
 800b8ee:	6864      	ldr	r4, [r4, #4]
 800b8f0:	e7ae      	b.n	800b850 <_malloc_r+0x34>
 800b8f2:	463c      	mov	r4, r7
 800b8f4:	687f      	ldr	r7, [r7, #4]
 800b8f6:	e7b6      	b.n	800b866 <_malloc_r+0x4a>
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	42a3      	cmp	r3, r4
 800b8fe:	d1fb      	bne.n	800b8f8 <_malloc_r+0xdc>
 800b900:	2300      	movs	r3, #0
 800b902:	6053      	str	r3, [r2, #4]
 800b904:	e7de      	b.n	800b8c4 <_malloc_r+0xa8>
 800b906:	230c      	movs	r3, #12
 800b908:	4630      	mov	r0, r6
 800b90a:	6033      	str	r3, [r6, #0]
 800b90c:	f000 f80c 	bl	800b928 <__malloc_unlock>
 800b910:	e794      	b.n	800b83c <_malloc_r+0x20>
 800b912:	6005      	str	r5, [r0, #0]
 800b914:	e7d6      	b.n	800b8c4 <_malloc_r+0xa8>
 800b916:	bf00      	nop
 800b918:	200017b4 	.word	0x200017b4

0800b91c <__malloc_lock>:
 800b91c:	4801      	ldr	r0, [pc, #4]	@ (800b924 <__malloc_lock+0x8>)
 800b91e:	f7ff b898 	b.w	800aa52 <__retarget_lock_acquire_recursive>
 800b922:	bf00      	nop
 800b924:	200017ac 	.word	0x200017ac

0800b928 <__malloc_unlock>:
 800b928:	4801      	ldr	r0, [pc, #4]	@ (800b930 <__malloc_unlock+0x8>)
 800b92a:	f7ff b893 	b.w	800aa54 <__retarget_lock_release_recursive>
 800b92e:	bf00      	nop
 800b930:	200017ac 	.word	0x200017ac

0800b934 <_Balloc>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	69c6      	ldr	r6, [r0, #28]
 800b938:	4604      	mov	r4, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	b976      	cbnz	r6, 800b95c <_Balloc+0x28>
 800b93e:	2010      	movs	r0, #16
 800b940:	f7ff ff42 	bl	800b7c8 <malloc>
 800b944:	4602      	mov	r2, r0
 800b946:	61e0      	str	r0, [r4, #28]
 800b948:	b920      	cbnz	r0, 800b954 <_Balloc+0x20>
 800b94a:	216b      	movs	r1, #107	@ 0x6b
 800b94c:	4b17      	ldr	r3, [pc, #92]	@ (800b9ac <_Balloc+0x78>)
 800b94e:	4818      	ldr	r0, [pc, #96]	@ (800b9b0 <_Balloc+0x7c>)
 800b950:	f002 f8e8 	bl	800db24 <__assert_func>
 800b954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b958:	6006      	str	r6, [r0, #0]
 800b95a:	60c6      	str	r6, [r0, #12]
 800b95c:	69e6      	ldr	r6, [r4, #28]
 800b95e:	68f3      	ldr	r3, [r6, #12]
 800b960:	b183      	cbz	r3, 800b984 <_Balloc+0x50>
 800b962:	69e3      	ldr	r3, [r4, #28]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b96a:	b9b8      	cbnz	r0, 800b99c <_Balloc+0x68>
 800b96c:	2101      	movs	r1, #1
 800b96e:	fa01 f605 	lsl.w	r6, r1, r5
 800b972:	1d72      	adds	r2, r6, #5
 800b974:	4620      	mov	r0, r4
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	f002 f8f2 	bl	800db60 <_calloc_r>
 800b97c:	b160      	cbz	r0, 800b998 <_Balloc+0x64>
 800b97e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b982:	e00e      	b.n	800b9a2 <_Balloc+0x6e>
 800b984:	2221      	movs	r2, #33	@ 0x21
 800b986:	2104      	movs	r1, #4
 800b988:	4620      	mov	r0, r4
 800b98a:	f002 f8e9 	bl	800db60 <_calloc_r>
 800b98e:	69e3      	ldr	r3, [r4, #28]
 800b990:	60f0      	str	r0, [r6, #12]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1e4      	bne.n	800b962 <_Balloc+0x2e>
 800b998:	2000      	movs	r0, #0
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	6802      	ldr	r2, [r0, #0]
 800b99e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9a8:	e7f7      	b.n	800b99a <_Balloc+0x66>
 800b9aa:	bf00      	nop
 800b9ac:	0800e9ce 	.word	0x0800e9ce
 800b9b0:	0800ea4e 	.word	0x0800ea4e

0800b9b4 <_Bfree>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	69c6      	ldr	r6, [r0, #28]
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	b976      	cbnz	r6, 800b9dc <_Bfree+0x28>
 800b9be:	2010      	movs	r0, #16
 800b9c0:	f7ff ff02 	bl	800b7c8 <malloc>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	61e8      	str	r0, [r5, #28]
 800b9c8:	b920      	cbnz	r0, 800b9d4 <_Bfree+0x20>
 800b9ca:	218f      	movs	r1, #143	@ 0x8f
 800b9cc:	4b08      	ldr	r3, [pc, #32]	@ (800b9f0 <_Bfree+0x3c>)
 800b9ce:	4809      	ldr	r0, [pc, #36]	@ (800b9f4 <_Bfree+0x40>)
 800b9d0:	f002 f8a8 	bl	800db24 <__assert_func>
 800b9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9d8:	6006      	str	r6, [r0, #0]
 800b9da:	60c6      	str	r6, [r0, #12]
 800b9dc:	b13c      	cbz	r4, 800b9ee <_Bfree+0x3a>
 800b9de:	69eb      	ldr	r3, [r5, #28]
 800b9e0:	6862      	ldr	r2, [r4, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9e8:	6021      	str	r1, [r4, #0]
 800b9ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	0800e9ce 	.word	0x0800e9ce
 800b9f4:	0800ea4e 	.word	0x0800ea4e

0800b9f8 <__multadd>:
 800b9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	461e      	mov	r6, r3
 800ba02:	2000      	movs	r0, #0
 800ba04:	690d      	ldr	r5, [r1, #16]
 800ba06:	f101 0c14 	add.w	ip, r1, #20
 800ba0a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba0e:	3001      	adds	r0, #1
 800ba10:	b299      	uxth	r1, r3
 800ba12:	fb02 6101 	mla	r1, r2, r1, r6
 800ba16:	0c1e      	lsrs	r6, r3, #16
 800ba18:	0c0b      	lsrs	r3, r1, #16
 800ba1a:	fb02 3306 	mla	r3, r2, r6, r3
 800ba1e:	b289      	uxth	r1, r1
 800ba20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba24:	4285      	cmp	r5, r0
 800ba26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ba2e:	dcec      	bgt.n	800ba0a <__multadd+0x12>
 800ba30:	b30e      	cbz	r6, 800ba76 <__multadd+0x7e>
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	42ab      	cmp	r3, r5
 800ba36:	dc19      	bgt.n	800ba6c <__multadd+0x74>
 800ba38:	6861      	ldr	r1, [r4, #4]
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	3101      	adds	r1, #1
 800ba3e:	f7ff ff79 	bl	800b934 <_Balloc>
 800ba42:	4680      	mov	r8, r0
 800ba44:	b928      	cbnz	r0, 800ba52 <__multadd+0x5a>
 800ba46:	4602      	mov	r2, r0
 800ba48:	21ba      	movs	r1, #186	@ 0xba
 800ba4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba7c <__multadd+0x84>)
 800ba4c:	480c      	ldr	r0, [pc, #48]	@ (800ba80 <__multadd+0x88>)
 800ba4e:	f002 f869 	bl	800db24 <__assert_func>
 800ba52:	6922      	ldr	r2, [r4, #16]
 800ba54:	f104 010c 	add.w	r1, r4, #12
 800ba58:	3202      	adds	r2, #2
 800ba5a:	0092      	lsls	r2, r2, #2
 800ba5c:	300c      	adds	r0, #12
 800ba5e:	f002 f84d 	bl	800dafc <memcpy>
 800ba62:	4621      	mov	r1, r4
 800ba64:	4638      	mov	r0, r7
 800ba66:	f7ff ffa5 	bl	800b9b4 <_Bfree>
 800ba6a:	4644      	mov	r4, r8
 800ba6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba70:	3501      	adds	r5, #1
 800ba72:	615e      	str	r6, [r3, #20]
 800ba74:	6125      	str	r5, [r4, #16]
 800ba76:	4620      	mov	r0, r4
 800ba78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7c:	0800ea3d 	.word	0x0800ea3d
 800ba80:	0800ea4e 	.word	0x0800ea4e

0800ba84 <__s2b>:
 800ba84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba88:	4615      	mov	r5, r2
 800ba8a:	2209      	movs	r2, #9
 800ba8c:	461f      	mov	r7, r3
 800ba8e:	3308      	adds	r3, #8
 800ba90:	460c      	mov	r4, r1
 800ba92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba96:	4606      	mov	r6, r0
 800ba98:	2201      	movs	r2, #1
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	db09      	blt.n	800bab4 <__s2b+0x30>
 800baa0:	4630      	mov	r0, r6
 800baa2:	f7ff ff47 	bl	800b934 <_Balloc>
 800baa6:	b940      	cbnz	r0, 800baba <__s2b+0x36>
 800baa8:	4602      	mov	r2, r0
 800baaa:	21d3      	movs	r1, #211	@ 0xd3
 800baac:	4b18      	ldr	r3, [pc, #96]	@ (800bb10 <__s2b+0x8c>)
 800baae:	4819      	ldr	r0, [pc, #100]	@ (800bb14 <__s2b+0x90>)
 800bab0:	f002 f838 	bl	800db24 <__assert_func>
 800bab4:	0052      	lsls	r2, r2, #1
 800bab6:	3101      	adds	r1, #1
 800bab8:	e7f0      	b.n	800ba9c <__s2b+0x18>
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	2d09      	cmp	r5, #9
 800babe:	6143      	str	r3, [r0, #20]
 800bac0:	f04f 0301 	mov.w	r3, #1
 800bac4:	6103      	str	r3, [r0, #16]
 800bac6:	dd16      	ble.n	800baf6 <__s2b+0x72>
 800bac8:	f104 0909 	add.w	r9, r4, #9
 800bacc:	46c8      	mov	r8, r9
 800bace:	442c      	add	r4, r5
 800bad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bad4:	4601      	mov	r1, r0
 800bad6:	220a      	movs	r2, #10
 800bad8:	4630      	mov	r0, r6
 800bada:	3b30      	subs	r3, #48	@ 0x30
 800badc:	f7ff ff8c 	bl	800b9f8 <__multadd>
 800bae0:	45a0      	cmp	r8, r4
 800bae2:	d1f5      	bne.n	800bad0 <__s2b+0x4c>
 800bae4:	f1a5 0408 	sub.w	r4, r5, #8
 800bae8:	444c      	add	r4, r9
 800baea:	1b2d      	subs	r5, r5, r4
 800baec:	1963      	adds	r3, r4, r5
 800baee:	42bb      	cmp	r3, r7
 800baf0:	db04      	blt.n	800bafc <__s2b+0x78>
 800baf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf6:	2509      	movs	r5, #9
 800baf8:	340a      	adds	r4, #10
 800bafa:	e7f6      	b.n	800baea <__s2b+0x66>
 800bafc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb00:	4601      	mov	r1, r0
 800bb02:	220a      	movs	r2, #10
 800bb04:	4630      	mov	r0, r6
 800bb06:	3b30      	subs	r3, #48	@ 0x30
 800bb08:	f7ff ff76 	bl	800b9f8 <__multadd>
 800bb0c:	e7ee      	b.n	800baec <__s2b+0x68>
 800bb0e:	bf00      	nop
 800bb10:	0800ea3d 	.word	0x0800ea3d
 800bb14:	0800ea4e 	.word	0x0800ea4e

0800bb18 <__hi0bits>:
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb1e:	bf3a      	itte	cc
 800bb20:	0403      	lslcc	r3, r0, #16
 800bb22:	2010      	movcc	r0, #16
 800bb24:	2000      	movcs	r0, #0
 800bb26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb2a:	bf3c      	itt	cc
 800bb2c:	021b      	lslcc	r3, r3, #8
 800bb2e:	3008      	addcc	r0, #8
 800bb30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb34:	bf3c      	itt	cc
 800bb36:	011b      	lslcc	r3, r3, #4
 800bb38:	3004      	addcc	r0, #4
 800bb3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb3e:	bf3c      	itt	cc
 800bb40:	009b      	lslcc	r3, r3, #2
 800bb42:	3002      	addcc	r0, #2
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	db05      	blt.n	800bb54 <__hi0bits+0x3c>
 800bb48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb4c:	f100 0001 	add.w	r0, r0, #1
 800bb50:	bf08      	it	eq
 800bb52:	2020      	moveq	r0, #32
 800bb54:	4770      	bx	lr

0800bb56 <__lo0bits>:
 800bb56:	6803      	ldr	r3, [r0, #0]
 800bb58:	4602      	mov	r2, r0
 800bb5a:	f013 0007 	ands.w	r0, r3, #7
 800bb5e:	d00b      	beq.n	800bb78 <__lo0bits+0x22>
 800bb60:	07d9      	lsls	r1, r3, #31
 800bb62:	d421      	bmi.n	800bba8 <__lo0bits+0x52>
 800bb64:	0798      	lsls	r0, r3, #30
 800bb66:	bf49      	itett	mi
 800bb68:	085b      	lsrmi	r3, r3, #1
 800bb6a:	089b      	lsrpl	r3, r3, #2
 800bb6c:	2001      	movmi	r0, #1
 800bb6e:	6013      	strmi	r3, [r2, #0]
 800bb70:	bf5c      	itt	pl
 800bb72:	2002      	movpl	r0, #2
 800bb74:	6013      	strpl	r3, [r2, #0]
 800bb76:	4770      	bx	lr
 800bb78:	b299      	uxth	r1, r3
 800bb7a:	b909      	cbnz	r1, 800bb80 <__lo0bits+0x2a>
 800bb7c:	2010      	movs	r0, #16
 800bb7e:	0c1b      	lsrs	r3, r3, #16
 800bb80:	b2d9      	uxtb	r1, r3
 800bb82:	b909      	cbnz	r1, 800bb88 <__lo0bits+0x32>
 800bb84:	3008      	adds	r0, #8
 800bb86:	0a1b      	lsrs	r3, r3, #8
 800bb88:	0719      	lsls	r1, r3, #28
 800bb8a:	bf04      	itt	eq
 800bb8c:	091b      	lsreq	r3, r3, #4
 800bb8e:	3004      	addeq	r0, #4
 800bb90:	0799      	lsls	r1, r3, #30
 800bb92:	bf04      	itt	eq
 800bb94:	089b      	lsreq	r3, r3, #2
 800bb96:	3002      	addeq	r0, #2
 800bb98:	07d9      	lsls	r1, r3, #31
 800bb9a:	d403      	bmi.n	800bba4 <__lo0bits+0x4e>
 800bb9c:	085b      	lsrs	r3, r3, #1
 800bb9e:	f100 0001 	add.w	r0, r0, #1
 800bba2:	d003      	beq.n	800bbac <__lo0bits+0x56>
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	4770      	bx	lr
 800bba8:	2000      	movs	r0, #0
 800bbaa:	4770      	bx	lr
 800bbac:	2020      	movs	r0, #32
 800bbae:	4770      	bx	lr

0800bbb0 <__i2b>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	f7ff febd 	bl	800b934 <_Balloc>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	b928      	cbnz	r0, 800bbca <__i2b+0x1a>
 800bbbe:	f240 1145 	movw	r1, #325	@ 0x145
 800bbc2:	4b04      	ldr	r3, [pc, #16]	@ (800bbd4 <__i2b+0x24>)
 800bbc4:	4804      	ldr	r0, [pc, #16]	@ (800bbd8 <__i2b+0x28>)
 800bbc6:	f001 ffad 	bl	800db24 <__assert_func>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	6144      	str	r4, [r0, #20]
 800bbce:	6103      	str	r3, [r0, #16]
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	bf00      	nop
 800bbd4:	0800ea3d 	.word	0x0800ea3d
 800bbd8:	0800ea4e 	.word	0x0800ea4e

0800bbdc <__multiply>:
 800bbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe0:	4617      	mov	r7, r2
 800bbe2:	690a      	ldr	r2, [r1, #16]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	4689      	mov	r9, r1
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	bfa2      	ittt	ge
 800bbec:	463b      	movge	r3, r7
 800bbee:	460f      	movge	r7, r1
 800bbf0:	4699      	movge	r9, r3
 800bbf2:	693d      	ldr	r5, [r7, #16]
 800bbf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	eb05 060a 	add.w	r6, r5, sl
 800bc00:	42b3      	cmp	r3, r6
 800bc02:	b085      	sub	sp, #20
 800bc04:	bfb8      	it	lt
 800bc06:	3101      	addlt	r1, #1
 800bc08:	f7ff fe94 	bl	800b934 <_Balloc>
 800bc0c:	b930      	cbnz	r0, 800bc1c <__multiply+0x40>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc14:	4b40      	ldr	r3, [pc, #256]	@ (800bd18 <__multiply+0x13c>)
 800bc16:	4841      	ldr	r0, [pc, #260]	@ (800bd1c <__multiply+0x140>)
 800bc18:	f001 ff84 	bl	800db24 <__assert_func>
 800bc1c:	f100 0414 	add.w	r4, r0, #20
 800bc20:	4623      	mov	r3, r4
 800bc22:	2200      	movs	r2, #0
 800bc24:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bc28:	4573      	cmp	r3, lr
 800bc2a:	d320      	bcc.n	800bc6e <__multiply+0x92>
 800bc2c:	f107 0814 	add.w	r8, r7, #20
 800bc30:	f109 0114 	add.w	r1, r9, #20
 800bc34:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bc38:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bc3c:	9302      	str	r3, [sp, #8]
 800bc3e:	1beb      	subs	r3, r5, r7
 800bc40:	3b15      	subs	r3, #21
 800bc42:	f023 0303 	bic.w	r3, r3, #3
 800bc46:	3304      	adds	r3, #4
 800bc48:	3715      	adds	r7, #21
 800bc4a:	42bd      	cmp	r5, r7
 800bc4c:	bf38      	it	cc
 800bc4e:	2304      	movcc	r3, #4
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	9b02      	ldr	r3, [sp, #8]
 800bc54:	9103      	str	r1, [sp, #12]
 800bc56:	428b      	cmp	r3, r1
 800bc58:	d80c      	bhi.n	800bc74 <__multiply+0x98>
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	dd03      	ble.n	800bc66 <__multiply+0x8a>
 800bc5e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d055      	beq.n	800bd12 <__multiply+0x136>
 800bc66:	6106      	str	r6, [r0, #16]
 800bc68:	b005      	add	sp, #20
 800bc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6e:	f843 2b04 	str.w	r2, [r3], #4
 800bc72:	e7d9      	b.n	800bc28 <__multiply+0x4c>
 800bc74:	f8b1 a000 	ldrh.w	sl, [r1]
 800bc78:	f1ba 0f00 	cmp.w	sl, #0
 800bc7c:	d01f      	beq.n	800bcbe <__multiply+0xe2>
 800bc7e:	46c4      	mov	ip, r8
 800bc80:	46a1      	mov	r9, r4
 800bc82:	2700      	movs	r7, #0
 800bc84:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc88:	f8d9 3000 	ldr.w	r3, [r9]
 800bc8c:	fa1f fb82 	uxth.w	fp, r2
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	fb0a 330b 	mla	r3, sl, fp, r3
 800bc96:	443b      	add	r3, r7
 800bc98:	f8d9 7000 	ldr.w	r7, [r9]
 800bc9c:	0c12      	lsrs	r2, r2, #16
 800bc9e:	0c3f      	lsrs	r7, r7, #16
 800bca0:	fb0a 7202 	mla	r2, sl, r2, r7
 800bca4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcae:	4565      	cmp	r5, ip
 800bcb0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bcb4:	f849 3b04 	str.w	r3, [r9], #4
 800bcb8:	d8e4      	bhi.n	800bc84 <__multiply+0xa8>
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	50e7      	str	r7, [r4, r3]
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	3104      	adds	r1, #4
 800bcc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bcc6:	f1b9 0f00 	cmp.w	r9, #0
 800bcca:	d020      	beq.n	800bd0e <__multiply+0x132>
 800bccc:	4647      	mov	r7, r8
 800bcce:	46a4      	mov	ip, r4
 800bcd0:	f04f 0a00 	mov.w	sl, #0
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	f8b7 b000 	ldrh.w	fp, [r7]
 800bcda:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	fb09 220b 	mla	r2, r9, fp, r2
 800bce4:	4452      	add	r2, sl
 800bce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcea:	f84c 3b04 	str.w	r3, [ip], #4
 800bcee:	f857 3b04 	ldr.w	r3, [r7], #4
 800bcf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcf6:	f8bc 3000 	ldrh.w	r3, [ip]
 800bcfa:	42bd      	cmp	r5, r7
 800bcfc:	fb09 330a 	mla	r3, r9, sl, r3
 800bd00:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bd04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd08:	d8e5      	bhi.n	800bcd6 <__multiply+0xfa>
 800bd0a:	9a01      	ldr	r2, [sp, #4]
 800bd0c:	50a3      	str	r3, [r4, r2]
 800bd0e:	3404      	adds	r4, #4
 800bd10:	e79f      	b.n	800bc52 <__multiply+0x76>
 800bd12:	3e01      	subs	r6, #1
 800bd14:	e7a1      	b.n	800bc5a <__multiply+0x7e>
 800bd16:	bf00      	nop
 800bd18:	0800ea3d 	.word	0x0800ea3d
 800bd1c:	0800ea4e 	.word	0x0800ea4e

0800bd20 <__pow5mult>:
 800bd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd24:	4615      	mov	r5, r2
 800bd26:	f012 0203 	ands.w	r2, r2, #3
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	460e      	mov	r6, r1
 800bd2e:	d007      	beq.n	800bd40 <__pow5mult+0x20>
 800bd30:	4c25      	ldr	r4, [pc, #148]	@ (800bdc8 <__pow5mult+0xa8>)
 800bd32:	3a01      	subs	r2, #1
 800bd34:	2300      	movs	r3, #0
 800bd36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd3a:	f7ff fe5d 	bl	800b9f8 <__multadd>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	10ad      	asrs	r5, r5, #2
 800bd42:	d03d      	beq.n	800bdc0 <__pow5mult+0xa0>
 800bd44:	69fc      	ldr	r4, [r7, #28]
 800bd46:	b97c      	cbnz	r4, 800bd68 <__pow5mult+0x48>
 800bd48:	2010      	movs	r0, #16
 800bd4a:	f7ff fd3d 	bl	800b7c8 <malloc>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	61f8      	str	r0, [r7, #28]
 800bd52:	b928      	cbnz	r0, 800bd60 <__pow5mult+0x40>
 800bd54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd58:	4b1c      	ldr	r3, [pc, #112]	@ (800bdcc <__pow5mult+0xac>)
 800bd5a:	481d      	ldr	r0, [pc, #116]	@ (800bdd0 <__pow5mult+0xb0>)
 800bd5c:	f001 fee2 	bl	800db24 <__assert_func>
 800bd60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd64:	6004      	str	r4, [r0, #0]
 800bd66:	60c4      	str	r4, [r0, #12]
 800bd68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bd6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd70:	b94c      	cbnz	r4, 800bd86 <__pow5mult+0x66>
 800bd72:	f240 2171 	movw	r1, #625	@ 0x271
 800bd76:	4638      	mov	r0, r7
 800bd78:	f7ff ff1a 	bl	800bbb0 <__i2b>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd84:	6003      	str	r3, [r0, #0]
 800bd86:	f04f 0900 	mov.w	r9, #0
 800bd8a:	07eb      	lsls	r3, r5, #31
 800bd8c:	d50a      	bpl.n	800bda4 <__pow5mult+0x84>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4622      	mov	r2, r4
 800bd92:	4638      	mov	r0, r7
 800bd94:	f7ff ff22 	bl	800bbdc <__multiply>
 800bd98:	4680      	mov	r8, r0
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	f7ff fe09 	bl	800b9b4 <_Bfree>
 800bda2:	4646      	mov	r6, r8
 800bda4:	106d      	asrs	r5, r5, #1
 800bda6:	d00b      	beq.n	800bdc0 <__pow5mult+0xa0>
 800bda8:	6820      	ldr	r0, [r4, #0]
 800bdaa:	b938      	cbnz	r0, 800bdbc <__pow5mult+0x9c>
 800bdac:	4622      	mov	r2, r4
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	f7ff ff13 	bl	800bbdc <__multiply>
 800bdb6:	6020      	str	r0, [r4, #0]
 800bdb8:	f8c0 9000 	str.w	r9, [r0]
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	e7e4      	b.n	800bd8a <__pow5mult+0x6a>
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdc6:	bf00      	nop
 800bdc8:	0800eb7c 	.word	0x0800eb7c
 800bdcc:	0800e9ce 	.word	0x0800e9ce
 800bdd0:	0800ea4e 	.word	0x0800ea4e

0800bdd4 <__lshift>:
 800bdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd8:	460c      	mov	r4, r1
 800bdda:	4607      	mov	r7, r0
 800bddc:	4691      	mov	r9, r2
 800bdde:	6923      	ldr	r3, [r4, #16]
 800bde0:	6849      	ldr	r1, [r1, #4]
 800bde2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bde6:	68a3      	ldr	r3, [r4, #8]
 800bde8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdec:	f108 0601 	add.w	r6, r8, #1
 800bdf0:	42b3      	cmp	r3, r6
 800bdf2:	db0b      	blt.n	800be0c <__lshift+0x38>
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f7ff fd9d 	bl	800b934 <_Balloc>
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	b948      	cbnz	r0, 800be12 <__lshift+0x3e>
 800bdfe:	4602      	mov	r2, r0
 800be00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be04:	4b27      	ldr	r3, [pc, #156]	@ (800bea4 <__lshift+0xd0>)
 800be06:	4828      	ldr	r0, [pc, #160]	@ (800bea8 <__lshift+0xd4>)
 800be08:	f001 fe8c 	bl	800db24 <__assert_func>
 800be0c:	3101      	adds	r1, #1
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	e7ee      	b.n	800bdf0 <__lshift+0x1c>
 800be12:	2300      	movs	r3, #0
 800be14:	f100 0114 	add.w	r1, r0, #20
 800be18:	f100 0210 	add.w	r2, r0, #16
 800be1c:	4618      	mov	r0, r3
 800be1e:	4553      	cmp	r3, sl
 800be20:	db33      	blt.n	800be8a <__lshift+0xb6>
 800be22:	6920      	ldr	r0, [r4, #16]
 800be24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be28:	f104 0314 	add.w	r3, r4, #20
 800be2c:	f019 091f 	ands.w	r9, r9, #31
 800be30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be38:	d02b      	beq.n	800be92 <__lshift+0xbe>
 800be3a:	468a      	mov	sl, r1
 800be3c:	2200      	movs	r2, #0
 800be3e:	f1c9 0e20 	rsb	lr, r9, #32
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	fa00 f009 	lsl.w	r0, r0, r9
 800be48:	4310      	orrs	r0, r2
 800be4a:	f84a 0b04 	str.w	r0, [sl], #4
 800be4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be52:	459c      	cmp	ip, r3
 800be54:	fa22 f20e 	lsr.w	r2, r2, lr
 800be58:	d8f3      	bhi.n	800be42 <__lshift+0x6e>
 800be5a:	ebac 0304 	sub.w	r3, ip, r4
 800be5e:	3b15      	subs	r3, #21
 800be60:	f023 0303 	bic.w	r3, r3, #3
 800be64:	3304      	adds	r3, #4
 800be66:	f104 0015 	add.w	r0, r4, #21
 800be6a:	4560      	cmp	r0, ip
 800be6c:	bf88      	it	hi
 800be6e:	2304      	movhi	r3, #4
 800be70:	50ca      	str	r2, [r1, r3]
 800be72:	b10a      	cbz	r2, 800be78 <__lshift+0xa4>
 800be74:	f108 0602 	add.w	r6, r8, #2
 800be78:	3e01      	subs	r6, #1
 800be7a:	4638      	mov	r0, r7
 800be7c:	4621      	mov	r1, r4
 800be7e:	612e      	str	r6, [r5, #16]
 800be80:	f7ff fd98 	bl	800b9b4 <_Bfree>
 800be84:	4628      	mov	r0, r5
 800be86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be8e:	3301      	adds	r3, #1
 800be90:	e7c5      	b.n	800be1e <__lshift+0x4a>
 800be92:	3904      	subs	r1, #4
 800be94:	f853 2b04 	ldr.w	r2, [r3], #4
 800be98:	459c      	cmp	ip, r3
 800be9a:	f841 2f04 	str.w	r2, [r1, #4]!
 800be9e:	d8f9      	bhi.n	800be94 <__lshift+0xc0>
 800bea0:	e7ea      	b.n	800be78 <__lshift+0xa4>
 800bea2:	bf00      	nop
 800bea4:	0800ea3d 	.word	0x0800ea3d
 800bea8:	0800ea4e 	.word	0x0800ea4e

0800beac <__mcmp>:
 800beac:	4603      	mov	r3, r0
 800beae:	690a      	ldr	r2, [r1, #16]
 800beb0:	6900      	ldr	r0, [r0, #16]
 800beb2:	b530      	push	{r4, r5, lr}
 800beb4:	1a80      	subs	r0, r0, r2
 800beb6:	d10e      	bne.n	800bed6 <__mcmp+0x2a>
 800beb8:	3314      	adds	r3, #20
 800beba:	3114      	adds	r1, #20
 800bebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800becc:	4295      	cmp	r5, r2
 800bece:	d003      	beq.n	800bed8 <__mcmp+0x2c>
 800bed0:	d205      	bcs.n	800bede <__mcmp+0x32>
 800bed2:	f04f 30ff 	mov.w	r0, #4294967295
 800bed6:	bd30      	pop	{r4, r5, pc}
 800bed8:	42a3      	cmp	r3, r4
 800beda:	d3f3      	bcc.n	800bec4 <__mcmp+0x18>
 800bedc:	e7fb      	b.n	800bed6 <__mcmp+0x2a>
 800bede:	2001      	movs	r0, #1
 800bee0:	e7f9      	b.n	800bed6 <__mcmp+0x2a>
	...

0800bee4 <__mdiff>:
 800bee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	4689      	mov	r9, r1
 800beea:	4606      	mov	r6, r0
 800beec:	4611      	mov	r1, r2
 800beee:	4648      	mov	r0, r9
 800bef0:	4614      	mov	r4, r2
 800bef2:	f7ff ffdb 	bl	800beac <__mcmp>
 800bef6:	1e05      	subs	r5, r0, #0
 800bef8:	d112      	bne.n	800bf20 <__mdiff+0x3c>
 800befa:	4629      	mov	r1, r5
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff fd19 	bl	800b934 <_Balloc>
 800bf02:	4602      	mov	r2, r0
 800bf04:	b928      	cbnz	r0, 800bf12 <__mdiff+0x2e>
 800bf06:	f240 2137 	movw	r1, #567	@ 0x237
 800bf0a:	4b3e      	ldr	r3, [pc, #248]	@ (800c004 <__mdiff+0x120>)
 800bf0c:	483e      	ldr	r0, [pc, #248]	@ (800c008 <__mdiff+0x124>)
 800bf0e:	f001 fe09 	bl	800db24 <__assert_func>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf18:	4610      	mov	r0, r2
 800bf1a:	b003      	add	sp, #12
 800bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf20:	bfbc      	itt	lt
 800bf22:	464b      	movlt	r3, r9
 800bf24:	46a1      	movlt	r9, r4
 800bf26:	4630      	mov	r0, r6
 800bf28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf2c:	bfba      	itte	lt
 800bf2e:	461c      	movlt	r4, r3
 800bf30:	2501      	movlt	r5, #1
 800bf32:	2500      	movge	r5, #0
 800bf34:	f7ff fcfe 	bl	800b934 <_Balloc>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	b918      	cbnz	r0, 800bf44 <__mdiff+0x60>
 800bf3c:	f240 2145 	movw	r1, #581	@ 0x245
 800bf40:	4b30      	ldr	r3, [pc, #192]	@ (800c004 <__mdiff+0x120>)
 800bf42:	e7e3      	b.n	800bf0c <__mdiff+0x28>
 800bf44:	f100 0b14 	add.w	fp, r0, #20
 800bf48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf4c:	f109 0310 	add.w	r3, r9, #16
 800bf50:	60c5      	str	r5, [r0, #12]
 800bf52:	f04f 0c00 	mov.w	ip, #0
 800bf56:	f109 0514 	add.w	r5, r9, #20
 800bf5a:	46d9      	mov	r9, fp
 800bf5c:	6926      	ldr	r6, [r4, #16]
 800bf5e:	f104 0e14 	add.w	lr, r4, #20
 800bf62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	9b01      	ldr	r3, [sp, #4]
 800bf6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bf72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf76:	b281      	uxth	r1, r0
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	fa1f f38a 	uxth.w	r3, sl
 800bf7e:	1a5b      	subs	r3, r3, r1
 800bf80:	0c00      	lsrs	r0, r0, #16
 800bf82:	4463      	add	r3, ip
 800bf84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bf88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf92:	4576      	cmp	r6, lr
 800bf94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf98:	f849 3b04 	str.w	r3, [r9], #4
 800bf9c:	d8e6      	bhi.n	800bf6c <__mdiff+0x88>
 800bf9e:	1b33      	subs	r3, r6, r4
 800bfa0:	3b15      	subs	r3, #21
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	3415      	adds	r4, #21
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	42a6      	cmp	r6, r4
 800bfac:	bf38      	it	cc
 800bfae:	2304      	movcc	r3, #4
 800bfb0:	441d      	add	r5, r3
 800bfb2:	445b      	add	r3, fp
 800bfb4:	461e      	mov	r6, r3
 800bfb6:	462c      	mov	r4, r5
 800bfb8:	4544      	cmp	r4, r8
 800bfba:	d30e      	bcc.n	800bfda <__mdiff+0xf6>
 800bfbc:	f108 0103 	add.w	r1, r8, #3
 800bfc0:	1b49      	subs	r1, r1, r5
 800bfc2:	f021 0103 	bic.w	r1, r1, #3
 800bfc6:	3d03      	subs	r5, #3
 800bfc8:	45a8      	cmp	r8, r5
 800bfca:	bf38      	it	cc
 800bfcc:	2100      	movcc	r1, #0
 800bfce:	440b      	add	r3, r1
 800bfd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfd4:	b199      	cbz	r1, 800bffe <__mdiff+0x11a>
 800bfd6:	6117      	str	r7, [r2, #16]
 800bfd8:	e79e      	b.n	800bf18 <__mdiff+0x34>
 800bfda:	46e6      	mov	lr, ip
 800bfdc:	f854 1b04 	ldr.w	r1, [r4], #4
 800bfe0:	fa1f fc81 	uxth.w	ip, r1
 800bfe4:	44f4      	add	ip, lr
 800bfe6:	0c08      	lsrs	r0, r1, #16
 800bfe8:	4471      	add	r1, lr
 800bfea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bfee:	b289      	uxth	r1, r1
 800bff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bff4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bff8:	f846 1b04 	str.w	r1, [r6], #4
 800bffc:	e7dc      	b.n	800bfb8 <__mdiff+0xd4>
 800bffe:	3f01      	subs	r7, #1
 800c000:	e7e6      	b.n	800bfd0 <__mdiff+0xec>
 800c002:	bf00      	nop
 800c004:	0800ea3d 	.word	0x0800ea3d
 800c008:	0800ea4e 	.word	0x0800ea4e

0800c00c <__ulp>:
 800c00c:	4b0e      	ldr	r3, [pc, #56]	@ (800c048 <__ulp+0x3c>)
 800c00e:	400b      	ands	r3, r1
 800c010:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c014:	2b00      	cmp	r3, #0
 800c016:	dc08      	bgt.n	800c02a <__ulp+0x1e>
 800c018:	425b      	negs	r3, r3
 800c01a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c01e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c022:	da04      	bge.n	800c02e <__ulp+0x22>
 800c024:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c028:	4113      	asrs	r3, r2
 800c02a:	2200      	movs	r2, #0
 800c02c:	e008      	b.n	800c040 <__ulp+0x34>
 800c02e:	f1a2 0314 	sub.w	r3, r2, #20
 800c032:	2b1e      	cmp	r3, #30
 800c034:	bfd6      	itet	le
 800c036:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c03a:	2201      	movgt	r2, #1
 800c03c:	40da      	lsrle	r2, r3
 800c03e:	2300      	movs	r3, #0
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	7ff00000 	.word	0x7ff00000

0800c04c <__b2d>:
 800c04c:	6902      	ldr	r2, [r0, #16]
 800c04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c050:	f100 0614 	add.w	r6, r0, #20
 800c054:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c058:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800c05c:	4f1e      	ldr	r7, [pc, #120]	@ (800c0d8 <__b2d+0x8c>)
 800c05e:	4620      	mov	r0, r4
 800c060:	f7ff fd5a 	bl	800bb18 <__hi0bits>
 800c064:	4603      	mov	r3, r0
 800c066:	f1c0 0020 	rsb	r0, r0, #32
 800c06a:	2b0a      	cmp	r3, #10
 800c06c:	f1a2 0504 	sub.w	r5, r2, #4
 800c070:	6008      	str	r0, [r1, #0]
 800c072:	dc12      	bgt.n	800c09a <__b2d+0x4e>
 800c074:	42ae      	cmp	r6, r5
 800c076:	bf2c      	ite	cs
 800c078:	2200      	movcs	r2, #0
 800c07a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c07e:	f1c3 0c0b 	rsb	ip, r3, #11
 800c082:	3315      	adds	r3, #21
 800c084:	fa24 fe0c 	lsr.w	lr, r4, ip
 800c088:	fa04 f303 	lsl.w	r3, r4, r3
 800c08c:	fa22 f20c 	lsr.w	r2, r2, ip
 800c090:	ea4e 0107 	orr.w	r1, lr, r7
 800c094:	431a      	orrs	r2, r3
 800c096:	4610      	mov	r0, r2
 800c098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c09a:	42ae      	cmp	r6, r5
 800c09c:	bf36      	itet	cc
 800c09e:	f1a2 0508 	subcc.w	r5, r2, #8
 800c0a2:	2200      	movcs	r2, #0
 800c0a4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c0a8:	3b0b      	subs	r3, #11
 800c0aa:	d012      	beq.n	800c0d2 <__b2d+0x86>
 800c0ac:	f1c3 0720 	rsb	r7, r3, #32
 800c0b0:	fa22 f107 	lsr.w	r1, r2, r7
 800c0b4:	409c      	lsls	r4, r3
 800c0b6:	430c      	orrs	r4, r1
 800c0b8:	42b5      	cmp	r5, r6
 800c0ba:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800c0be:	bf94      	ite	ls
 800c0c0:	2400      	movls	r4, #0
 800c0c2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800c0c6:	409a      	lsls	r2, r3
 800c0c8:	40fc      	lsrs	r4, r7
 800c0ca:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c0ce:	4322      	orrs	r2, r4
 800c0d0:	e7e1      	b.n	800c096 <__b2d+0x4a>
 800c0d2:	ea44 0107 	orr.w	r1, r4, r7
 800c0d6:	e7de      	b.n	800c096 <__b2d+0x4a>
 800c0d8:	3ff00000 	.word	0x3ff00000

0800c0dc <__d2b>:
 800c0dc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	4690      	mov	r8, r2
 800c0e4:	4699      	mov	r9, r3
 800c0e6:	9e08      	ldr	r6, [sp, #32]
 800c0e8:	f7ff fc24 	bl	800b934 <_Balloc>
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	b930      	cbnz	r0, 800c0fe <__d2b+0x22>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	f240 310f 	movw	r1, #783	@ 0x30f
 800c0f6:	4b23      	ldr	r3, [pc, #140]	@ (800c184 <__d2b+0xa8>)
 800c0f8:	4823      	ldr	r0, [pc, #140]	@ (800c188 <__d2b+0xac>)
 800c0fa:	f001 fd13 	bl	800db24 <__assert_func>
 800c0fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c102:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c106:	b10d      	cbz	r5, 800c10c <__d2b+0x30>
 800c108:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	f1b8 0300 	subs.w	r3, r8, #0
 800c112:	d024      	beq.n	800c15e <__d2b+0x82>
 800c114:	4668      	mov	r0, sp
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	f7ff fd1d 	bl	800bb56 <__lo0bits>
 800c11c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c120:	b1d8      	cbz	r0, 800c15a <__d2b+0x7e>
 800c122:	f1c0 0320 	rsb	r3, r0, #32
 800c126:	fa02 f303 	lsl.w	r3, r2, r3
 800c12a:	430b      	orrs	r3, r1
 800c12c:	40c2      	lsrs	r2, r0
 800c12e:	6163      	str	r3, [r4, #20]
 800c130:	9201      	str	r2, [sp, #4]
 800c132:	9b01      	ldr	r3, [sp, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	bf0c      	ite	eq
 800c138:	2201      	moveq	r2, #1
 800c13a:	2202      	movne	r2, #2
 800c13c:	61a3      	str	r3, [r4, #24]
 800c13e:	6122      	str	r2, [r4, #16]
 800c140:	b1ad      	cbz	r5, 800c16e <__d2b+0x92>
 800c142:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c146:	4405      	add	r5, r0
 800c148:	6035      	str	r5, [r6, #0]
 800c14a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c150:	6018      	str	r0, [r3, #0]
 800c152:	4620      	mov	r0, r4
 800c154:	b002      	add	sp, #8
 800c156:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c15a:	6161      	str	r1, [r4, #20]
 800c15c:	e7e9      	b.n	800c132 <__d2b+0x56>
 800c15e:	a801      	add	r0, sp, #4
 800c160:	f7ff fcf9 	bl	800bb56 <__lo0bits>
 800c164:	9b01      	ldr	r3, [sp, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	6163      	str	r3, [r4, #20]
 800c16a:	3020      	adds	r0, #32
 800c16c:	e7e7      	b.n	800c13e <__d2b+0x62>
 800c16e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c172:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c176:	6030      	str	r0, [r6, #0]
 800c178:	6918      	ldr	r0, [r3, #16]
 800c17a:	f7ff fccd 	bl	800bb18 <__hi0bits>
 800c17e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c182:	e7e4      	b.n	800c14e <__d2b+0x72>
 800c184:	0800ea3d 	.word	0x0800ea3d
 800c188:	0800ea4e 	.word	0x0800ea4e

0800c18c <__ratio>:
 800c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	b085      	sub	sp, #20
 800c192:	e9cd 1000 	strd	r1, r0, [sp]
 800c196:	a902      	add	r1, sp, #8
 800c198:	f7ff ff58 	bl	800c04c <__b2d>
 800c19c:	468b      	mov	fp, r1
 800c19e:	4606      	mov	r6, r0
 800c1a0:	460f      	mov	r7, r1
 800c1a2:	9800      	ldr	r0, [sp, #0]
 800c1a4:	a903      	add	r1, sp, #12
 800c1a6:	f7ff ff51 	bl	800c04c <__b2d>
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	9b01      	ldr	r3, [sp, #4]
 800c1ae:	4689      	mov	r9, r1
 800c1b0:	6919      	ldr	r1, [r3, #16]
 800c1b2:	9b00      	ldr	r3, [sp, #0]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	1ac9      	subs	r1, r1, r3
 800c1bc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c1c0:	1a9b      	subs	r3, r3, r2
 800c1c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bfcd      	iteet	gt
 800c1ca:	463a      	movgt	r2, r7
 800c1cc:	462a      	movle	r2, r5
 800c1ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1d2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c1d6:	bfd8      	it	le
 800c1d8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c1dc:	464b      	mov	r3, r9
 800c1de:	4622      	mov	r2, r4
 800c1e0:	4659      	mov	r1, fp
 800c1e2:	f7f4 faa3 	bl	800072c <__aeabi_ddiv>
 800c1e6:	b005      	add	sp, #20
 800c1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1ec <__copybits>:
 800c1ec:	3901      	subs	r1, #1
 800c1ee:	b570      	push	{r4, r5, r6, lr}
 800c1f0:	1149      	asrs	r1, r1, #5
 800c1f2:	6914      	ldr	r4, [r2, #16]
 800c1f4:	3101      	adds	r1, #1
 800c1f6:	f102 0314 	add.w	r3, r2, #20
 800c1fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c202:	1f05      	subs	r5, r0, #4
 800c204:	42a3      	cmp	r3, r4
 800c206:	d30c      	bcc.n	800c222 <__copybits+0x36>
 800c208:	1aa3      	subs	r3, r4, r2
 800c20a:	3b11      	subs	r3, #17
 800c20c:	f023 0303 	bic.w	r3, r3, #3
 800c210:	3211      	adds	r2, #17
 800c212:	42a2      	cmp	r2, r4
 800c214:	bf88      	it	hi
 800c216:	2300      	movhi	r3, #0
 800c218:	4418      	add	r0, r3
 800c21a:	2300      	movs	r3, #0
 800c21c:	4288      	cmp	r0, r1
 800c21e:	d305      	bcc.n	800c22c <__copybits+0x40>
 800c220:	bd70      	pop	{r4, r5, r6, pc}
 800c222:	f853 6b04 	ldr.w	r6, [r3], #4
 800c226:	f845 6f04 	str.w	r6, [r5, #4]!
 800c22a:	e7eb      	b.n	800c204 <__copybits+0x18>
 800c22c:	f840 3b04 	str.w	r3, [r0], #4
 800c230:	e7f4      	b.n	800c21c <__copybits+0x30>

0800c232 <__any_on>:
 800c232:	f100 0214 	add.w	r2, r0, #20
 800c236:	6900      	ldr	r0, [r0, #16]
 800c238:	114b      	asrs	r3, r1, #5
 800c23a:	4298      	cmp	r0, r3
 800c23c:	b510      	push	{r4, lr}
 800c23e:	db11      	blt.n	800c264 <__any_on+0x32>
 800c240:	dd0a      	ble.n	800c258 <__any_on+0x26>
 800c242:	f011 011f 	ands.w	r1, r1, #31
 800c246:	d007      	beq.n	800c258 <__any_on+0x26>
 800c248:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c24c:	fa24 f001 	lsr.w	r0, r4, r1
 800c250:	fa00 f101 	lsl.w	r1, r0, r1
 800c254:	428c      	cmp	r4, r1
 800c256:	d10b      	bne.n	800c270 <__any_on+0x3e>
 800c258:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d803      	bhi.n	800c268 <__any_on+0x36>
 800c260:	2000      	movs	r0, #0
 800c262:	bd10      	pop	{r4, pc}
 800c264:	4603      	mov	r3, r0
 800c266:	e7f7      	b.n	800c258 <__any_on+0x26>
 800c268:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d0f5      	beq.n	800c25c <__any_on+0x2a>
 800c270:	2001      	movs	r0, #1
 800c272:	e7f6      	b.n	800c262 <__any_on+0x30>

0800c274 <sulp>:
 800c274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c278:	460f      	mov	r7, r1
 800c27a:	4690      	mov	r8, r2
 800c27c:	f7ff fec6 	bl	800c00c <__ulp>
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	f1b8 0f00 	cmp.w	r8, #0
 800c288:	d011      	beq.n	800c2ae <sulp+0x3a>
 800c28a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c28e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c292:	2b00      	cmp	r3, #0
 800c294:	dd0b      	ble.n	800c2ae <sulp+0x3a>
 800c296:	2400      	movs	r4, #0
 800c298:	051b      	lsls	r3, r3, #20
 800c29a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c29e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	f7f4 f917 	bl	80004d8 <__aeabi_dmul>
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c2b8 <_strtod_l>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	b09f      	sub	sp, #124	@ 0x7c
 800c2be:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c2c6:	f04f 0a00 	mov.w	sl, #0
 800c2ca:	f04f 0b00 	mov.w	fp, #0
 800c2ce:	460a      	mov	r2, r1
 800c2d0:	9005      	str	r0, [sp, #20]
 800c2d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2d4:	7811      	ldrb	r1, [r2, #0]
 800c2d6:	292b      	cmp	r1, #43	@ 0x2b
 800c2d8:	d048      	beq.n	800c36c <_strtod_l+0xb4>
 800c2da:	d836      	bhi.n	800c34a <_strtod_l+0x92>
 800c2dc:	290d      	cmp	r1, #13
 800c2de:	d830      	bhi.n	800c342 <_strtod_l+0x8a>
 800c2e0:	2908      	cmp	r1, #8
 800c2e2:	d830      	bhi.n	800c346 <_strtod_l+0x8e>
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d039      	beq.n	800c35c <_strtod_l+0xa4>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c2ee:	782a      	ldrb	r2, [r5, #0]
 800c2f0:	2a30      	cmp	r2, #48	@ 0x30
 800c2f2:	f040 80b0 	bne.w	800c456 <_strtod_l+0x19e>
 800c2f6:	786a      	ldrb	r2, [r5, #1]
 800c2f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c2fc:	2a58      	cmp	r2, #88	@ 0x58
 800c2fe:	d16c      	bne.n	800c3da <_strtod_l+0x122>
 800c300:	9302      	str	r3, [sp, #8]
 800c302:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c304:	4a8f      	ldr	r2, [pc, #572]	@ (800c544 <_strtod_l+0x28c>)
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	ab1a      	add	r3, sp, #104	@ 0x68
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	9805      	ldr	r0, [sp, #20]
 800c30e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c310:	a919      	add	r1, sp, #100	@ 0x64
 800c312:	f001 fca1 	bl	800dc58 <__gethex>
 800c316:	f010 060f 	ands.w	r6, r0, #15
 800c31a:	4604      	mov	r4, r0
 800c31c:	d005      	beq.n	800c32a <_strtod_l+0x72>
 800c31e:	2e06      	cmp	r6, #6
 800c320:	d126      	bne.n	800c370 <_strtod_l+0xb8>
 800c322:	2300      	movs	r3, #0
 800c324:	3501      	adds	r5, #1
 800c326:	9519      	str	r5, [sp, #100]	@ 0x64
 800c328:	930e      	str	r3, [sp, #56]	@ 0x38
 800c32a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f040 8582 	bne.w	800ce36 <_strtod_l+0xb7e>
 800c332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c334:	b1bb      	cbz	r3, 800c366 <_strtod_l+0xae>
 800c336:	4650      	mov	r0, sl
 800c338:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c33c:	b01f      	add	sp, #124	@ 0x7c
 800c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c342:	2920      	cmp	r1, #32
 800c344:	d1d0      	bne.n	800c2e8 <_strtod_l+0x30>
 800c346:	3201      	adds	r2, #1
 800c348:	e7c3      	b.n	800c2d2 <_strtod_l+0x1a>
 800c34a:	292d      	cmp	r1, #45	@ 0x2d
 800c34c:	d1cc      	bne.n	800c2e8 <_strtod_l+0x30>
 800c34e:	2101      	movs	r1, #1
 800c350:	910e      	str	r1, [sp, #56]	@ 0x38
 800c352:	1c51      	adds	r1, r2, #1
 800c354:	9119      	str	r1, [sp, #100]	@ 0x64
 800c356:	7852      	ldrb	r2, [r2, #1]
 800c358:	2a00      	cmp	r2, #0
 800c35a:	d1c7      	bne.n	800c2ec <_strtod_l+0x34>
 800c35c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c35e:	9419      	str	r4, [sp, #100]	@ 0x64
 800c360:	2b00      	cmp	r3, #0
 800c362:	f040 8566 	bne.w	800ce32 <_strtod_l+0xb7a>
 800c366:	4650      	mov	r0, sl
 800c368:	4659      	mov	r1, fp
 800c36a:	e7e7      	b.n	800c33c <_strtod_l+0x84>
 800c36c:	2100      	movs	r1, #0
 800c36e:	e7ef      	b.n	800c350 <_strtod_l+0x98>
 800c370:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c372:	b13a      	cbz	r2, 800c384 <_strtod_l+0xcc>
 800c374:	2135      	movs	r1, #53	@ 0x35
 800c376:	a81c      	add	r0, sp, #112	@ 0x70
 800c378:	f7ff ff38 	bl	800c1ec <__copybits>
 800c37c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c37e:	9805      	ldr	r0, [sp, #20]
 800c380:	f7ff fb18 	bl	800b9b4 <_Bfree>
 800c384:	3e01      	subs	r6, #1
 800c386:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c388:	2e04      	cmp	r6, #4
 800c38a:	d806      	bhi.n	800c39a <_strtod_l+0xe2>
 800c38c:	e8df f006 	tbb	[pc, r6]
 800c390:	201d0314 	.word	0x201d0314
 800c394:	14          	.byte	0x14
 800c395:	00          	.byte	0x00
 800c396:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c39a:	05e1      	lsls	r1, r4, #23
 800c39c:	bf48      	it	mi
 800c39e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c3a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3a6:	0d1b      	lsrs	r3, r3, #20
 800c3a8:	051b      	lsls	r3, r3, #20
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1bd      	bne.n	800c32a <_strtod_l+0x72>
 800c3ae:	f7fe fb25 	bl	800a9fc <__errno>
 800c3b2:	2322      	movs	r3, #34	@ 0x22
 800c3b4:	6003      	str	r3, [r0, #0]
 800c3b6:	e7b8      	b.n	800c32a <_strtod_l+0x72>
 800c3b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c3bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c3c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c3c4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c3c8:	e7e7      	b.n	800c39a <_strtod_l+0xe2>
 800c3ca:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c548 <_strtod_l+0x290>
 800c3ce:	e7e4      	b.n	800c39a <_strtod_l+0xe2>
 800c3d0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c3d4:	f04f 3aff 	mov.w	sl, #4294967295
 800c3d8:	e7df      	b.n	800c39a <_strtod_l+0xe2>
 800c3da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3e0:	785b      	ldrb	r3, [r3, #1]
 800c3e2:	2b30      	cmp	r3, #48	@ 0x30
 800c3e4:	d0f9      	beq.n	800c3da <_strtod_l+0x122>
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d09f      	beq.n	800c32a <_strtod_l+0x72>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	2700      	movs	r7, #0
 800c3ee:	220a      	movs	r2, #10
 800c3f0:	46b9      	mov	r9, r7
 800c3f2:	9308      	str	r3, [sp, #32]
 800c3f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3f6:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c3f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3fa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c3fc:	7805      	ldrb	r5, [r0, #0]
 800c3fe:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c402:	b2d9      	uxtb	r1, r3
 800c404:	2909      	cmp	r1, #9
 800c406:	d928      	bls.n	800c45a <_strtod_l+0x1a2>
 800c408:	2201      	movs	r2, #1
 800c40a:	4950      	ldr	r1, [pc, #320]	@ (800c54c <_strtod_l+0x294>)
 800c40c:	f001 fb53 	bl	800dab6 <strncmp>
 800c410:	2800      	cmp	r0, #0
 800c412:	d032      	beq.n	800c47a <_strtod_l+0x1c2>
 800c414:	2000      	movs	r0, #0
 800c416:	462a      	mov	r2, r5
 800c418:	4603      	mov	r3, r0
 800c41a:	464d      	mov	r5, r9
 800c41c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c41e:	2a65      	cmp	r2, #101	@ 0x65
 800c420:	d001      	beq.n	800c426 <_strtod_l+0x16e>
 800c422:	2a45      	cmp	r2, #69	@ 0x45
 800c424:	d114      	bne.n	800c450 <_strtod_l+0x198>
 800c426:	b91d      	cbnz	r5, 800c430 <_strtod_l+0x178>
 800c428:	9a08      	ldr	r2, [sp, #32]
 800c42a:	4302      	orrs	r2, r0
 800c42c:	d096      	beq.n	800c35c <_strtod_l+0xa4>
 800c42e:	2500      	movs	r5, #0
 800c430:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c432:	1c62      	adds	r2, r4, #1
 800c434:	9219      	str	r2, [sp, #100]	@ 0x64
 800c436:	7862      	ldrb	r2, [r4, #1]
 800c438:	2a2b      	cmp	r2, #43	@ 0x2b
 800c43a:	d07a      	beq.n	800c532 <_strtod_l+0x27a>
 800c43c:	2a2d      	cmp	r2, #45	@ 0x2d
 800c43e:	d07e      	beq.n	800c53e <_strtod_l+0x286>
 800c440:	f04f 0c00 	mov.w	ip, #0
 800c444:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c448:	2909      	cmp	r1, #9
 800c44a:	f240 8085 	bls.w	800c558 <_strtod_l+0x2a0>
 800c44e:	9419      	str	r4, [sp, #100]	@ 0x64
 800c450:	f04f 0800 	mov.w	r8, #0
 800c454:	e0a5      	b.n	800c5a2 <_strtod_l+0x2ea>
 800c456:	2300      	movs	r3, #0
 800c458:	e7c8      	b.n	800c3ec <_strtod_l+0x134>
 800c45a:	f1b9 0f08 	cmp.w	r9, #8
 800c45e:	bfd8      	it	le
 800c460:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c462:	f100 0001 	add.w	r0, r0, #1
 800c466:	bfd6      	itet	le
 800c468:	fb02 3301 	mlale	r3, r2, r1, r3
 800c46c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c470:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c472:	f109 0901 	add.w	r9, r9, #1
 800c476:	9019      	str	r0, [sp, #100]	@ 0x64
 800c478:	e7bf      	b.n	800c3fa <_strtod_l+0x142>
 800c47a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c47c:	1c5a      	adds	r2, r3, #1
 800c47e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c480:	785a      	ldrb	r2, [r3, #1]
 800c482:	f1b9 0f00 	cmp.w	r9, #0
 800c486:	d03b      	beq.n	800c500 <_strtod_l+0x248>
 800c488:	464d      	mov	r5, r9
 800c48a:	900a      	str	r0, [sp, #40]	@ 0x28
 800c48c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c490:	2b09      	cmp	r3, #9
 800c492:	d912      	bls.n	800c4ba <_strtod_l+0x202>
 800c494:	2301      	movs	r3, #1
 800c496:	e7c2      	b.n	800c41e <_strtod_l+0x166>
 800c498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c49a:	3001      	adds	r0, #1
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4a0:	785a      	ldrb	r2, [r3, #1]
 800c4a2:	2a30      	cmp	r2, #48	@ 0x30
 800c4a4:	d0f8      	beq.n	800c498 <_strtod_l+0x1e0>
 800c4a6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c4aa:	2b08      	cmp	r3, #8
 800c4ac:	f200 84c8 	bhi.w	800ce40 <_strtod_l+0xb88>
 800c4b0:	900a      	str	r0, [sp, #40]	@ 0x28
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	4605      	mov	r5, r0
 800c4b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4ba:	3a30      	subs	r2, #48	@ 0x30
 800c4bc:	f100 0301 	add.w	r3, r0, #1
 800c4c0:	d018      	beq.n	800c4f4 <_strtod_l+0x23c>
 800c4c2:	462e      	mov	r6, r5
 800c4c4:	f04f 0e0a 	mov.w	lr, #10
 800c4c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4ca:	4419      	add	r1, r3
 800c4cc:	910a      	str	r1, [sp, #40]	@ 0x28
 800c4ce:	1c71      	adds	r1, r6, #1
 800c4d0:	eba1 0c05 	sub.w	ip, r1, r5
 800c4d4:	4563      	cmp	r3, ip
 800c4d6:	dc15      	bgt.n	800c504 <_strtod_l+0x24c>
 800c4d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c4dc:	182b      	adds	r3, r5, r0
 800c4de:	2b08      	cmp	r3, #8
 800c4e0:	f105 0501 	add.w	r5, r5, #1
 800c4e4:	4405      	add	r5, r0
 800c4e6:	dc1a      	bgt.n	800c51e <_strtod_l+0x266>
 800c4e8:	230a      	movs	r3, #10
 800c4ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4ec:	fb03 2301 	mla	r3, r3, r1, r2
 800c4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	1c51      	adds	r1, r2, #1
 800c4fa:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4fc:	7852      	ldrb	r2, [r2, #1]
 800c4fe:	e7c5      	b.n	800c48c <_strtod_l+0x1d4>
 800c500:	4648      	mov	r0, r9
 800c502:	e7ce      	b.n	800c4a2 <_strtod_l+0x1ea>
 800c504:	2e08      	cmp	r6, #8
 800c506:	dc05      	bgt.n	800c514 <_strtod_l+0x25c>
 800c508:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c50a:	fb0e f606 	mul.w	r6, lr, r6
 800c50e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c510:	460e      	mov	r6, r1
 800c512:	e7dc      	b.n	800c4ce <_strtod_l+0x216>
 800c514:	2910      	cmp	r1, #16
 800c516:	bfd8      	it	le
 800c518:	fb0e f707 	mulle.w	r7, lr, r7
 800c51c:	e7f8      	b.n	800c510 <_strtod_l+0x258>
 800c51e:	2b0f      	cmp	r3, #15
 800c520:	bfdc      	itt	le
 800c522:	230a      	movle	r3, #10
 800c524:	fb03 2707 	mlale	r7, r3, r7, r2
 800c528:	e7e3      	b.n	800c4f2 <_strtod_l+0x23a>
 800c52a:	2300      	movs	r3, #0
 800c52c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c52e:	2301      	movs	r3, #1
 800c530:	e77a      	b.n	800c428 <_strtod_l+0x170>
 800c532:	f04f 0c00 	mov.w	ip, #0
 800c536:	1ca2      	adds	r2, r4, #2
 800c538:	9219      	str	r2, [sp, #100]	@ 0x64
 800c53a:	78a2      	ldrb	r2, [r4, #2]
 800c53c:	e782      	b.n	800c444 <_strtod_l+0x18c>
 800c53e:	f04f 0c01 	mov.w	ip, #1
 800c542:	e7f8      	b.n	800c536 <_strtod_l+0x27e>
 800c544:	0800ec8c 	.word	0x0800ec8c
 800c548:	7ff00000 	.word	0x7ff00000
 800c54c:	0800eaa7 	.word	0x0800eaa7
 800c550:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c552:	1c51      	adds	r1, r2, #1
 800c554:	9119      	str	r1, [sp, #100]	@ 0x64
 800c556:	7852      	ldrb	r2, [r2, #1]
 800c558:	2a30      	cmp	r2, #48	@ 0x30
 800c55a:	d0f9      	beq.n	800c550 <_strtod_l+0x298>
 800c55c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c560:	2908      	cmp	r1, #8
 800c562:	f63f af75 	bhi.w	800c450 <_strtod_l+0x198>
 800c566:	f04f 080a 	mov.w	r8, #10
 800c56a:	3a30      	subs	r2, #48	@ 0x30
 800c56c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c56e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c570:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c572:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c574:	1c56      	adds	r6, r2, #1
 800c576:	9619      	str	r6, [sp, #100]	@ 0x64
 800c578:	7852      	ldrb	r2, [r2, #1]
 800c57a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c57e:	f1be 0f09 	cmp.w	lr, #9
 800c582:	d939      	bls.n	800c5f8 <_strtod_l+0x340>
 800c584:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c586:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c58a:	1a76      	subs	r6, r6, r1
 800c58c:	2e08      	cmp	r6, #8
 800c58e:	dc03      	bgt.n	800c598 <_strtod_l+0x2e0>
 800c590:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c592:	4588      	cmp	r8, r1
 800c594:	bfa8      	it	ge
 800c596:	4688      	movge	r8, r1
 800c598:	f1bc 0f00 	cmp.w	ip, #0
 800c59c:	d001      	beq.n	800c5a2 <_strtod_l+0x2ea>
 800c59e:	f1c8 0800 	rsb	r8, r8, #0
 800c5a2:	2d00      	cmp	r5, #0
 800c5a4:	d14e      	bne.n	800c644 <_strtod_l+0x38c>
 800c5a6:	9908      	ldr	r1, [sp, #32]
 800c5a8:	4308      	orrs	r0, r1
 800c5aa:	f47f aebe 	bne.w	800c32a <_strtod_l+0x72>
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f47f aed4 	bne.w	800c35c <_strtod_l+0xa4>
 800c5b4:	2a69      	cmp	r2, #105	@ 0x69
 800c5b6:	d028      	beq.n	800c60a <_strtod_l+0x352>
 800c5b8:	dc25      	bgt.n	800c606 <_strtod_l+0x34e>
 800c5ba:	2a49      	cmp	r2, #73	@ 0x49
 800c5bc:	d025      	beq.n	800c60a <_strtod_l+0x352>
 800c5be:	2a4e      	cmp	r2, #78	@ 0x4e
 800c5c0:	f47f aecc 	bne.w	800c35c <_strtod_l+0xa4>
 800c5c4:	4999      	ldr	r1, [pc, #612]	@ (800c82c <_strtod_l+0x574>)
 800c5c6:	a819      	add	r0, sp, #100	@ 0x64
 800c5c8:	f001 fd68 	bl	800e09c <__match>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f43f aec5 	beq.w	800c35c <_strtod_l+0xa4>
 800c5d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	2b28      	cmp	r3, #40	@ 0x28
 800c5d8:	d12e      	bne.n	800c638 <_strtod_l+0x380>
 800c5da:	4995      	ldr	r1, [pc, #596]	@ (800c830 <_strtod_l+0x578>)
 800c5dc:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5de:	a819      	add	r0, sp, #100	@ 0x64
 800c5e0:	f001 fd70 	bl	800e0c4 <__hexnan>
 800c5e4:	2805      	cmp	r0, #5
 800c5e6:	d127      	bne.n	800c638 <_strtod_l+0x380>
 800c5e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c5ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c5ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c5f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c5f6:	e698      	b.n	800c32a <_strtod_l+0x72>
 800c5f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5fa:	fb08 2101 	mla	r1, r8, r1, r2
 800c5fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c602:	9209      	str	r2, [sp, #36]	@ 0x24
 800c604:	e7b5      	b.n	800c572 <_strtod_l+0x2ba>
 800c606:	2a6e      	cmp	r2, #110	@ 0x6e
 800c608:	e7da      	b.n	800c5c0 <_strtod_l+0x308>
 800c60a:	498a      	ldr	r1, [pc, #552]	@ (800c834 <_strtod_l+0x57c>)
 800c60c:	a819      	add	r0, sp, #100	@ 0x64
 800c60e:	f001 fd45 	bl	800e09c <__match>
 800c612:	2800      	cmp	r0, #0
 800c614:	f43f aea2 	beq.w	800c35c <_strtod_l+0xa4>
 800c618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c61a:	4987      	ldr	r1, [pc, #540]	@ (800c838 <_strtod_l+0x580>)
 800c61c:	3b01      	subs	r3, #1
 800c61e:	a819      	add	r0, sp, #100	@ 0x64
 800c620:	9319      	str	r3, [sp, #100]	@ 0x64
 800c622:	f001 fd3b 	bl	800e09c <__match>
 800c626:	b910      	cbnz	r0, 800c62e <_strtod_l+0x376>
 800c628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c62a:	3301      	adds	r3, #1
 800c62c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c62e:	f04f 0a00 	mov.w	sl, #0
 800c632:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800c83c <_strtod_l+0x584>
 800c636:	e678      	b.n	800c32a <_strtod_l+0x72>
 800c638:	4881      	ldr	r0, [pc, #516]	@ (800c840 <_strtod_l+0x588>)
 800c63a:	f001 fa6d 	bl	800db18 <nan>
 800c63e:	4682      	mov	sl, r0
 800c640:	468b      	mov	fp, r1
 800c642:	e672      	b.n	800c32a <_strtod_l+0x72>
 800c644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c646:	f1b9 0f00 	cmp.w	r9, #0
 800c64a:	bf08      	it	eq
 800c64c:	46a9      	moveq	r9, r5
 800c64e:	eba8 0303 	sub.w	r3, r8, r3
 800c652:	2d10      	cmp	r5, #16
 800c654:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c656:	462c      	mov	r4, r5
 800c658:	9309      	str	r3, [sp, #36]	@ 0x24
 800c65a:	bfa8      	it	ge
 800c65c:	2410      	movge	r4, #16
 800c65e:	f7f3 fec1 	bl	80003e4 <__aeabi_ui2d>
 800c662:	2d09      	cmp	r5, #9
 800c664:	4682      	mov	sl, r0
 800c666:	468b      	mov	fp, r1
 800c668:	dc11      	bgt.n	800c68e <_strtod_l+0x3d6>
 800c66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f43f ae5c 	beq.w	800c32a <_strtod_l+0x72>
 800c672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c674:	dd76      	ble.n	800c764 <_strtod_l+0x4ac>
 800c676:	2b16      	cmp	r3, #22
 800c678:	dc5d      	bgt.n	800c736 <_strtod_l+0x47e>
 800c67a:	4972      	ldr	r1, [pc, #456]	@ (800c844 <_strtod_l+0x58c>)
 800c67c:	4652      	mov	r2, sl
 800c67e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c682:	465b      	mov	r3, fp
 800c684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c688:	f7f3 ff26 	bl	80004d8 <__aeabi_dmul>
 800c68c:	e7d7      	b.n	800c63e <_strtod_l+0x386>
 800c68e:	4b6d      	ldr	r3, [pc, #436]	@ (800c844 <_strtod_l+0x58c>)
 800c690:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c694:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c698:	f7f3 ff1e 	bl	80004d8 <__aeabi_dmul>
 800c69c:	4682      	mov	sl, r0
 800c69e:	4638      	mov	r0, r7
 800c6a0:	468b      	mov	fp, r1
 800c6a2:	f7f3 fe9f 	bl	80003e4 <__aeabi_ui2d>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	4659      	mov	r1, fp
 800c6ae:	f7f3 fd5d 	bl	800016c <__adddf3>
 800c6b2:	2d0f      	cmp	r5, #15
 800c6b4:	4682      	mov	sl, r0
 800c6b6:	468b      	mov	fp, r1
 800c6b8:	ddd7      	ble.n	800c66a <_strtod_l+0x3b2>
 800c6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6bc:	1b2c      	subs	r4, r5, r4
 800c6be:	441c      	add	r4, r3
 800c6c0:	2c00      	cmp	r4, #0
 800c6c2:	f340 8093 	ble.w	800c7ec <_strtod_l+0x534>
 800c6c6:	f014 030f 	ands.w	r3, r4, #15
 800c6ca:	d00a      	beq.n	800c6e2 <_strtod_l+0x42a>
 800c6cc:	495d      	ldr	r1, [pc, #372]	@ (800c844 <_strtod_l+0x58c>)
 800c6ce:	4652      	mov	r2, sl
 800c6d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d8:	465b      	mov	r3, fp
 800c6da:	f7f3 fefd 	bl	80004d8 <__aeabi_dmul>
 800c6de:	4682      	mov	sl, r0
 800c6e0:	468b      	mov	fp, r1
 800c6e2:	f034 040f 	bics.w	r4, r4, #15
 800c6e6:	d073      	beq.n	800c7d0 <_strtod_l+0x518>
 800c6e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c6ec:	dd49      	ble.n	800c782 <_strtod_l+0x4ca>
 800c6ee:	2400      	movs	r4, #0
 800c6f0:	46a0      	mov	r8, r4
 800c6f2:	46a1      	mov	r9, r4
 800c6f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c6f6:	2322      	movs	r3, #34	@ 0x22
 800c6f8:	f04f 0a00 	mov.w	sl, #0
 800c6fc:	9a05      	ldr	r2, [sp, #20]
 800c6fe:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800c83c <_strtod_l+0x584>
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c706:	2b00      	cmp	r3, #0
 800c708:	f43f ae0f 	beq.w	800c32a <_strtod_l+0x72>
 800c70c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c70e:	9805      	ldr	r0, [sp, #20]
 800c710:	f7ff f950 	bl	800b9b4 <_Bfree>
 800c714:	4649      	mov	r1, r9
 800c716:	9805      	ldr	r0, [sp, #20]
 800c718:	f7ff f94c 	bl	800b9b4 <_Bfree>
 800c71c:	4641      	mov	r1, r8
 800c71e:	9805      	ldr	r0, [sp, #20]
 800c720:	f7ff f948 	bl	800b9b4 <_Bfree>
 800c724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c726:	9805      	ldr	r0, [sp, #20]
 800c728:	f7ff f944 	bl	800b9b4 <_Bfree>
 800c72c:	4621      	mov	r1, r4
 800c72e:	9805      	ldr	r0, [sp, #20]
 800c730:	f7ff f940 	bl	800b9b4 <_Bfree>
 800c734:	e5f9      	b.n	800c32a <_strtod_l+0x72>
 800c736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c738:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c73c:	4293      	cmp	r3, r2
 800c73e:	dbbc      	blt.n	800c6ba <_strtod_l+0x402>
 800c740:	4c40      	ldr	r4, [pc, #256]	@ (800c844 <_strtod_l+0x58c>)
 800c742:	f1c5 050f 	rsb	r5, r5, #15
 800c746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c74a:	4652      	mov	r2, sl
 800c74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c750:	465b      	mov	r3, fp
 800c752:	f7f3 fec1 	bl	80004d8 <__aeabi_dmul>
 800c756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c758:	1b5d      	subs	r5, r3, r5
 800c75a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c75e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c762:	e791      	b.n	800c688 <_strtod_l+0x3d0>
 800c764:	3316      	adds	r3, #22
 800c766:	dba8      	blt.n	800c6ba <_strtod_l+0x402>
 800c768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c76a:	4650      	mov	r0, sl
 800c76c:	eba3 0808 	sub.w	r8, r3, r8
 800c770:	4b34      	ldr	r3, [pc, #208]	@ (800c844 <_strtod_l+0x58c>)
 800c772:	4659      	mov	r1, fp
 800c774:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c778:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c77c:	f7f3 ffd6 	bl	800072c <__aeabi_ddiv>
 800c780:	e75d      	b.n	800c63e <_strtod_l+0x386>
 800c782:	2300      	movs	r3, #0
 800c784:	4650      	mov	r0, sl
 800c786:	4659      	mov	r1, fp
 800c788:	461e      	mov	r6, r3
 800c78a:	4f2f      	ldr	r7, [pc, #188]	@ (800c848 <_strtod_l+0x590>)
 800c78c:	1124      	asrs	r4, r4, #4
 800c78e:	2c01      	cmp	r4, #1
 800c790:	dc21      	bgt.n	800c7d6 <_strtod_l+0x51e>
 800c792:	b10b      	cbz	r3, 800c798 <_strtod_l+0x4e0>
 800c794:	4682      	mov	sl, r0
 800c796:	468b      	mov	fp, r1
 800c798:	492b      	ldr	r1, [pc, #172]	@ (800c848 <_strtod_l+0x590>)
 800c79a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c79e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c7a2:	4652      	mov	r2, sl
 800c7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a8:	465b      	mov	r3, fp
 800c7aa:	f7f3 fe95 	bl	80004d8 <__aeabi_dmul>
 800c7ae:	4b23      	ldr	r3, [pc, #140]	@ (800c83c <_strtod_l+0x584>)
 800c7b0:	460a      	mov	r2, r1
 800c7b2:	400b      	ands	r3, r1
 800c7b4:	4925      	ldr	r1, [pc, #148]	@ (800c84c <_strtod_l+0x594>)
 800c7b6:	4682      	mov	sl, r0
 800c7b8:	428b      	cmp	r3, r1
 800c7ba:	d898      	bhi.n	800c6ee <_strtod_l+0x436>
 800c7bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c7c0:	428b      	cmp	r3, r1
 800c7c2:	bf86      	itte	hi
 800c7c4:	f04f 3aff 	movhi.w	sl, #4294967295
 800c7c8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800c850 <_strtod_l+0x598>
 800c7cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9308      	str	r3, [sp, #32]
 800c7d4:	e076      	b.n	800c8c4 <_strtod_l+0x60c>
 800c7d6:	07e2      	lsls	r2, r4, #31
 800c7d8:	d504      	bpl.n	800c7e4 <_strtod_l+0x52c>
 800c7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7de:	f7f3 fe7b 	bl	80004d8 <__aeabi_dmul>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	3601      	adds	r6, #1
 800c7e6:	1064      	asrs	r4, r4, #1
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	e7d0      	b.n	800c78e <_strtod_l+0x4d6>
 800c7ec:	d0f0      	beq.n	800c7d0 <_strtod_l+0x518>
 800c7ee:	4264      	negs	r4, r4
 800c7f0:	f014 020f 	ands.w	r2, r4, #15
 800c7f4:	d00a      	beq.n	800c80c <_strtod_l+0x554>
 800c7f6:	4b13      	ldr	r3, [pc, #76]	@ (800c844 <_strtod_l+0x58c>)
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7fe:	4659      	mov	r1, fp
 800c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c804:	f7f3 ff92 	bl	800072c <__aeabi_ddiv>
 800c808:	4682      	mov	sl, r0
 800c80a:	468b      	mov	fp, r1
 800c80c:	1124      	asrs	r4, r4, #4
 800c80e:	d0df      	beq.n	800c7d0 <_strtod_l+0x518>
 800c810:	2c1f      	cmp	r4, #31
 800c812:	dd1f      	ble.n	800c854 <_strtod_l+0x59c>
 800c814:	2400      	movs	r4, #0
 800c816:	46a0      	mov	r8, r4
 800c818:	46a1      	mov	r9, r4
 800c81a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c81c:	2322      	movs	r3, #34	@ 0x22
 800c81e:	9a05      	ldr	r2, [sp, #20]
 800c820:	f04f 0a00 	mov.w	sl, #0
 800c824:	f04f 0b00 	mov.w	fp, #0
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	e76b      	b.n	800c704 <_strtod_l+0x44c>
 800c82c:	0800e997 	.word	0x0800e997
 800c830:	0800ec78 	.word	0x0800ec78
 800c834:	0800e98f 	.word	0x0800e98f
 800c838:	0800e9c4 	.word	0x0800e9c4
 800c83c:	7ff00000 	.word	0x7ff00000
 800c840:	0800eb18 	.word	0x0800eb18
 800c844:	0800ebb0 	.word	0x0800ebb0
 800c848:	0800eb88 	.word	0x0800eb88
 800c84c:	7ca00000 	.word	0x7ca00000
 800c850:	7fefffff 	.word	0x7fefffff
 800c854:	f014 0310 	ands.w	r3, r4, #16
 800c858:	bf18      	it	ne
 800c85a:	236a      	movne	r3, #106	@ 0x6a
 800c85c:	4650      	mov	r0, sl
 800c85e:	9308      	str	r3, [sp, #32]
 800c860:	4659      	mov	r1, fp
 800c862:	2300      	movs	r3, #0
 800c864:	4e77      	ldr	r6, [pc, #476]	@ (800ca44 <_strtod_l+0x78c>)
 800c866:	07e7      	lsls	r7, r4, #31
 800c868:	d504      	bpl.n	800c874 <_strtod_l+0x5bc>
 800c86a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c86e:	f7f3 fe33 	bl	80004d8 <__aeabi_dmul>
 800c872:	2301      	movs	r3, #1
 800c874:	1064      	asrs	r4, r4, #1
 800c876:	f106 0608 	add.w	r6, r6, #8
 800c87a:	d1f4      	bne.n	800c866 <_strtod_l+0x5ae>
 800c87c:	b10b      	cbz	r3, 800c882 <_strtod_l+0x5ca>
 800c87e:	4682      	mov	sl, r0
 800c880:	468b      	mov	fp, r1
 800c882:	9b08      	ldr	r3, [sp, #32]
 800c884:	b1b3      	cbz	r3, 800c8b4 <_strtod_l+0x5fc>
 800c886:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c88a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c88e:	2b00      	cmp	r3, #0
 800c890:	4659      	mov	r1, fp
 800c892:	dd0f      	ble.n	800c8b4 <_strtod_l+0x5fc>
 800c894:	2b1f      	cmp	r3, #31
 800c896:	dd58      	ble.n	800c94a <_strtod_l+0x692>
 800c898:	2b34      	cmp	r3, #52	@ 0x34
 800c89a:	bfd8      	it	le
 800c89c:	f04f 33ff 	movle.w	r3, #4294967295
 800c8a0:	f04f 0a00 	mov.w	sl, #0
 800c8a4:	bfcf      	iteee	gt
 800c8a6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c8aa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c8ae:	4093      	lslle	r3, r2
 800c8b0:	ea03 0b01 	andle.w	fp, r3, r1
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	4650      	mov	r0, sl
 800c8ba:	4659      	mov	r1, fp
 800c8bc:	f7f4 f874 	bl	80009a8 <__aeabi_dcmpeq>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d1a7      	bne.n	800c814 <_strtod_l+0x55c>
 800c8c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8c6:	464a      	mov	r2, r9
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	9805      	ldr	r0, [sp, #20]
 800c8d0:	f7ff f8d8 	bl	800ba84 <__s2b>
 800c8d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f43f af09 	beq.w	800c6ee <_strtod_l+0x436>
 800c8dc:	2400      	movs	r4, #0
 800c8de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8e2:	2a00      	cmp	r2, #0
 800c8e4:	eba3 0308 	sub.w	r3, r3, r8
 800c8e8:	bfa8      	it	ge
 800c8ea:	2300      	movge	r3, #0
 800c8ec:	46a0      	mov	r8, r4
 800c8ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c8f4:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8f8:	9805      	ldr	r0, [sp, #20]
 800c8fa:	6859      	ldr	r1, [r3, #4]
 800c8fc:	f7ff f81a 	bl	800b934 <_Balloc>
 800c900:	4681      	mov	r9, r0
 800c902:	2800      	cmp	r0, #0
 800c904:	f43f aef7 	beq.w	800c6f6 <_strtod_l+0x43e>
 800c908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c90a:	300c      	adds	r0, #12
 800c90c:	691a      	ldr	r2, [r3, #16]
 800c90e:	f103 010c 	add.w	r1, r3, #12
 800c912:	3202      	adds	r2, #2
 800c914:	0092      	lsls	r2, r2, #2
 800c916:	f001 f8f1 	bl	800dafc <memcpy>
 800c91a:	ab1c      	add	r3, sp, #112	@ 0x70
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	4652      	mov	r2, sl
 800c924:	465b      	mov	r3, fp
 800c926:	9805      	ldr	r0, [sp, #20]
 800c928:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c92c:	f7ff fbd6 	bl	800c0dc <__d2b>
 800c930:	901a      	str	r0, [sp, #104]	@ 0x68
 800c932:	2800      	cmp	r0, #0
 800c934:	f43f aedf 	beq.w	800c6f6 <_strtod_l+0x43e>
 800c938:	2101      	movs	r1, #1
 800c93a:	9805      	ldr	r0, [sp, #20]
 800c93c:	f7ff f938 	bl	800bbb0 <__i2b>
 800c940:	4680      	mov	r8, r0
 800c942:	b948      	cbnz	r0, 800c958 <_strtod_l+0x6a0>
 800c944:	f04f 0800 	mov.w	r8, #0
 800c948:	e6d5      	b.n	800c6f6 <_strtod_l+0x43e>
 800c94a:	f04f 32ff 	mov.w	r2, #4294967295
 800c94e:	fa02 f303 	lsl.w	r3, r2, r3
 800c952:	ea03 0a0a 	and.w	sl, r3, sl
 800c956:	e7ad      	b.n	800c8b4 <_strtod_l+0x5fc>
 800c958:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c95a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c95c:	2d00      	cmp	r5, #0
 800c95e:	bfab      	itete	ge
 800c960:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c962:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c964:	18ef      	addge	r7, r5, r3
 800c966:	1b5e      	sublt	r6, r3, r5
 800c968:	9b08      	ldr	r3, [sp, #32]
 800c96a:	bfa8      	it	ge
 800c96c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c96e:	eba5 0503 	sub.w	r5, r5, r3
 800c972:	4415      	add	r5, r2
 800c974:	4b34      	ldr	r3, [pc, #208]	@ (800ca48 <_strtod_l+0x790>)
 800c976:	f105 35ff 	add.w	r5, r5, #4294967295
 800c97a:	bfb8      	it	lt
 800c97c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c97e:	429d      	cmp	r5, r3
 800c980:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c984:	da50      	bge.n	800ca28 <_strtod_l+0x770>
 800c986:	1b5b      	subs	r3, r3, r5
 800c988:	2b1f      	cmp	r3, #31
 800c98a:	f04f 0101 	mov.w	r1, #1
 800c98e:	eba2 0203 	sub.w	r2, r2, r3
 800c992:	dc3d      	bgt.n	800ca10 <_strtod_l+0x758>
 800c994:	fa01 f303 	lsl.w	r3, r1, r3
 800c998:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c99a:	2300      	movs	r3, #0
 800c99c:	9310      	str	r3, [sp, #64]	@ 0x40
 800c99e:	18bd      	adds	r5, r7, r2
 800c9a0:	9b08      	ldr	r3, [sp, #32]
 800c9a2:	42af      	cmp	r7, r5
 800c9a4:	4416      	add	r6, r2
 800c9a6:	441e      	add	r6, r3
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	bfa8      	it	ge
 800c9ac:	462b      	movge	r3, r5
 800c9ae:	42b3      	cmp	r3, r6
 800c9b0:	bfa8      	it	ge
 800c9b2:	4633      	movge	r3, r6
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	bfc2      	ittt	gt
 800c9b8:	1aed      	subgt	r5, r5, r3
 800c9ba:	1af6      	subgt	r6, r6, r3
 800c9bc:	1aff      	subgt	r7, r7, r3
 800c9be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	dd16      	ble.n	800c9f2 <_strtod_l+0x73a>
 800c9c4:	4641      	mov	r1, r8
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	9805      	ldr	r0, [sp, #20]
 800c9ca:	f7ff f9a9 	bl	800bd20 <__pow5mult>
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d0b7      	beq.n	800c944 <_strtod_l+0x68c>
 800c9d4:	4601      	mov	r1, r0
 800c9d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9d8:	9805      	ldr	r0, [sp, #20]
 800c9da:	f7ff f8ff 	bl	800bbdc <__multiply>
 800c9de:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	f43f ae88 	beq.w	800c6f6 <_strtod_l+0x43e>
 800c9e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9e8:	9805      	ldr	r0, [sp, #20]
 800c9ea:	f7fe ffe3 	bl	800b9b4 <_Bfree>
 800c9ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9f2:	2d00      	cmp	r5, #0
 800c9f4:	dc1d      	bgt.n	800ca32 <_strtod_l+0x77a>
 800c9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	dd27      	ble.n	800ca4c <_strtod_l+0x794>
 800c9fc:	4649      	mov	r1, r9
 800c9fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ca00:	9805      	ldr	r0, [sp, #20]
 800ca02:	f7ff f98d 	bl	800bd20 <__pow5mult>
 800ca06:	4681      	mov	r9, r0
 800ca08:	bb00      	cbnz	r0, 800ca4c <_strtod_l+0x794>
 800ca0a:	f04f 0900 	mov.w	r9, #0
 800ca0e:	e672      	b.n	800c6f6 <_strtod_l+0x43e>
 800ca10:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ca14:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ca18:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ca1c:	35e2      	adds	r5, #226	@ 0xe2
 800ca1e:	fa01 f305 	lsl.w	r3, r1, r5
 800ca22:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca24:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ca26:	e7ba      	b.n	800c99e <_strtod_l+0x6e6>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca30:	e7b5      	b.n	800c99e <_strtod_l+0x6e6>
 800ca32:	462a      	mov	r2, r5
 800ca34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca36:	9805      	ldr	r0, [sp, #20]
 800ca38:	f7ff f9cc 	bl	800bdd4 <__lshift>
 800ca3c:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d1d9      	bne.n	800c9f6 <_strtod_l+0x73e>
 800ca42:	e658      	b.n	800c6f6 <_strtod_l+0x43e>
 800ca44:	0800eca0 	.word	0x0800eca0
 800ca48:	fffffc02 	.word	0xfffffc02
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	dd07      	ble.n	800ca60 <_strtod_l+0x7a8>
 800ca50:	4649      	mov	r1, r9
 800ca52:	4632      	mov	r2, r6
 800ca54:	9805      	ldr	r0, [sp, #20]
 800ca56:	f7ff f9bd 	bl	800bdd4 <__lshift>
 800ca5a:	4681      	mov	r9, r0
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d0d4      	beq.n	800ca0a <_strtod_l+0x752>
 800ca60:	2f00      	cmp	r7, #0
 800ca62:	dd08      	ble.n	800ca76 <_strtod_l+0x7be>
 800ca64:	4641      	mov	r1, r8
 800ca66:	463a      	mov	r2, r7
 800ca68:	9805      	ldr	r0, [sp, #20]
 800ca6a:	f7ff f9b3 	bl	800bdd4 <__lshift>
 800ca6e:	4680      	mov	r8, r0
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f43f ae40 	beq.w	800c6f6 <_strtod_l+0x43e>
 800ca76:	464a      	mov	r2, r9
 800ca78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca7a:	9805      	ldr	r0, [sp, #20]
 800ca7c:	f7ff fa32 	bl	800bee4 <__mdiff>
 800ca80:	4604      	mov	r4, r0
 800ca82:	2800      	cmp	r0, #0
 800ca84:	f43f ae37 	beq.w	800c6f6 <_strtod_l+0x43e>
 800ca88:	68c3      	ldr	r3, [r0, #12]
 800ca8a:	4641      	mov	r1, r8
 800ca8c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60c3      	str	r3, [r0, #12]
 800ca92:	f7ff fa0b 	bl	800beac <__mcmp>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	da3d      	bge.n	800cb16 <_strtod_l+0x85e>
 800ca9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca9c:	ea53 030a 	orrs.w	r3, r3, sl
 800caa0:	d163      	bne.n	800cb6a <_strtod_l+0x8b2>
 800caa2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d15f      	bne.n	800cb6a <_strtod_l+0x8b2>
 800caaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800caae:	0d1b      	lsrs	r3, r3, #20
 800cab0:	051b      	lsls	r3, r3, #20
 800cab2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cab6:	d958      	bls.n	800cb6a <_strtod_l+0x8b2>
 800cab8:	6963      	ldr	r3, [r4, #20]
 800caba:	b913      	cbnz	r3, 800cac2 <_strtod_l+0x80a>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	dd53      	ble.n	800cb6a <_strtod_l+0x8b2>
 800cac2:	4621      	mov	r1, r4
 800cac4:	2201      	movs	r2, #1
 800cac6:	9805      	ldr	r0, [sp, #20]
 800cac8:	f7ff f984 	bl	800bdd4 <__lshift>
 800cacc:	4641      	mov	r1, r8
 800cace:	4604      	mov	r4, r0
 800cad0:	f7ff f9ec 	bl	800beac <__mcmp>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	dd48      	ble.n	800cb6a <_strtod_l+0x8b2>
 800cad8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cadc:	9a08      	ldr	r2, [sp, #32]
 800cade:	0d1b      	lsrs	r3, r3, #20
 800cae0:	051b      	lsls	r3, r3, #20
 800cae2:	2a00      	cmp	r2, #0
 800cae4:	d062      	beq.n	800cbac <_strtod_l+0x8f4>
 800cae6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800caea:	d85f      	bhi.n	800cbac <_strtod_l+0x8f4>
 800caec:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800caf0:	f67f ae94 	bls.w	800c81c <_strtod_l+0x564>
 800caf4:	4650      	mov	r0, sl
 800caf6:	4659      	mov	r1, fp
 800caf8:	4ba3      	ldr	r3, [pc, #652]	@ (800cd88 <_strtod_l+0xad0>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	f7f3 fcec 	bl	80004d8 <__aeabi_dmul>
 800cb00:	4ba2      	ldr	r3, [pc, #648]	@ (800cd8c <_strtod_l+0xad4>)
 800cb02:	4682      	mov	sl, r0
 800cb04:	400b      	ands	r3, r1
 800cb06:	468b      	mov	fp, r1
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f47f adff 	bne.w	800c70c <_strtod_l+0x454>
 800cb0e:	2322      	movs	r3, #34	@ 0x22
 800cb10:	9a05      	ldr	r2, [sp, #20]
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	e5fa      	b.n	800c70c <_strtod_l+0x454>
 800cb16:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cb1a:	d165      	bne.n	800cbe8 <_strtod_l+0x930>
 800cb1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cb1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb22:	b35a      	cbz	r2, 800cb7c <_strtod_l+0x8c4>
 800cb24:	4a9a      	ldr	r2, [pc, #616]	@ (800cd90 <_strtod_l+0xad8>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d12b      	bne.n	800cb82 <_strtod_l+0x8ca>
 800cb2a:	9b08      	ldr	r3, [sp, #32]
 800cb2c:	4651      	mov	r1, sl
 800cb2e:	b303      	cbz	r3, 800cb72 <_strtod_l+0x8ba>
 800cb30:	465a      	mov	r2, fp
 800cb32:	4b96      	ldr	r3, [pc, #600]	@ (800cd8c <_strtod_l+0xad4>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb3e:	d81b      	bhi.n	800cb78 <_strtod_l+0x8c0>
 800cb40:	0d1b      	lsrs	r3, r3, #20
 800cb42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb46:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4a:	4299      	cmp	r1, r3
 800cb4c:	d119      	bne.n	800cb82 <_strtod_l+0x8ca>
 800cb4e:	4b91      	ldr	r3, [pc, #580]	@ (800cd94 <_strtod_l+0xadc>)
 800cb50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d102      	bne.n	800cb5c <_strtod_l+0x8a4>
 800cb56:	3101      	adds	r1, #1
 800cb58:	f43f adcd 	beq.w	800c6f6 <_strtod_l+0x43e>
 800cb5c:	f04f 0a00 	mov.w	sl, #0
 800cb60:	4b8a      	ldr	r3, [pc, #552]	@ (800cd8c <_strtod_l+0xad4>)
 800cb62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb64:	401a      	ands	r2, r3
 800cb66:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cb6a:	9b08      	ldr	r3, [sp, #32]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1c1      	bne.n	800caf4 <_strtod_l+0x83c>
 800cb70:	e5cc      	b.n	800c70c <_strtod_l+0x454>
 800cb72:	f04f 33ff 	mov.w	r3, #4294967295
 800cb76:	e7e8      	b.n	800cb4a <_strtod_l+0x892>
 800cb78:	4613      	mov	r3, r2
 800cb7a:	e7e6      	b.n	800cb4a <_strtod_l+0x892>
 800cb7c:	ea53 030a 	orrs.w	r3, r3, sl
 800cb80:	d0aa      	beq.n	800cad8 <_strtod_l+0x820>
 800cb82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb84:	b1db      	cbz	r3, 800cbbe <_strtod_l+0x906>
 800cb86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb88:	4213      	tst	r3, r2
 800cb8a:	d0ee      	beq.n	800cb6a <_strtod_l+0x8b2>
 800cb8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb8e:	4650      	mov	r0, sl
 800cb90:	4659      	mov	r1, fp
 800cb92:	9a08      	ldr	r2, [sp, #32]
 800cb94:	b1bb      	cbz	r3, 800cbc6 <_strtod_l+0x90e>
 800cb96:	f7ff fb6d 	bl	800c274 <sulp>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cba2:	f7f3 fae3 	bl	800016c <__adddf3>
 800cba6:	4682      	mov	sl, r0
 800cba8:	468b      	mov	fp, r1
 800cbaa:	e7de      	b.n	800cb6a <_strtod_l+0x8b2>
 800cbac:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cbb0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cbb4:	f04f 3aff 	mov.w	sl, #4294967295
 800cbb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cbbc:	e7d5      	b.n	800cb6a <_strtod_l+0x8b2>
 800cbbe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cbc0:	ea13 0f0a 	tst.w	r3, sl
 800cbc4:	e7e1      	b.n	800cb8a <_strtod_l+0x8d2>
 800cbc6:	f7ff fb55 	bl	800c274 <sulp>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbd2:	f7f3 fac9 	bl	8000168 <__aeabi_dsub>
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4682      	mov	sl, r0
 800cbdc:	468b      	mov	fp, r1
 800cbde:	f7f3 fee3 	bl	80009a8 <__aeabi_dcmpeq>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0c1      	beq.n	800cb6a <_strtod_l+0x8b2>
 800cbe6:	e619      	b.n	800c81c <_strtod_l+0x564>
 800cbe8:	4641      	mov	r1, r8
 800cbea:	4620      	mov	r0, r4
 800cbec:	f7ff face 	bl	800c18c <__ratio>
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	460f      	mov	r7, r1
 800cbfa:	f7f3 fee9 	bl	80009d0 <__aeabi_dcmple>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	d06d      	beq.n	800ccde <_strtod_l+0xa26>
 800cc02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d178      	bne.n	800ccfa <_strtod_l+0xa42>
 800cc08:	f1ba 0f00 	cmp.w	sl, #0
 800cc0c:	d156      	bne.n	800ccbc <_strtod_l+0xa04>
 800cc0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d158      	bne.n	800ccca <_strtod_l+0xa12>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	4b5e      	ldr	r3, [pc, #376]	@ (800cd98 <_strtod_l+0xae0>)
 800cc20:	f7f3 fecc 	bl	80009bc <__aeabi_dcmplt>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d157      	bne.n	800ccd8 <_strtod_l+0xa20>
 800cc28:	4630      	mov	r0, r6
 800cc2a:	4639      	mov	r1, r7
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4b5b      	ldr	r3, [pc, #364]	@ (800cd9c <_strtod_l+0xae4>)
 800cc30:	f7f3 fc52 	bl	80004d8 <__aeabi_dmul>
 800cc34:	4606      	mov	r6, r0
 800cc36:	460f      	mov	r7, r1
 800cc38:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cc3c:	9606      	str	r6, [sp, #24]
 800cc3e:	9307      	str	r3, [sp, #28]
 800cc40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc44:	4d51      	ldr	r5, [pc, #324]	@ (800cd8c <_strtod_l+0xad4>)
 800cc46:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc4c:	401d      	ands	r5, r3
 800cc4e:	4b54      	ldr	r3, [pc, #336]	@ (800cda0 <_strtod_l+0xae8>)
 800cc50:	429d      	cmp	r5, r3
 800cc52:	f040 80ab 	bne.w	800cdac <_strtod_l+0xaf4>
 800cc56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc58:	4650      	mov	r0, sl
 800cc5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cc5e:	4659      	mov	r1, fp
 800cc60:	f7ff f9d4 	bl	800c00c <__ulp>
 800cc64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc68:	f7f3 fc36 	bl	80004d8 <__aeabi_dmul>
 800cc6c:	4652      	mov	r2, sl
 800cc6e:	465b      	mov	r3, fp
 800cc70:	f7f3 fa7c 	bl	800016c <__adddf3>
 800cc74:	460b      	mov	r3, r1
 800cc76:	4945      	ldr	r1, [pc, #276]	@ (800cd8c <_strtod_l+0xad4>)
 800cc78:	4a4a      	ldr	r2, [pc, #296]	@ (800cda4 <_strtod_l+0xaec>)
 800cc7a:	4019      	ands	r1, r3
 800cc7c:	4291      	cmp	r1, r2
 800cc7e:	4682      	mov	sl, r0
 800cc80:	d942      	bls.n	800cd08 <_strtod_l+0xa50>
 800cc82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc84:	4b43      	ldr	r3, [pc, #268]	@ (800cd94 <_strtod_l+0xadc>)
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d103      	bne.n	800cc92 <_strtod_l+0x9da>
 800cc8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	f43f ad32 	beq.w	800c6f6 <_strtod_l+0x43e>
 800cc92:	f04f 3aff 	mov.w	sl, #4294967295
 800cc96:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800cd94 <_strtod_l+0xadc>
 800cc9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc9c:	9805      	ldr	r0, [sp, #20]
 800cc9e:	f7fe fe89 	bl	800b9b4 <_Bfree>
 800cca2:	4649      	mov	r1, r9
 800cca4:	9805      	ldr	r0, [sp, #20]
 800cca6:	f7fe fe85 	bl	800b9b4 <_Bfree>
 800ccaa:	4641      	mov	r1, r8
 800ccac:	9805      	ldr	r0, [sp, #20]
 800ccae:	f7fe fe81 	bl	800b9b4 <_Bfree>
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	9805      	ldr	r0, [sp, #20]
 800ccb6:	f7fe fe7d 	bl	800b9b4 <_Bfree>
 800ccba:	e61c      	b.n	800c8f6 <_strtod_l+0x63e>
 800ccbc:	f1ba 0f01 	cmp.w	sl, #1
 800ccc0:	d103      	bne.n	800ccca <_strtod_l+0xa12>
 800ccc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f43f ada9 	beq.w	800c81c <_strtod_l+0x564>
 800ccca:	2200      	movs	r2, #0
 800cccc:	4b36      	ldr	r3, [pc, #216]	@ (800cda8 <_strtod_l+0xaf0>)
 800ccce:	2600      	movs	r6, #0
 800ccd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ccd4:	4f30      	ldr	r7, [pc, #192]	@ (800cd98 <_strtod_l+0xae0>)
 800ccd6:	e7b3      	b.n	800cc40 <_strtod_l+0x988>
 800ccd8:	2600      	movs	r6, #0
 800ccda:	4f30      	ldr	r7, [pc, #192]	@ (800cd9c <_strtod_l+0xae4>)
 800ccdc:	e7ac      	b.n	800cc38 <_strtod_l+0x980>
 800ccde:	4630      	mov	r0, r6
 800cce0:	4639      	mov	r1, r7
 800cce2:	4b2e      	ldr	r3, [pc, #184]	@ (800cd9c <_strtod_l+0xae4>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	f7f3 fbf7 	bl	80004d8 <__aeabi_dmul>
 800ccea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccec:	4606      	mov	r6, r0
 800ccee:	460f      	mov	r7, r1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d0a1      	beq.n	800cc38 <_strtod_l+0x980>
 800ccf4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ccf8:	e7a2      	b.n	800cc40 <_strtod_l+0x988>
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	4b26      	ldr	r3, [pc, #152]	@ (800cd98 <_strtod_l+0xae0>)
 800ccfe:	4616      	mov	r6, r2
 800cd00:	461f      	mov	r7, r3
 800cd02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cd06:	e79b      	b.n	800cc40 <_strtod_l+0x988>
 800cd08:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cd0c:	9b08      	ldr	r3, [sp, #32]
 800cd0e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1c1      	bne.n	800cc9a <_strtod_l+0x9e2>
 800cd16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd1a:	0d1b      	lsrs	r3, r3, #20
 800cd1c:	051b      	lsls	r3, r3, #20
 800cd1e:	429d      	cmp	r5, r3
 800cd20:	d1bb      	bne.n	800cc9a <_strtod_l+0x9e2>
 800cd22:	4630      	mov	r0, r6
 800cd24:	4639      	mov	r1, r7
 800cd26:	f7f4 f9f3 	bl	8001110 <__aeabi_d2lz>
 800cd2a:	f7f3 fba7 	bl	800047c <__aeabi_l2d>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4630      	mov	r0, r6
 800cd34:	4639      	mov	r1, r7
 800cd36:	f7f3 fa17 	bl	8000168 <__aeabi_dsub>
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cd42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cd46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd48:	ea46 060a 	orr.w	r6, r6, sl
 800cd4c:	431e      	orrs	r6, r3
 800cd4e:	d06a      	beq.n	800ce26 <_strtod_l+0xb6e>
 800cd50:	a309      	add	r3, pc, #36	@ (adr r3, 800cd78 <_strtod_l+0xac0>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 fe31 	bl	80009bc <__aeabi_dcmplt>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	f47f acd6 	bne.w	800c70c <_strtod_l+0x454>
 800cd60:	a307      	add	r3, pc, #28	@ (adr r3, 800cd80 <_strtod_l+0xac8>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd6a:	f7f3 fe45 	bl	80009f8 <__aeabi_dcmpgt>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d093      	beq.n	800cc9a <_strtod_l+0x9e2>
 800cd72:	e4cb      	b.n	800c70c <_strtod_l+0x454>
 800cd74:	f3af 8000 	nop.w
 800cd78:	94a03595 	.word	0x94a03595
 800cd7c:	3fdfffff 	.word	0x3fdfffff
 800cd80:	35afe535 	.word	0x35afe535
 800cd84:	3fe00000 	.word	0x3fe00000
 800cd88:	39500000 	.word	0x39500000
 800cd8c:	7ff00000 	.word	0x7ff00000
 800cd90:	000fffff 	.word	0x000fffff
 800cd94:	7fefffff 	.word	0x7fefffff
 800cd98:	3ff00000 	.word	0x3ff00000
 800cd9c:	3fe00000 	.word	0x3fe00000
 800cda0:	7fe00000 	.word	0x7fe00000
 800cda4:	7c9fffff 	.word	0x7c9fffff
 800cda8:	bff00000 	.word	0xbff00000
 800cdac:	9b08      	ldr	r3, [sp, #32]
 800cdae:	b323      	cbz	r3, 800cdfa <_strtod_l+0xb42>
 800cdb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cdb4:	d821      	bhi.n	800cdfa <_strtod_l+0xb42>
 800cdb6:	a328      	add	r3, pc, #160	@ (adr r3, 800ce58 <_strtod_l+0xba0>)
 800cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	4639      	mov	r1, r7
 800cdc0:	f7f3 fe06 	bl	80009d0 <__aeabi_dcmple>
 800cdc4:	b1a0      	cbz	r0, 800cdf0 <_strtod_l+0xb38>
 800cdc6:	4639      	mov	r1, r7
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7f3 fe5d 	bl	8000a88 <__aeabi_d2uiz>
 800cdce:	2801      	cmp	r0, #1
 800cdd0:	bf38      	it	cc
 800cdd2:	2001      	movcc	r0, #1
 800cdd4:	f7f3 fb06 	bl	80003e4 <__aeabi_ui2d>
 800cdd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	b9fb      	cbnz	r3, 800ce20 <_strtod_l+0xb68>
 800cde0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cde4:	9014      	str	r0, [sp, #80]	@ 0x50
 800cde6:	9315      	str	r3, [sp, #84]	@ 0x54
 800cde8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cdec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cdf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cdf2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cdf6:	1b5b      	subs	r3, r3, r5
 800cdf8:	9311      	str	r3, [sp, #68]	@ 0x44
 800cdfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdfe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ce02:	f7ff f903 	bl	800c00c <__ulp>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	4659      	mov	r1, fp
 800ce0e:	f7f3 fb63 	bl	80004d8 <__aeabi_dmul>
 800ce12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ce16:	f7f3 f9a9 	bl	800016c <__adddf3>
 800ce1a:	4682      	mov	sl, r0
 800ce1c:	468b      	mov	fp, r1
 800ce1e:	e775      	b.n	800cd0c <_strtod_l+0xa54>
 800ce20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ce24:	e7e0      	b.n	800cde8 <_strtod_l+0xb30>
 800ce26:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce60 <_strtod_l+0xba8>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	f7f3 fdc6 	bl	80009bc <__aeabi_dcmplt>
 800ce30:	e79d      	b.n	800cd6e <_strtod_l+0xab6>
 800ce32:	2300      	movs	r3, #0
 800ce34:	930e      	str	r3, [sp, #56]	@ 0x38
 800ce36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce38:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ce3a:	6013      	str	r3, [r2, #0]
 800ce3c:	f7ff ba79 	b.w	800c332 <_strtod_l+0x7a>
 800ce40:	2a65      	cmp	r2, #101	@ 0x65
 800ce42:	f43f ab72 	beq.w	800c52a <_strtod_l+0x272>
 800ce46:	2a45      	cmp	r2, #69	@ 0x45
 800ce48:	f43f ab6f 	beq.w	800c52a <_strtod_l+0x272>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	f7ff bbaa 	b.w	800c5a6 <_strtod_l+0x2ee>
 800ce52:	bf00      	nop
 800ce54:	f3af 8000 	nop.w
 800ce58:	ffc00000 	.word	0xffc00000
 800ce5c:	41dfffff 	.word	0x41dfffff
 800ce60:	94a03595 	.word	0x94a03595
 800ce64:	3fcfffff 	.word	0x3fcfffff

0800ce68 <_strtod_r>:
 800ce68:	4b01      	ldr	r3, [pc, #4]	@ (800ce70 <_strtod_r+0x8>)
 800ce6a:	f7ff ba25 	b.w	800c2b8 <_strtod_l>
 800ce6e:	bf00      	nop
 800ce70:	200001e0 	.word	0x200001e0

0800ce74 <_strtol_l.isra.0>:
 800ce74:	2b24      	cmp	r3, #36	@ 0x24
 800ce76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce7a:	4686      	mov	lr, r0
 800ce7c:	4690      	mov	r8, r2
 800ce7e:	d801      	bhi.n	800ce84 <_strtol_l.isra.0+0x10>
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d106      	bne.n	800ce92 <_strtol_l.isra.0+0x1e>
 800ce84:	f7fd fdba 	bl	800a9fc <__errno>
 800ce88:	2316      	movs	r3, #22
 800ce8a:	6003      	str	r3, [r0, #0]
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce92:	460d      	mov	r5, r1
 800ce94:	4833      	ldr	r0, [pc, #204]	@ (800cf64 <_strtol_l.isra.0+0xf0>)
 800ce96:	462a      	mov	r2, r5
 800ce98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce9c:	5d06      	ldrb	r6, [r0, r4]
 800ce9e:	f016 0608 	ands.w	r6, r6, #8
 800cea2:	d1f8      	bne.n	800ce96 <_strtol_l.isra.0+0x22>
 800cea4:	2c2d      	cmp	r4, #45	@ 0x2d
 800cea6:	d110      	bne.n	800ceca <_strtol_l.isra.0+0x56>
 800cea8:	2601      	movs	r6, #1
 800ceaa:	782c      	ldrb	r4, [r5, #0]
 800ceac:	1c95      	adds	r5, r2, #2
 800ceae:	f033 0210 	bics.w	r2, r3, #16
 800ceb2:	d115      	bne.n	800cee0 <_strtol_l.isra.0+0x6c>
 800ceb4:	2c30      	cmp	r4, #48	@ 0x30
 800ceb6:	d10d      	bne.n	800ced4 <_strtol_l.isra.0+0x60>
 800ceb8:	782a      	ldrb	r2, [r5, #0]
 800ceba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cebe:	2a58      	cmp	r2, #88	@ 0x58
 800cec0:	d108      	bne.n	800ced4 <_strtol_l.isra.0+0x60>
 800cec2:	786c      	ldrb	r4, [r5, #1]
 800cec4:	3502      	adds	r5, #2
 800cec6:	2310      	movs	r3, #16
 800cec8:	e00a      	b.n	800cee0 <_strtol_l.isra.0+0x6c>
 800ceca:	2c2b      	cmp	r4, #43	@ 0x2b
 800cecc:	bf04      	itt	eq
 800cece:	782c      	ldrbeq	r4, [r5, #0]
 800ced0:	1c95      	addeq	r5, r2, #2
 800ced2:	e7ec      	b.n	800ceae <_strtol_l.isra.0+0x3a>
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1f6      	bne.n	800cec6 <_strtol_l.isra.0+0x52>
 800ced8:	2c30      	cmp	r4, #48	@ 0x30
 800ceda:	bf14      	ite	ne
 800cedc:	230a      	movne	r3, #10
 800cede:	2308      	moveq	r3, #8
 800cee0:	2200      	movs	r2, #0
 800cee2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cee6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ceea:	fbbc f9f3 	udiv	r9, ip, r3
 800ceee:	4610      	mov	r0, r2
 800cef0:	fb03 ca19 	mls	sl, r3, r9, ip
 800cef4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cef8:	2f09      	cmp	r7, #9
 800cefa:	d80f      	bhi.n	800cf1c <_strtol_l.isra.0+0xa8>
 800cefc:	463c      	mov	r4, r7
 800cefe:	42a3      	cmp	r3, r4
 800cf00:	dd1b      	ble.n	800cf3a <_strtol_l.isra.0+0xc6>
 800cf02:	1c57      	adds	r7, r2, #1
 800cf04:	d007      	beq.n	800cf16 <_strtol_l.isra.0+0xa2>
 800cf06:	4581      	cmp	r9, r0
 800cf08:	d314      	bcc.n	800cf34 <_strtol_l.isra.0+0xc0>
 800cf0a:	d101      	bne.n	800cf10 <_strtol_l.isra.0+0x9c>
 800cf0c:	45a2      	cmp	sl, r4
 800cf0e:	db11      	blt.n	800cf34 <_strtol_l.isra.0+0xc0>
 800cf10:	2201      	movs	r2, #1
 800cf12:	fb00 4003 	mla	r0, r0, r3, r4
 800cf16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf1a:	e7eb      	b.n	800cef4 <_strtol_l.isra.0+0x80>
 800cf1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf20:	2f19      	cmp	r7, #25
 800cf22:	d801      	bhi.n	800cf28 <_strtol_l.isra.0+0xb4>
 800cf24:	3c37      	subs	r4, #55	@ 0x37
 800cf26:	e7ea      	b.n	800cefe <_strtol_l.isra.0+0x8a>
 800cf28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf2c:	2f19      	cmp	r7, #25
 800cf2e:	d804      	bhi.n	800cf3a <_strtol_l.isra.0+0xc6>
 800cf30:	3c57      	subs	r4, #87	@ 0x57
 800cf32:	e7e4      	b.n	800cefe <_strtol_l.isra.0+0x8a>
 800cf34:	f04f 32ff 	mov.w	r2, #4294967295
 800cf38:	e7ed      	b.n	800cf16 <_strtol_l.isra.0+0xa2>
 800cf3a:	1c53      	adds	r3, r2, #1
 800cf3c:	d108      	bne.n	800cf50 <_strtol_l.isra.0+0xdc>
 800cf3e:	2322      	movs	r3, #34	@ 0x22
 800cf40:	4660      	mov	r0, ip
 800cf42:	f8ce 3000 	str.w	r3, [lr]
 800cf46:	f1b8 0f00 	cmp.w	r8, #0
 800cf4a:	d0a0      	beq.n	800ce8e <_strtol_l.isra.0+0x1a>
 800cf4c:	1e69      	subs	r1, r5, #1
 800cf4e:	e006      	b.n	800cf5e <_strtol_l.isra.0+0xea>
 800cf50:	b106      	cbz	r6, 800cf54 <_strtol_l.isra.0+0xe0>
 800cf52:	4240      	negs	r0, r0
 800cf54:	f1b8 0f00 	cmp.w	r8, #0
 800cf58:	d099      	beq.n	800ce8e <_strtol_l.isra.0+0x1a>
 800cf5a:	2a00      	cmp	r2, #0
 800cf5c:	d1f6      	bne.n	800cf4c <_strtol_l.isra.0+0xd8>
 800cf5e:	f8c8 1000 	str.w	r1, [r8]
 800cf62:	e794      	b.n	800ce8e <_strtol_l.isra.0+0x1a>
 800cf64:	0800ecc9 	.word	0x0800ecc9

0800cf68 <_strtol_r>:
 800cf68:	f7ff bf84 	b.w	800ce74 <_strtol_l.isra.0>

0800cf6c <__ssputs_r>:
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	461f      	mov	r7, r3
 800cf72:	688e      	ldr	r6, [r1, #8]
 800cf74:	4682      	mov	sl, r0
 800cf76:	42be      	cmp	r6, r7
 800cf78:	460c      	mov	r4, r1
 800cf7a:	4690      	mov	r8, r2
 800cf7c:	680b      	ldr	r3, [r1, #0]
 800cf7e:	d82d      	bhi.n	800cfdc <__ssputs_r+0x70>
 800cf80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf88:	d026      	beq.n	800cfd8 <__ssputs_r+0x6c>
 800cf8a:	6965      	ldr	r5, [r4, #20]
 800cf8c:	6909      	ldr	r1, [r1, #16]
 800cf8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf92:	eba3 0901 	sub.w	r9, r3, r1
 800cf96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf9a:	1c7b      	adds	r3, r7, #1
 800cf9c:	444b      	add	r3, r9
 800cf9e:	106d      	asrs	r5, r5, #1
 800cfa0:	429d      	cmp	r5, r3
 800cfa2:	bf38      	it	cc
 800cfa4:	461d      	movcc	r5, r3
 800cfa6:	0553      	lsls	r3, r2, #21
 800cfa8:	d527      	bpl.n	800cffa <__ssputs_r+0x8e>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	f7fe fc36 	bl	800b81c <_malloc_r>
 800cfb0:	4606      	mov	r6, r0
 800cfb2:	b360      	cbz	r0, 800d00e <__ssputs_r+0xa2>
 800cfb4:	464a      	mov	r2, r9
 800cfb6:	6921      	ldr	r1, [r4, #16]
 800cfb8:	f000 fda0 	bl	800dafc <memcpy>
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cfc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfc6:	81a3      	strh	r3, [r4, #12]
 800cfc8:	6126      	str	r6, [r4, #16]
 800cfca:	444e      	add	r6, r9
 800cfcc:	6026      	str	r6, [r4, #0]
 800cfce:	463e      	mov	r6, r7
 800cfd0:	6165      	str	r5, [r4, #20]
 800cfd2:	eba5 0509 	sub.w	r5, r5, r9
 800cfd6:	60a5      	str	r5, [r4, #8]
 800cfd8:	42be      	cmp	r6, r7
 800cfda:	d900      	bls.n	800cfde <__ssputs_r+0x72>
 800cfdc:	463e      	mov	r6, r7
 800cfde:	4632      	mov	r2, r6
 800cfe0:	4641      	mov	r1, r8
 800cfe2:	6820      	ldr	r0, [r4, #0]
 800cfe4:	f000 fd4d 	bl	800da82 <memmove>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	1b9b      	subs	r3, r3, r6
 800cfee:	60a3      	str	r3, [r4, #8]
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	4433      	add	r3, r6
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffa:	462a      	mov	r2, r5
 800cffc:	f001 f90f 	bl	800e21e <_realloc_r>
 800d000:	4606      	mov	r6, r0
 800d002:	2800      	cmp	r0, #0
 800d004:	d1e0      	bne.n	800cfc8 <__ssputs_r+0x5c>
 800d006:	4650      	mov	r0, sl
 800d008:	6921      	ldr	r1, [r4, #16]
 800d00a:	f7fe fb95 	bl	800b738 <_free_r>
 800d00e:	230c      	movs	r3, #12
 800d010:	f8ca 3000 	str.w	r3, [sl]
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	f04f 30ff 	mov.w	r0, #4294967295
 800d01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d01e:	81a3      	strh	r3, [r4, #12]
 800d020:	e7e9      	b.n	800cff6 <__ssputs_r+0x8a>
	...

0800d024 <_svfiprintf_r>:
 800d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d028:	4698      	mov	r8, r3
 800d02a:	898b      	ldrh	r3, [r1, #12]
 800d02c:	4607      	mov	r7, r0
 800d02e:	061b      	lsls	r3, r3, #24
 800d030:	460d      	mov	r5, r1
 800d032:	4614      	mov	r4, r2
 800d034:	b09d      	sub	sp, #116	@ 0x74
 800d036:	d510      	bpl.n	800d05a <_svfiprintf_r+0x36>
 800d038:	690b      	ldr	r3, [r1, #16]
 800d03a:	b973      	cbnz	r3, 800d05a <_svfiprintf_r+0x36>
 800d03c:	2140      	movs	r1, #64	@ 0x40
 800d03e:	f7fe fbed 	bl	800b81c <_malloc_r>
 800d042:	6028      	str	r0, [r5, #0]
 800d044:	6128      	str	r0, [r5, #16]
 800d046:	b930      	cbnz	r0, 800d056 <_svfiprintf_r+0x32>
 800d048:	230c      	movs	r3, #12
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	f04f 30ff 	mov.w	r0, #4294967295
 800d050:	b01d      	add	sp, #116	@ 0x74
 800d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d056:	2340      	movs	r3, #64	@ 0x40
 800d058:	616b      	str	r3, [r5, #20]
 800d05a:	2300      	movs	r3, #0
 800d05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d05e:	2320      	movs	r3, #32
 800d060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d064:	2330      	movs	r3, #48	@ 0x30
 800d066:	f04f 0901 	mov.w	r9, #1
 800d06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d06e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d208 <_svfiprintf_r+0x1e4>
 800d072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d076:	4623      	mov	r3, r4
 800d078:	469a      	mov	sl, r3
 800d07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d07e:	b10a      	cbz	r2, 800d084 <_svfiprintf_r+0x60>
 800d080:	2a25      	cmp	r2, #37	@ 0x25
 800d082:	d1f9      	bne.n	800d078 <_svfiprintf_r+0x54>
 800d084:	ebba 0b04 	subs.w	fp, sl, r4
 800d088:	d00b      	beq.n	800d0a2 <_svfiprintf_r+0x7e>
 800d08a:	465b      	mov	r3, fp
 800d08c:	4622      	mov	r2, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	4638      	mov	r0, r7
 800d092:	f7ff ff6b 	bl	800cf6c <__ssputs_r>
 800d096:	3001      	adds	r0, #1
 800d098:	f000 80a7 	beq.w	800d1ea <_svfiprintf_r+0x1c6>
 800d09c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d09e:	445a      	add	r2, fp
 800d0a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 809f 	beq.w	800d1ea <_svfiprintf_r+0x1c6>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b6:	f10a 0a01 	add.w	sl, sl, #1
 800d0ba:	9304      	str	r3, [sp, #16]
 800d0bc:	9307      	str	r3, [sp, #28]
 800d0be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0c4:	4654      	mov	r4, sl
 800d0c6:	2205      	movs	r2, #5
 800d0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0cc:	484e      	ldr	r0, [pc, #312]	@ (800d208 <_svfiprintf_r+0x1e4>)
 800d0ce:	f7fd fcc2 	bl	800aa56 <memchr>
 800d0d2:	9a04      	ldr	r2, [sp, #16]
 800d0d4:	b9d8      	cbnz	r0, 800d10e <_svfiprintf_r+0xea>
 800d0d6:	06d0      	lsls	r0, r2, #27
 800d0d8:	bf44      	itt	mi
 800d0da:	2320      	movmi	r3, #32
 800d0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0e0:	0711      	lsls	r1, r2, #28
 800d0e2:	bf44      	itt	mi
 800d0e4:	232b      	movmi	r3, #43	@ 0x2b
 800d0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0f0:	d015      	beq.n	800d11e <_svfiprintf_r+0xfa>
 800d0f2:	4654      	mov	r4, sl
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	f04f 0c0a 	mov.w	ip, #10
 800d0fa:	9a07      	ldr	r2, [sp, #28]
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d102:	3b30      	subs	r3, #48	@ 0x30
 800d104:	2b09      	cmp	r3, #9
 800d106:	d94b      	bls.n	800d1a0 <_svfiprintf_r+0x17c>
 800d108:	b1b0      	cbz	r0, 800d138 <_svfiprintf_r+0x114>
 800d10a:	9207      	str	r2, [sp, #28]
 800d10c:	e014      	b.n	800d138 <_svfiprintf_r+0x114>
 800d10e:	eba0 0308 	sub.w	r3, r0, r8
 800d112:	fa09 f303 	lsl.w	r3, r9, r3
 800d116:	4313      	orrs	r3, r2
 800d118:	46a2      	mov	sl, r4
 800d11a:	9304      	str	r3, [sp, #16]
 800d11c:	e7d2      	b.n	800d0c4 <_svfiprintf_r+0xa0>
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	1d19      	adds	r1, r3, #4
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	9103      	str	r1, [sp, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	bfbb      	ittet	lt
 800d12a:	425b      	neglt	r3, r3
 800d12c:	f042 0202 	orrlt.w	r2, r2, #2
 800d130:	9307      	strge	r3, [sp, #28]
 800d132:	9307      	strlt	r3, [sp, #28]
 800d134:	bfb8      	it	lt
 800d136:	9204      	strlt	r2, [sp, #16]
 800d138:	7823      	ldrb	r3, [r4, #0]
 800d13a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d13c:	d10a      	bne.n	800d154 <_svfiprintf_r+0x130>
 800d13e:	7863      	ldrb	r3, [r4, #1]
 800d140:	2b2a      	cmp	r3, #42	@ 0x2a
 800d142:	d132      	bne.n	800d1aa <_svfiprintf_r+0x186>
 800d144:	9b03      	ldr	r3, [sp, #12]
 800d146:	3402      	adds	r4, #2
 800d148:	1d1a      	adds	r2, r3, #4
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	9203      	str	r2, [sp, #12]
 800d14e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d152:	9305      	str	r3, [sp, #20]
 800d154:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d20c <_svfiprintf_r+0x1e8>
 800d158:	2203      	movs	r2, #3
 800d15a:	4650      	mov	r0, sl
 800d15c:	7821      	ldrb	r1, [r4, #0]
 800d15e:	f7fd fc7a 	bl	800aa56 <memchr>
 800d162:	b138      	cbz	r0, 800d174 <_svfiprintf_r+0x150>
 800d164:	2240      	movs	r2, #64	@ 0x40
 800d166:	9b04      	ldr	r3, [sp, #16]
 800d168:	eba0 000a 	sub.w	r0, r0, sl
 800d16c:	4082      	lsls	r2, r0
 800d16e:	4313      	orrs	r3, r2
 800d170:	3401      	adds	r4, #1
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d178:	2206      	movs	r2, #6
 800d17a:	4825      	ldr	r0, [pc, #148]	@ (800d210 <_svfiprintf_r+0x1ec>)
 800d17c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d180:	f7fd fc69 	bl	800aa56 <memchr>
 800d184:	2800      	cmp	r0, #0
 800d186:	d036      	beq.n	800d1f6 <_svfiprintf_r+0x1d2>
 800d188:	4b22      	ldr	r3, [pc, #136]	@ (800d214 <_svfiprintf_r+0x1f0>)
 800d18a:	bb1b      	cbnz	r3, 800d1d4 <_svfiprintf_r+0x1b0>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	3307      	adds	r3, #7
 800d190:	f023 0307 	bic.w	r3, r3, #7
 800d194:	3308      	adds	r3, #8
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d19a:	4433      	add	r3, r6
 800d19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d19e:	e76a      	b.n	800d076 <_svfiprintf_r+0x52>
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a8:	e7a8      	b.n	800d0fc <_svfiprintf_r+0xd8>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f04f 0c0a 	mov.w	ip, #10
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	3401      	adds	r4, #1
 800d1b4:	9305      	str	r3, [sp, #20]
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1bc:	3a30      	subs	r2, #48	@ 0x30
 800d1be:	2a09      	cmp	r2, #9
 800d1c0:	d903      	bls.n	800d1ca <_svfiprintf_r+0x1a6>
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0c6      	beq.n	800d154 <_svfiprintf_r+0x130>
 800d1c6:	9105      	str	r1, [sp, #20]
 800d1c8:	e7c4      	b.n	800d154 <_svfiprintf_r+0x130>
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1d2:	e7f0      	b.n	800d1b6 <_svfiprintf_r+0x192>
 800d1d4:	ab03      	add	r3, sp, #12
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4638      	mov	r0, r7
 800d1dc:	4b0e      	ldr	r3, [pc, #56]	@ (800d218 <_svfiprintf_r+0x1f4>)
 800d1de:	a904      	add	r1, sp, #16
 800d1e0:	f7fc fc9e 	bl	8009b20 <_printf_float>
 800d1e4:	1c42      	adds	r2, r0, #1
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	d1d6      	bne.n	800d198 <_svfiprintf_r+0x174>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	065b      	lsls	r3, r3, #25
 800d1ee:	f53f af2d 	bmi.w	800d04c <_svfiprintf_r+0x28>
 800d1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1f4:	e72c      	b.n	800d050 <_svfiprintf_r+0x2c>
 800d1f6:	ab03      	add	r3, sp, #12
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	462a      	mov	r2, r5
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	4b06      	ldr	r3, [pc, #24]	@ (800d218 <_svfiprintf_r+0x1f4>)
 800d200:	a904      	add	r1, sp, #16
 800d202:	f7fc ff2b 	bl	800a05c <_printf_i>
 800d206:	e7ed      	b.n	800d1e4 <_svfiprintf_r+0x1c0>
 800d208:	0800eaa9 	.word	0x0800eaa9
 800d20c:	0800eaaf 	.word	0x0800eaaf
 800d210:	0800eab3 	.word	0x0800eab3
 800d214:	08009b21 	.word	0x08009b21
 800d218:	0800cf6d 	.word	0x0800cf6d

0800d21c <_sungetc_r>:
 800d21c:	b538      	push	{r3, r4, r5, lr}
 800d21e:	1c4b      	adds	r3, r1, #1
 800d220:	4614      	mov	r4, r2
 800d222:	d103      	bne.n	800d22c <_sungetc_r+0x10>
 800d224:	f04f 35ff 	mov.w	r5, #4294967295
 800d228:	4628      	mov	r0, r5
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	8993      	ldrh	r3, [r2, #12]
 800d22e:	b2cd      	uxtb	r5, r1
 800d230:	f023 0320 	bic.w	r3, r3, #32
 800d234:	8193      	strh	r3, [r2, #12]
 800d236:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d238:	6852      	ldr	r2, [r2, #4]
 800d23a:	b18b      	cbz	r3, 800d260 <_sungetc_r+0x44>
 800d23c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d23e:	4293      	cmp	r3, r2
 800d240:	dd08      	ble.n	800d254 <_sungetc_r+0x38>
 800d242:	6823      	ldr	r3, [r4, #0]
 800d244:	1e5a      	subs	r2, r3, #1
 800d246:	6022      	str	r2, [r4, #0]
 800d248:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d24c:	6863      	ldr	r3, [r4, #4]
 800d24e:	3301      	adds	r3, #1
 800d250:	6063      	str	r3, [r4, #4]
 800d252:	e7e9      	b.n	800d228 <_sungetc_r+0xc>
 800d254:	4621      	mov	r1, r4
 800d256:	f000 fbdc 	bl	800da12 <__submore>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d0f1      	beq.n	800d242 <_sungetc_r+0x26>
 800d25e:	e7e1      	b.n	800d224 <_sungetc_r+0x8>
 800d260:	6921      	ldr	r1, [r4, #16]
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	b151      	cbz	r1, 800d27c <_sungetc_r+0x60>
 800d266:	4299      	cmp	r1, r3
 800d268:	d208      	bcs.n	800d27c <_sungetc_r+0x60>
 800d26a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d26e:	42a9      	cmp	r1, r5
 800d270:	d104      	bne.n	800d27c <_sungetc_r+0x60>
 800d272:	3b01      	subs	r3, #1
 800d274:	3201      	adds	r2, #1
 800d276:	6023      	str	r3, [r4, #0]
 800d278:	6062      	str	r2, [r4, #4]
 800d27a:	e7d5      	b.n	800d228 <_sungetc_r+0xc>
 800d27c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d284:	6363      	str	r3, [r4, #52]	@ 0x34
 800d286:	2303      	movs	r3, #3
 800d288:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d28a:	4623      	mov	r3, r4
 800d28c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	2301      	movs	r3, #1
 800d294:	e7dc      	b.n	800d250 <_sungetc_r+0x34>

0800d296 <__ssrefill_r>:
 800d296:	b510      	push	{r4, lr}
 800d298:	460c      	mov	r4, r1
 800d29a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d29c:	b169      	cbz	r1, 800d2ba <__ssrefill_r+0x24>
 800d29e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2a2:	4299      	cmp	r1, r3
 800d2a4:	d001      	beq.n	800d2aa <__ssrefill_r+0x14>
 800d2a6:	f7fe fa47 	bl	800b738 <_free_r>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2ae:	6360      	str	r0, [r4, #52]	@ 0x34
 800d2b0:	6063      	str	r3, [r4, #4]
 800d2b2:	b113      	cbz	r3, 800d2ba <__ssrefill_r+0x24>
 800d2b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d2b6:	6023      	str	r3, [r4, #0]
 800d2b8:	bd10      	pop	{r4, pc}
 800d2ba:	6923      	ldr	r3, [r4, #16]
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	6063      	str	r3, [r4, #4]
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	f043 0320 	orr.w	r3, r3, #32
 800d2cc:	81a3      	strh	r3, [r4, #12]
 800d2ce:	e7f3      	b.n	800d2b8 <__ssrefill_r+0x22>

0800d2d0 <__ssvfiscanf_r>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	4606      	mov	r6, r0
 800d2da:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d2de:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d2e2:	49ab      	ldr	r1, [pc, #684]	@ (800d590 <__ssvfiscanf_r+0x2c0>)
 800d2e4:	f10d 0804 	add.w	r8, sp, #4
 800d2e8:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d2ea:	49aa      	ldr	r1, [pc, #680]	@ (800d594 <__ssvfiscanf_r+0x2c4>)
 800d2ec:	4faa      	ldr	r7, [pc, #680]	@ (800d598 <__ssvfiscanf_r+0x2c8>)
 800d2ee:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d2f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	f892 9000 	ldrb.w	r9, [r2]
 800d2fa:	f1b9 0f00 	cmp.w	r9, #0
 800d2fe:	f000 8159 	beq.w	800d5b4 <__ssvfiscanf_r+0x2e4>
 800d302:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d306:	1c55      	adds	r5, r2, #1
 800d308:	f013 0308 	ands.w	r3, r3, #8
 800d30c:	d019      	beq.n	800d342 <__ssvfiscanf_r+0x72>
 800d30e:	6863      	ldr	r3, [r4, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	dd0f      	ble.n	800d334 <__ssvfiscanf_r+0x64>
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	781a      	ldrb	r2, [r3, #0]
 800d318:	5cba      	ldrb	r2, [r7, r2]
 800d31a:	0712      	lsls	r2, r2, #28
 800d31c:	d401      	bmi.n	800d322 <__ssvfiscanf_r+0x52>
 800d31e:	462a      	mov	r2, r5
 800d320:	e7e9      	b.n	800d2f6 <__ssvfiscanf_r+0x26>
 800d322:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d324:	3301      	adds	r3, #1
 800d326:	3201      	adds	r2, #1
 800d328:	9245      	str	r2, [sp, #276]	@ 0x114
 800d32a:	6862      	ldr	r2, [r4, #4]
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	3a01      	subs	r2, #1
 800d330:	6062      	str	r2, [r4, #4]
 800d332:	e7ec      	b.n	800d30e <__ssvfiscanf_r+0x3e>
 800d334:	4621      	mov	r1, r4
 800d336:	4630      	mov	r0, r6
 800d338:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d33a:	4798      	blx	r3
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d0e9      	beq.n	800d314 <__ssvfiscanf_r+0x44>
 800d340:	e7ed      	b.n	800d31e <__ssvfiscanf_r+0x4e>
 800d342:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d346:	f040 8086 	bne.w	800d456 <__ssvfiscanf_r+0x186>
 800d34a:	9341      	str	r3, [sp, #260]	@ 0x104
 800d34c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d34e:	7853      	ldrb	r3, [r2, #1]
 800d350:	2b2a      	cmp	r3, #42	@ 0x2a
 800d352:	bf04      	itt	eq
 800d354:	2310      	moveq	r3, #16
 800d356:	1c95      	addeq	r5, r2, #2
 800d358:	f04f 020a 	mov.w	r2, #10
 800d35c:	bf08      	it	eq
 800d35e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d360:	46aa      	mov	sl, r5
 800d362:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d366:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d36a:	2b09      	cmp	r3, #9
 800d36c:	d91e      	bls.n	800d3ac <__ssvfiscanf_r+0xdc>
 800d36e:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800d59c <__ssvfiscanf_r+0x2cc>
 800d372:	2203      	movs	r2, #3
 800d374:	4658      	mov	r0, fp
 800d376:	f7fd fb6e 	bl	800aa56 <memchr>
 800d37a:	b138      	cbz	r0, 800d38c <__ssvfiscanf_r+0xbc>
 800d37c:	2301      	movs	r3, #1
 800d37e:	4655      	mov	r5, sl
 800d380:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d382:	eba0 000b 	sub.w	r0, r0, fp
 800d386:	4083      	lsls	r3, r0
 800d388:	4313      	orrs	r3, r2
 800d38a:	9341      	str	r3, [sp, #260]	@ 0x104
 800d38c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d390:	2b78      	cmp	r3, #120	@ 0x78
 800d392:	d806      	bhi.n	800d3a2 <__ssvfiscanf_r+0xd2>
 800d394:	2b57      	cmp	r3, #87	@ 0x57
 800d396:	d810      	bhi.n	800d3ba <__ssvfiscanf_r+0xea>
 800d398:	2b25      	cmp	r3, #37	@ 0x25
 800d39a:	d05c      	beq.n	800d456 <__ssvfiscanf_r+0x186>
 800d39c:	d856      	bhi.n	800d44c <__ssvfiscanf_r+0x17c>
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d074      	beq.n	800d48c <__ssvfiscanf_r+0x1bc>
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d3a6:	230a      	movs	r3, #10
 800d3a8:	9342      	str	r3, [sp, #264]	@ 0x108
 800d3aa:	e087      	b.n	800d4bc <__ssvfiscanf_r+0x1ec>
 800d3ac:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d3ae:	4655      	mov	r5, sl
 800d3b0:	fb02 1103 	mla	r1, r2, r3, r1
 800d3b4:	3930      	subs	r1, #48	@ 0x30
 800d3b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d3b8:	e7d2      	b.n	800d360 <__ssvfiscanf_r+0x90>
 800d3ba:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d3be:	2a20      	cmp	r2, #32
 800d3c0:	d8ef      	bhi.n	800d3a2 <__ssvfiscanf_r+0xd2>
 800d3c2:	a101      	add	r1, pc, #4	@ (adr r1, 800d3c8 <__ssvfiscanf_r+0xf8>)
 800d3c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d3c8:	0800d49b 	.word	0x0800d49b
 800d3cc:	0800d3a3 	.word	0x0800d3a3
 800d3d0:	0800d3a3 	.word	0x0800d3a3
 800d3d4:	0800d4f5 	.word	0x0800d4f5
 800d3d8:	0800d3a3 	.word	0x0800d3a3
 800d3dc:	0800d3a3 	.word	0x0800d3a3
 800d3e0:	0800d3a3 	.word	0x0800d3a3
 800d3e4:	0800d3a3 	.word	0x0800d3a3
 800d3e8:	0800d3a3 	.word	0x0800d3a3
 800d3ec:	0800d3a3 	.word	0x0800d3a3
 800d3f0:	0800d3a3 	.word	0x0800d3a3
 800d3f4:	0800d50b 	.word	0x0800d50b
 800d3f8:	0800d4f1 	.word	0x0800d4f1
 800d3fc:	0800d453 	.word	0x0800d453
 800d400:	0800d453 	.word	0x0800d453
 800d404:	0800d453 	.word	0x0800d453
 800d408:	0800d3a3 	.word	0x0800d3a3
 800d40c:	0800d4ad 	.word	0x0800d4ad
 800d410:	0800d3a3 	.word	0x0800d3a3
 800d414:	0800d3a3 	.word	0x0800d3a3
 800d418:	0800d3a3 	.word	0x0800d3a3
 800d41c:	0800d3a3 	.word	0x0800d3a3
 800d420:	0800d51b 	.word	0x0800d51b
 800d424:	0800d4b5 	.word	0x0800d4b5
 800d428:	0800d493 	.word	0x0800d493
 800d42c:	0800d3a3 	.word	0x0800d3a3
 800d430:	0800d3a3 	.word	0x0800d3a3
 800d434:	0800d517 	.word	0x0800d517
 800d438:	0800d3a3 	.word	0x0800d3a3
 800d43c:	0800d4f1 	.word	0x0800d4f1
 800d440:	0800d3a3 	.word	0x0800d3a3
 800d444:	0800d3a3 	.word	0x0800d3a3
 800d448:	0800d49b 	.word	0x0800d49b
 800d44c:	3b45      	subs	r3, #69	@ 0x45
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d8a7      	bhi.n	800d3a2 <__ssvfiscanf_r+0xd2>
 800d452:	2305      	movs	r3, #5
 800d454:	e031      	b.n	800d4ba <__ssvfiscanf_r+0x1ea>
 800d456:	6863      	ldr	r3, [r4, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	dd0d      	ble.n	800d478 <__ssvfiscanf_r+0x1a8>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	454a      	cmp	r2, r9
 800d462:	f040 80a7 	bne.w	800d5b4 <__ssvfiscanf_r+0x2e4>
 800d466:	3301      	adds	r3, #1
 800d468:	6862      	ldr	r2, [r4, #4]
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d46e:	3a01      	subs	r2, #1
 800d470:	3301      	adds	r3, #1
 800d472:	6062      	str	r2, [r4, #4]
 800d474:	9345      	str	r3, [sp, #276]	@ 0x114
 800d476:	e752      	b.n	800d31e <__ssvfiscanf_r+0x4e>
 800d478:	4621      	mov	r1, r4
 800d47a:	4630      	mov	r0, r6
 800d47c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d47e:	4798      	blx	r3
 800d480:	2800      	cmp	r0, #0
 800d482:	d0eb      	beq.n	800d45c <__ssvfiscanf_r+0x18c>
 800d484:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d486:	2800      	cmp	r0, #0
 800d488:	f040 808c 	bne.w	800d5a4 <__ssvfiscanf_r+0x2d4>
 800d48c:	f04f 30ff 	mov.w	r0, #4294967295
 800d490:	e08c      	b.n	800d5ac <__ssvfiscanf_r+0x2dc>
 800d492:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d494:	f042 0220 	orr.w	r2, r2, #32
 800d498:	9241      	str	r2, [sp, #260]	@ 0x104
 800d49a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d49c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800d4a2:	2210      	movs	r2, #16
 800d4a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800d4a6:	9242      	str	r2, [sp, #264]	@ 0x108
 800d4a8:	d902      	bls.n	800d4b0 <__ssvfiscanf_r+0x1e0>
 800d4aa:	e005      	b.n	800d4b8 <__ssvfiscanf_r+0x1e8>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	e002      	b.n	800d4ba <__ssvfiscanf_r+0x1ea>
 800d4b4:	2308      	movs	r3, #8
 800d4b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800d4b8:	2304      	movs	r3, #4
 800d4ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d4bc:	6863      	ldr	r3, [r4, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	dd39      	ble.n	800d536 <__ssvfiscanf_r+0x266>
 800d4c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d4c4:	0659      	lsls	r1, r3, #25
 800d4c6:	d404      	bmi.n	800d4d2 <__ssvfiscanf_r+0x202>
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	781a      	ldrb	r2, [r3, #0]
 800d4cc:	5cba      	ldrb	r2, [r7, r2]
 800d4ce:	0712      	lsls	r2, r2, #28
 800d4d0:	d438      	bmi.n	800d544 <__ssvfiscanf_r+0x274>
 800d4d2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	dc47      	bgt.n	800d568 <__ssvfiscanf_r+0x298>
 800d4d8:	466b      	mov	r3, sp
 800d4da:	4622      	mov	r2, r4
 800d4dc:	4630      	mov	r0, r6
 800d4de:	a941      	add	r1, sp, #260	@ 0x104
 800d4e0:	f000 f86a 	bl	800d5b8 <_scanf_chars>
 800d4e4:	2801      	cmp	r0, #1
 800d4e6:	d065      	beq.n	800d5b4 <__ssvfiscanf_r+0x2e4>
 800d4e8:	2802      	cmp	r0, #2
 800d4ea:	f47f af18 	bne.w	800d31e <__ssvfiscanf_r+0x4e>
 800d4ee:	e7c9      	b.n	800d484 <__ssvfiscanf_r+0x1b4>
 800d4f0:	220a      	movs	r2, #10
 800d4f2:	e7d7      	b.n	800d4a4 <__ssvfiscanf_r+0x1d4>
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	f000 fa52 	bl	800d9a0 <__sccl>
 800d4fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d4fe:	4605      	mov	r5, r0
 800d500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d504:	9341      	str	r3, [sp, #260]	@ 0x104
 800d506:	2301      	movs	r3, #1
 800d508:	e7d7      	b.n	800d4ba <__ssvfiscanf_r+0x1ea>
 800d50a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d50c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d510:	9341      	str	r3, [sp, #260]	@ 0x104
 800d512:	2300      	movs	r3, #0
 800d514:	e7d1      	b.n	800d4ba <__ssvfiscanf_r+0x1ea>
 800d516:	2302      	movs	r3, #2
 800d518:	e7cf      	b.n	800d4ba <__ssvfiscanf_r+0x1ea>
 800d51a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d51c:	06c3      	lsls	r3, r0, #27
 800d51e:	f53f aefe 	bmi.w	800d31e <__ssvfiscanf_r+0x4e>
 800d522:	9b00      	ldr	r3, [sp, #0]
 800d524:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d526:	1d19      	adds	r1, r3, #4
 800d528:	9100      	str	r1, [sp, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	07c0      	lsls	r0, r0, #31
 800d52e:	bf4c      	ite	mi
 800d530:	801a      	strhmi	r2, [r3, #0]
 800d532:	601a      	strpl	r2, [r3, #0]
 800d534:	e6f3      	b.n	800d31e <__ssvfiscanf_r+0x4e>
 800d536:	4621      	mov	r1, r4
 800d538:	4630      	mov	r0, r6
 800d53a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d53c:	4798      	blx	r3
 800d53e:	2800      	cmp	r0, #0
 800d540:	d0bf      	beq.n	800d4c2 <__ssvfiscanf_r+0x1f2>
 800d542:	e79f      	b.n	800d484 <__ssvfiscanf_r+0x1b4>
 800d544:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d546:	3201      	adds	r2, #1
 800d548:	9245      	str	r2, [sp, #276]	@ 0x114
 800d54a:	6862      	ldr	r2, [r4, #4]
 800d54c:	3a01      	subs	r2, #1
 800d54e:	2a00      	cmp	r2, #0
 800d550:	6062      	str	r2, [r4, #4]
 800d552:	dd02      	ble.n	800d55a <__ssvfiscanf_r+0x28a>
 800d554:	3301      	adds	r3, #1
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	e7b6      	b.n	800d4c8 <__ssvfiscanf_r+0x1f8>
 800d55a:	4621      	mov	r1, r4
 800d55c:	4630      	mov	r0, r6
 800d55e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d560:	4798      	blx	r3
 800d562:	2800      	cmp	r0, #0
 800d564:	d0b0      	beq.n	800d4c8 <__ssvfiscanf_r+0x1f8>
 800d566:	e78d      	b.n	800d484 <__ssvfiscanf_r+0x1b4>
 800d568:	2b04      	cmp	r3, #4
 800d56a:	dc06      	bgt.n	800d57a <__ssvfiscanf_r+0x2aa>
 800d56c:	466b      	mov	r3, sp
 800d56e:	4622      	mov	r2, r4
 800d570:	4630      	mov	r0, r6
 800d572:	a941      	add	r1, sp, #260	@ 0x104
 800d574:	f000 f87a 	bl	800d66c <_scanf_i>
 800d578:	e7b4      	b.n	800d4e4 <__ssvfiscanf_r+0x214>
 800d57a:	4b09      	ldr	r3, [pc, #36]	@ (800d5a0 <__ssvfiscanf_r+0x2d0>)
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f43f aece 	beq.w	800d31e <__ssvfiscanf_r+0x4e>
 800d582:	466b      	mov	r3, sp
 800d584:	4622      	mov	r2, r4
 800d586:	4630      	mov	r0, r6
 800d588:	a941      	add	r1, sp, #260	@ 0x104
 800d58a:	f7fc fe85 	bl	800a298 <_scanf_float>
 800d58e:	e7a9      	b.n	800d4e4 <__ssvfiscanf_r+0x214>
 800d590:	0800d21d 	.word	0x0800d21d
 800d594:	0800d297 	.word	0x0800d297
 800d598:	0800ecc9 	.word	0x0800ecc9
 800d59c:	0800eaaf 	.word	0x0800eaaf
 800d5a0:	0800a299 	.word	0x0800a299
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	065b      	lsls	r3, r3, #25
 800d5a8:	f53f af70 	bmi.w	800d48c <__ssvfiscanf_r+0x1bc>
 800d5ac:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d5b6:	e7f9      	b.n	800d5ac <__ssvfiscanf_r+0x2dc>

0800d5b8 <_scanf_chars>:
 800d5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5bc:	4615      	mov	r5, r2
 800d5be:	688a      	ldr	r2, [r1, #8]
 800d5c0:	4680      	mov	r8, r0
 800d5c2:	460c      	mov	r4, r1
 800d5c4:	b932      	cbnz	r2, 800d5d4 <_scanf_chars+0x1c>
 800d5c6:	698a      	ldr	r2, [r1, #24]
 800d5c8:	2a00      	cmp	r2, #0
 800d5ca:	bf14      	ite	ne
 800d5cc:	f04f 32ff 	movne.w	r2, #4294967295
 800d5d0:	2201      	moveq	r2, #1
 800d5d2:	608a      	str	r2, [r1, #8]
 800d5d4:	2700      	movs	r7, #0
 800d5d6:	6822      	ldr	r2, [r4, #0]
 800d5d8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800d668 <_scanf_chars+0xb0>
 800d5dc:	06d1      	lsls	r1, r2, #27
 800d5de:	bf5f      	itttt	pl
 800d5e0:	681a      	ldrpl	r2, [r3, #0]
 800d5e2:	1d11      	addpl	r1, r2, #4
 800d5e4:	6019      	strpl	r1, [r3, #0]
 800d5e6:	6816      	ldrpl	r6, [r2, #0]
 800d5e8:	69a0      	ldr	r0, [r4, #24]
 800d5ea:	b188      	cbz	r0, 800d610 <_scanf_chars+0x58>
 800d5ec:	2801      	cmp	r0, #1
 800d5ee:	d107      	bne.n	800d600 <_scanf_chars+0x48>
 800d5f0:	682b      	ldr	r3, [r5, #0]
 800d5f2:	781a      	ldrb	r2, [r3, #0]
 800d5f4:	6963      	ldr	r3, [r4, #20]
 800d5f6:	5c9b      	ldrb	r3, [r3, r2]
 800d5f8:	b953      	cbnz	r3, 800d610 <_scanf_chars+0x58>
 800d5fa:	2f00      	cmp	r7, #0
 800d5fc:	d031      	beq.n	800d662 <_scanf_chars+0xaa>
 800d5fe:	e022      	b.n	800d646 <_scanf_chars+0x8e>
 800d600:	2802      	cmp	r0, #2
 800d602:	d120      	bne.n	800d646 <_scanf_chars+0x8e>
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d60c:	071b      	lsls	r3, r3, #28
 800d60e:	d41a      	bmi.n	800d646 <_scanf_chars+0x8e>
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	3701      	adds	r7, #1
 800d614:	06da      	lsls	r2, r3, #27
 800d616:	bf5e      	ittt	pl
 800d618:	682b      	ldrpl	r3, [r5, #0]
 800d61a:	781b      	ldrbpl	r3, [r3, #0]
 800d61c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d620:	682a      	ldr	r2, [r5, #0]
 800d622:	686b      	ldr	r3, [r5, #4]
 800d624:	3201      	adds	r2, #1
 800d626:	602a      	str	r2, [r5, #0]
 800d628:	68a2      	ldr	r2, [r4, #8]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	3a01      	subs	r2, #1
 800d62e:	606b      	str	r3, [r5, #4]
 800d630:	60a2      	str	r2, [r4, #8]
 800d632:	b142      	cbz	r2, 800d646 <_scanf_chars+0x8e>
 800d634:	2b00      	cmp	r3, #0
 800d636:	dcd7      	bgt.n	800d5e8 <_scanf_chars+0x30>
 800d638:	4629      	mov	r1, r5
 800d63a:	4640      	mov	r0, r8
 800d63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d640:	4798      	blx	r3
 800d642:	2800      	cmp	r0, #0
 800d644:	d0d0      	beq.n	800d5e8 <_scanf_chars+0x30>
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	f013 0310 	ands.w	r3, r3, #16
 800d64c:	d105      	bne.n	800d65a <_scanf_chars+0xa2>
 800d64e:	68e2      	ldr	r2, [r4, #12]
 800d650:	3201      	adds	r2, #1
 800d652:	60e2      	str	r2, [r4, #12]
 800d654:	69a2      	ldr	r2, [r4, #24]
 800d656:	b102      	cbz	r2, 800d65a <_scanf_chars+0xa2>
 800d658:	7033      	strb	r3, [r6, #0]
 800d65a:	2000      	movs	r0, #0
 800d65c:	6923      	ldr	r3, [r4, #16]
 800d65e:	443b      	add	r3, r7
 800d660:	6123      	str	r3, [r4, #16]
 800d662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d666:	bf00      	nop
 800d668:	0800ecc9 	.word	0x0800ecc9

0800d66c <_scanf_i>:
 800d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d670:	460c      	mov	r4, r1
 800d672:	4698      	mov	r8, r3
 800d674:	4b72      	ldr	r3, [pc, #456]	@ (800d840 <_scanf_i+0x1d4>)
 800d676:	b087      	sub	sp, #28
 800d678:	4682      	mov	sl, r0
 800d67a:	4616      	mov	r6, r2
 800d67c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d680:	ab03      	add	r3, sp, #12
 800d682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d686:	4b6f      	ldr	r3, [pc, #444]	@ (800d844 <_scanf_i+0x1d8>)
 800d688:	69a1      	ldr	r1, [r4, #24]
 800d68a:	4a6f      	ldr	r2, [pc, #444]	@ (800d848 <_scanf_i+0x1dc>)
 800d68c:	4627      	mov	r7, r4
 800d68e:	2903      	cmp	r1, #3
 800d690:	bf08      	it	eq
 800d692:	461a      	moveq	r2, r3
 800d694:	68a3      	ldr	r3, [r4, #8]
 800d696:	9201      	str	r2, [sp, #4]
 800d698:	1e5a      	subs	r2, r3, #1
 800d69a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d69e:	bf81      	itttt	hi
 800d6a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d6a4:	eb03 0905 	addhi.w	r9, r3, r5
 800d6a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d6ac:	60a3      	strhi	r3, [r4, #8]
 800d6ae:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d6b2:	bf98      	it	ls
 800d6b4:	f04f 0900 	movls.w	r9, #0
 800d6b8:	463d      	mov	r5, r7
 800d6ba:	f04f 0b00 	mov.w	fp, #0
 800d6be:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	6831      	ldr	r1, [r6, #0]
 800d6c6:	ab03      	add	r3, sp, #12
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	7809      	ldrb	r1, [r1, #0]
 800d6cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d6d0:	f7fd f9c1 	bl	800aa56 <memchr>
 800d6d4:	b328      	cbz	r0, 800d722 <_scanf_i+0xb6>
 800d6d6:	f1bb 0f01 	cmp.w	fp, #1
 800d6da:	d159      	bne.n	800d790 <_scanf_i+0x124>
 800d6dc:	6862      	ldr	r2, [r4, #4]
 800d6de:	b92a      	cbnz	r2, 800d6ec <_scanf_i+0x80>
 800d6e0:	2108      	movs	r1, #8
 800d6e2:	6822      	ldr	r2, [r4, #0]
 800d6e4:	6061      	str	r1, [r4, #4]
 800d6e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6ea:	6022      	str	r2, [r4, #0]
 800d6ec:	6822      	ldr	r2, [r4, #0]
 800d6ee:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d6f2:	6022      	str	r2, [r4, #0]
 800d6f4:	68a2      	ldr	r2, [r4, #8]
 800d6f6:	1e51      	subs	r1, r2, #1
 800d6f8:	60a1      	str	r1, [r4, #8]
 800d6fa:	b192      	cbz	r2, 800d722 <_scanf_i+0xb6>
 800d6fc:	6832      	ldr	r2, [r6, #0]
 800d6fe:	1c51      	adds	r1, r2, #1
 800d700:	6031      	str	r1, [r6, #0]
 800d702:	7812      	ldrb	r2, [r2, #0]
 800d704:	f805 2b01 	strb.w	r2, [r5], #1
 800d708:	6872      	ldr	r2, [r6, #4]
 800d70a:	3a01      	subs	r2, #1
 800d70c:	2a00      	cmp	r2, #0
 800d70e:	6072      	str	r2, [r6, #4]
 800d710:	dc07      	bgt.n	800d722 <_scanf_i+0xb6>
 800d712:	4631      	mov	r1, r6
 800d714:	4650      	mov	r0, sl
 800d716:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d71a:	4790      	blx	r2
 800d71c:	2800      	cmp	r0, #0
 800d71e:	f040 8085 	bne.w	800d82c <_scanf_i+0x1c0>
 800d722:	f10b 0b01 	add.w	fp, fp, #1
 800d726:	f1bb 0f03 	cmp.w	fp, #3
 800d72a:	d1cb      	bne.n	800d6c4 <_scanf_i+0x58>
 800d72c:	6863      	ldr	r3, [r4, #4]
 800d72e:	b90b      	cbnz	r3, 800d734 <_scanf_i+0xc8>
 800d730:	230a      	movs	r3, #10
 800d732:	6063      	str	r3, [r4, #4]
 800d734:	6863      	ldr	r3, [r4, #4]
 800d736:	4945      	ldr	r1, [pc, #276]	@ (800d84c <_scanf_i+0x1e0>)
 800d738:	6960      	ldr	r0, [r4, #20]
 800d73a:	1ac9      	subs	r1, r1, r3
 800d73c:	f000 f930 	bl	800d9a0 <__sccl>
 800d740:	f04f 0b00 	mov.w	fp, #0
 800d744:	68a3      	ldr	r3, [r4, #8]
 800d746:	6822      	ldr	r2, [r4, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d03d      	beq.n	800d7c8 <_scanf_i+0x15c>
 800d74c:	6831      	ldr	r1, [r6, #0]
 800d74e:	6960      	ldr	r0, [r4, #20]
 800d750:	f891 c000 	ldrb.w	ip, [r1]
 800d754:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d758:	2800      	cmp	r0, #0
 800d75a:	d035      	beq.n	800d7c8 <_scanf_i+0x15c>
 800d75c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d760:	d124      	bne.n	800d7ac <_scanf_i+0x140>
 800d762:	0510      	lsls	r0, r2, #20
 800d764:	d522      	bpl.n	800d7ac <_scanf_i+0x140>
 800d766:	f10b 0b01 	add.w	fp, fp, #1
 800d76a:	f1b9 0f00 	cmp.w	r9, #0
 800d76e:	d003      	beq.n	800d778 <_scanf_i+0x10c>
 800d770:	3301      	adds	r3, #1
 800d772:	f109 39ff 	add.w	r9, r9, #4294967295
 800d776:	60a3      	str	r3, [r4, #8]
 800d778:	6873      	ldr	r3, [r6, #4]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	6073      	str	r3, [r6, #4]
 800d780:	dd1b      	ble.n	800d7ba <_scanf_i+0x14e>
 800d782:	6833      	ldr	r3, [r6, #0]
 800d784:	3301      	adds	r3, #1
 800d786:	6033      	str	r3, [r6, #0]
 800d788:	68a3      	ldr	r3, [r4, #8]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	60a3      	str	r3, [r4, #8]
 800d78e:	e7d9      	b.n	800d744 <_scanf_i+0xd8>
 800d790:	f1bb 0f02 	cmp.w	fp, #2
 800d794:	d1ae      	bne.n	800d6f4 <_scanf_i+0x88>
 800d796:	6822      	ldr	r2, [r4, #0]
 800d798:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d79c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d7a0:	d1c4      	bne.n	800d72c <_scanf_i+0xc0>
 800d7a2:	2110      	movs	r1, #16
 800d7a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d7a8:	6061      	str	r1, [r4, #4]
 800d7aa:	e7a2      	b.n	800d6f2 <_scanf_i+0x86>
 800d7ac:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d7b0:	6022      	str	r2, [r4, #0]
 800d7b2:	780b      	ldrb	r3, [r1, #0]
 800d7b4:	f805 3b01 	strb.w	r3, [r5], #1
 800d7b8:	e7de      	b.n	800d778 <_scanf_i+0x10c>
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4650      	mov	r0, sl
 800d7be:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d7c2:	4798      	blx	r3
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d0df      	beq.n	800d788 <_scanf_i+0x11c>
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	05d9      	lsls	r1, r3, #23
 800d7cc:	d50d      	bpl.n	800d7ea <_scanf_i+0x17e>
 800d7ce:	42bd      	cmp	r5, r7
 800d7d0:	d909      	bls.n	800d7e6 <_scanf_i+0x17a>
 800d7d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d7d6:	4632      	mov	r2, r6
 800d7d8:	4650      	mov	r0, sl
 800d7da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d7de:	f105 39ff 	add.w	r9, r5, #4294967295
 800d7e2:	4798      	blx	r3
 800d7e4:	464d      	mov	r5, r9
 800d7e6:	42bd      	cmp	r5, r7
 800d7e8:	d028      	beq.n	800d83c <_scanf_i+0x1d0>
 800d7ea:	6822      	ldr	r2, [r4, #0]
 800d7ec:	f012 0210 	ands.w	r2, r2, #16
 800d7f0:	d113      	bne.n	800d81a <_scanf_i+0x1ae>
 800d7f2:	702a      	strb	r2, [r5, #0]
 800d7f4:	4639      	mov	r1, r7
 800d7f6:	6863      	ldr	r3, [r4, #4]
 800d7f8:	4650      	mov	r0, sl
 800d7fa:	9e01      	ldr	r6, [sp, #4]
 800d7fc:	47b0      	blx	r6
 800d7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800d802:	6821      	ldr	r1, [r4, #0]
 800d804:	1d1a      	adds	r2, r3, #4
 800d806:	f8c8 2000 	str.w	r2, [r8]
 800d80a:	f011 0f20 	tst.w	r1, #32
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	d00f      	beq.n	800d832 <_scanf_i+0x1c6>
 800d812:	6018      	str	r0, [r3, #0]
 800d814:	68e3      	ldr	r3, [r4, #12]
 800d816:	3301      	adds	r3, #1
 800d818:	60e3      	str	r3, [r4, #12]
 800d81a:	2000      	movs	r0, #0
 800d81c:	6923      	ldr	r3, [r4, #16]
 800d81e:	1bed      	subs	r5, r5, r7
 800d820:	445d      	add	r5, fp
 800d822:	442b      	add	r3, r5
 800d824:	6123      	str	r3, [r4, #16]
 800d826:	b007      	add	sp, #28
 800d828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82c:	f04f 0b00 	mov.w	fp, #0
 800d830:	e7ca      	b.n	800d7c8 <_scanf_i+0x15c>
 800d832:	07ca      	lsls	r2, r1, #31
 800d834:	bf4c      	ite	mi
 800d836:	8018      	strhmi	r0, [r3, #0]
 800d838:	6018      	strpl	r0, [r3, #0]
 800d83a:	e7eb      	b.n	800d814 <_scanf_i+0x1a8>
 800d83c:	2001      	movs	r0, #1
 800d83e:	e7f2      	b.n	800d826 <_scanf_i+0x1ba>
 800d840:	0800e95c 	.word	0x0800e95c
 800d844:	0800cf69 	.word	0x0800cf69
 800d848:	0800e359 	.word	0x0800e359
 800d84c:	0800eaca 	.word	0x0800eaca

0800d850 <__sflush_r>:
 800d850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	0716      	lsls	r6, r2, #28
 800d858:	4605      	mov	r5, r0
 800d85a:	460c      	mov	r4, r1
 800d85c:	d454      	bmi.n	800d908 <__sflush_r+0xb8>
 800d85e:	684b      	ldr	r3, [r1, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	dc02      	bgt.n	800d86a <__sflush_r+0x1a>
 800d864:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d866:	2b00      	cmp	r3, #0
 800d868:	dd48      	ble.n	800d8fc <__sflush_r+0xac>
 800d86a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d86c:	2e00      	cmp	r6, #0
 800d86e:	d045      	beq.n	800d8fc <__sflush_r+0xac>
 800d870:	2300      	movs	r3, #0
 800d872:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d876:	682f      	ldr	r7, [r5, #0]
 800d878:	6a21      	ldr	r1, [r4, #32]
 800d87a:	602b      	str	r3, [r5, #0]
 800d87c:	d030      	beq.n	800d8e0 <__sflush_r+0x90>
 800d87e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d880:	89a3      	ldrh	r3, [r4, #12]
 800d882:	0759      	lsls	r1, r3, #29
 800d884:	d505      	bpl.n	800d892 <__sflush_r+0x42>
 800d886:	6863      	ldr	r3, [r4, #4]
 800d888:	1ad2      	subs	r2, r2, r3
 800d88a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d88c:	b10b      	cbz	r3, 800d892 <__sflush_r+0x42>
 800d88e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d890:	1ad2      	subs	r2, r2, r3
 800d892:	2300      	movs	r3, #0
 800d894:	4628      	mov	r0, r5
 800d896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d898:	6a21      	ldr	r1, [r4, #32]
 800d89a:	47b0      	blx	r6
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	d106      	bne.n	800d8b0 <__sflush_r+0x60>
 800d8a2:	6829      	ldr	r1, [r5, #0]
 800d8a4:	291d      	cmp	r1, #29
 800d8a6:	d82b      	bhi.n	800d900 <__sflush_r+0xb0>
 800d8a8:	4a28      	ldr	r2, [pc, #160]	@ (800d94c <__sflush_r+0xfc>)
 800d8aa:	40ca      	lsrs	r2, r1
 800d8ac:	07d6      	lsls	r6, r2, #31
 800d8ae:	d527      	bpl.n	800d900 <__sflush_r+0xb0>
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	6062      	str	r2, [r4, #4]
 800d8b4:	6922      	ldr	r2, [r4, #16]
 800d8b6:	04d9      	lsls	r1, r3, #19
 800d8b8:	6022      	str	r2, [r4, #0]
 800d8ba:	d504      	bpl.n	800d8c6 <__sflush_r+0x76>
 800d8bc:	1c42      	adds	r2, r0, #1
 800d8be:	d101      	bne.n	800d8c4 <__sflush_r+0x74>
 800d8c0:	682b      	ldr	r3, [r5, #0]
 800d8c2:	b903      	cbnz	r3, 800d8c6 <__sflush_r+0x76>
 800d8c4:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8c8:	602f      	str	r7, [r5, #0]
 800d8ca:	b1b9      	cbz	r1, 800d8fc <__sflush_r+0xac>
 800d8cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8d0:	4299      	cmp	r1, r3
 800d8d2:	d002      	beq.n	800d8da <__sflush_r+0x8a>
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f7fd ff2f 	bl	800b738 <_free_r>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8de:	e00d      	b.n	800d8fc <__sflush_r+0xac>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	47b0      	blx	r6
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	1c50      	adds	r0, r2, #1
 800d8ea:	d1c9      	bne.n	800d880 <__sflush_r+0x30>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0c6      	beq.n	800d880 <__sflush_r+0x30>
 800d8f2:	2b1d      	cmp	r3, #29
 800d8f4:	d001      	beq.n	800d8fa <__sflush_r+0xaa>
 800d8f6:	2b16      	cmp	r3, #22
 800d8f8:	d11d      	bne.n	800d936 <__sflush_r+0xe6>
 800d8fa:	602f      	str	r7, [r5, #0]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e021      	b.n	800d944 <__sflush_r+0xf4>
 800d900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d904:	b21b      	sxth	r3, r3
 800d906:	e01a      	b.n	800d93e <__sflush_r+0xee>
 800d908:	690f      	ldr	r7, [r1, #16]
 800d90a:	2f00      	cmp	r7, #0
 800d90c:	d0f6      	beq.n	800d8fc <__sflush_r+0xac>
 800d90e:	0793      	lsls	r3, r2, #30
 800d910:	bf18      	it	ne
 800d912:	2300      	movne	r3, #0
 800d914:	680e      	ldr	r6, [r1, #0]
 800d916:	bf08      	it	eq
 800d918:	694b      	ldreq	r3, [r1, #20]
 800d91a:	1bf6      	subs	r6, r6, r7
 800d91c:	600f      	str	r7, [r1, #0]
 800d91e:	608b      	str	r3, [r1, #8]
 800d920:	2e00      	cmp	r6, #0
 800d922:	ddeb      	ble.n	800d8fc <__sflush_r+0xac>
 800d924:	4633      	mov	r3, r6
 800d926:	463a      	mov	r2, r7
 800d928:	4628      	mov	r0, r5
 800d92a:	6a21      	ldr	r1, [r4, #32]
 800d92c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d930:	47e0      	blx	ip
 800d932:	2800      	cmp	r0, #0
 800d934:	dc07      	bgt.n	800d946 <__sflush_r+0xf6>
 800d936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d93e:	f04f 30ff 	mov.w	r0, #4294967295
 800d942:	81a3      	strh	r3, [r4, #12]
 800d944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d946:	4407      	add	r7, r0
 800d948:	1a36      	subs	r6, r6, r0
 800d94a:	e7e9      	b.n	800d920 <__sflush_r+0xd0>
 800d94c:	20400001 	.word	0x20400001

0800d950 <_fflush_r>:
 800d950:	b538      	push	{r3, r4, r5, lr}
 800d952:	690b      	ldr	r3, [r1, #16]
 800d954:	4605      	mov	r5, r0
 800d956:	460c      	mov	r4, r1
 800d958:	b913      	cbnz	r3, 800d960 <_fflush_r+0x10>
 800d95a:	2500      	movs	r5, #0
 800d95c:	4628      	mov	r0, r5
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	b118      	cbz	r0, 800d96a <_fflush_r+0x1a>
 800d962:	6a03      	ldr	r3, [r0, #32]
 800d964:	b90b      	cbnz	r3, 800d96a <_fflush_r+0x1a>
 800d966:	f7fc ff2d 	bl	800a7c4 <__sinit>
 800d96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0f3      	beq.n	800d95a <_fflush_r+0xa>
 800d972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d974:	07d0      	lsls	r0, r2, #31
 800d976:	d404      	bmi.n	800d982 <_fflush_r+0x32>
 800d978:	0599      	lsls	r1, r3, #22
 800d97a:	d402      	bmi.n	800d982 <_fflush_r+0x32>
 800d97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d97e:	f7fd f868 	bl	800aa52 <__retarget_lock_acquire_recursive>
 800d982:	4628      	mov	r0, r5
 800d984:	4621      	mov	r1, r4
 800d986:	f7ff ff63 	bl	800d850 <__sflush_r>
 800d98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d98c:	4605      	mov	r5, r0
 800d98e:	07da      	lsls	r2, r3, #31
 800d990:	d4e4      	bmi.n	800d95c <_fflush_r+0xc>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	059b      	lsls	r3, r3, #22
 800d996:	d4e1      	bmi.n	800d95c <_fflush_r+0xc>
 800d998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d99a:	f7fd f85b 	bl	800aa54 <__retarget_lock_release_recursive>
 800d99e:	e7dd      	b.n	800d95c <_fflush_r+0xc>

0800d9a0 <__sccl>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	780b      	ldrb	r3, [r1, #0]
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	2b5e      	cmp	r3, #94	@ 0x5e
 800d9a8:	bf0b      	itete	eq
 800d9aa:	784b      	ldrbeq	r3, [r1, #1]
 800d9ac:	1c4a      	addne	r2, r1, #1
 800d9ae:	1c8a      	addeq	r2, r1, #2
 800d9b0:	2100      	movne	r1, #0
 800d9b2:	bf08      	it	eq
 800d9b4:	2101      	moveq	r1, #1
 800d9b6:	3801      	subs	r0, #1
 800d9b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d9bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d9c0:	42a8      	cmp	r0, r5
 800d9c2:	d1fb      	bne.n	800d9bc <__sccl+0x1c>
 800d9c4:	b90b      	cbnz	r3, 800d9ca <__sccl+0x2a>
 800d9c6:	1e50      	subs	r0, r2, #1
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	f081 0101 	eor.w	r1, r1, #1
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	54e1      	strb	r1, [r4, r3]
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d9d8:	2d2d      	cmp	r5, #45	@ 0x2d
 800d9da:	d005      	beq.n	800d9e8 <__sccl+0x48>
 800d9dc:	2d5d      	cmp	r5, #93	@ 0x5d
 800d9de:	d016      	beq.n	800da0e <__sccl+0x6e>
 800d9e0:	2d00      	cmp	r5, #0
 800d9e2:	d0f1      	beq.n	800d9c8 <__sccl+0x28>
 800d9e4:	462b      	mov	r3, r5
 800d9e6:	e7f2      	b.n	800d9ce <__sccl+0x2e>
 800d9e8:	7846      	ldrb	r6, [r0, #1]
 800d9ea:	2e5d      	cmp	r6, #93	@ 0x5d
 800d9ec:	d0fa      	beq.n	800d9e4 <__sccl+0x44>
 800d9ee:	42b3      	cmp	r3, r6
 800d9f0:	dcf8      	bgt.n	800d9e4 <__sccl+0x44>
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	3002      	adds	r0, #2
 800d9f6:	3201      	adds	r2, #1
 800d9f8:	4296      	cmp	r6, r2
 800d9fa:	54a1      	strb	r1, [r4, r2]
 800d9fc:	dcfb      	bgt.n	800d9f6 <__sccl+0x56>
 800d9fe:	1af2      	subs	r2, r6, r3
 800da00:	3a01      	subs	r2, #1
 800da02:	42b3      	cmp	r3, r6
 800da04:	bfa8      	it	ge
 800da06:	2200      	movge	r2, #0
 800da08:	1c5d      	adds	r5, r3, #1
 800da0a:	18ab      	adds	r3, r5, r2
 800da0c:	e7e1      	b.n	800d9d2 <__sccl+0x32>
 800da0e:	4610      	mov	r0, r2
 800da10:	e7da      	b.n	800d9c8 <__sccl+0x28>

0800da12 <__submore>:
 800da12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da16:	460c      	mov	r4, r1
 800da18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800da1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da1e:	4299      	cmp	r1, r3
 800da20:	d11b      	bne.n	800da5a <__submore+0x48>
 800da22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800da26:	f7fd fef9 	bl	800b81c <_malloc_r>
 800da2a:	b918      	cbnz	r0, 800da34 <__submore+0x22>
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295
 800da30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da38:	63a3      	str	r3, [r4, #56]	@ 0x38
 800da3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800da3e:	6360      	str	r0, [r4, #52]	@ 0x34
 800da40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800da44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800da48:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800da4c:	7043      	strb	r3, [r0, #1]
 800da4e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800da52:	7003      	strb	r3, [r0, #0]
 800da54:	6020      	str	r0, [r4, #0]
 800da56:	2000      	movs	r0, #0
 800da58:	e7ea      	b.n	800da30 <__submore+0x1e>
 800da5a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800da5c:	0077      	lsls	r7, r6, #1
 800da5e:	463a      	mov	r2, r7
 800da60:	f000 fbdd 	bl	800e21e <_realloc_r>
 800da64:	4605      	mov	r5, r0
 800da66:	2800      	cmp	r0, #0
 800da68:	d0e0      	beq.n	800da2c <__submore+0x1a>
 800da6a:	eb00 0806 	add.w	r8, r0, r6
 800da6e:	4601      	mov	r1, r0
 800da70:	4632      	mov	r2, r6
 800da72:	4640      	mov	r0, r8
 800da74:	f000 f842 	bl	800dafc <memcpy>
 800da78:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800da7c:	f8c4 8000 	str.w	r8, [r4]
 800da80:	e7e9      	b.n	800da56 <__submore+0x44>

0800da82 <memmove>:
 800da82:	4288      	cmp	r0, r1
 800da84:	b510      	push	{r4, lr}
 800da86:	eb01 0402 	add.w	r4, r1, r2
 800da8a:	d902      	bls.n	800da92 <memmove+0x10>
 800da8c:	4284      	cmp	r4, r0
 800da8e:	4623      	mov	r3, r4
 800da90:	d807      	bhi.n	800daa2 <memmove+0x20>
 800da92:	1e43      	subs	r3, r0, #1
 800da94:	42a1      	cmp	r1, r4
 800da96:	d008      	beq.n	800daaa <memmove+0x28>
 800da98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daa0:	e7f8      	b.n	800da94 <memmove+0x12>
 800daa2:	4601      	mov	r1, r0
 800daa4:	4402      	add	r2, r0
 800daa6:	428a      	cmp	r2, r1
 800daa8:	d100      	bne.n	800daac <memmove+0x2a>
 800daaa:	bd10      	pop	{r4, pc}
 800daac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dab0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dab4:	e7f7      	b.n	800daa6 <memmove+0x24>

0800dab6 <strncmp>:
 800dab6:	b510      	push	{r4, lr}
 800dab8:	b16a      	cbz	r2, 800dad6 <strncmp+0x20>
 800daba:	3901      	subs	r1, #1
 800dabc:	1884      	adds	r4, r0, r2
 800dabe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dac2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d103      	bne.n	800dad2 <strncmp+0x1c>
 800daca:	42a0      	cmp	r0, r4
 800dacc:	d001      	beq.n	800dad2 <strncmp+0x1c>
 800dace:	2a00      	cmp	r2, #0
 800dad0:	d1f5      	bne.n	800dabe <strncmp+0x8>
 800dad2:	1ad0      	subs	r0, r2, r3
 800dad4:	bd10      	pop	{r4, pc}
 800dad6:	4610      	mov	r0, r2
 800dad8:	e7fc      	b.n	800dad4 <strncmp+0x1e>
	...

0800dadc <_sbrk_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	2300      	movs	r3, #0
 800dae0:	4d05      	ldr	r5, [pc, #20]	@ (800daf8 <_sbrk_r+0x1c>)
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	f7f4 f87e 	bl	8001be8 <_sbrk>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_sbrk_r+0x1a>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_sbrk_r+0x1a>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	200017a8 	.word	0x200017a8

0800dafc <memcpy>:
 800dafc:	440a      	add	r2, r1
 800dafe:	4291      	cmp	r1, r2
 800db00:	f100 33ff 	add.w	r3, r0, #4294967295
 800db04:	d100      	bne.n	800db08 <memcpy+0xc>
 800db06:	4770      	bx	lr
 800db08:	b510      	push	{r4, lr}
 800db0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db0e:	4291      	cmp	r1, r2
 800db10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db14:	d1f9      	bne.n	800db0a <memcpy+0xe>
 800db16:	bd10      	pop	{r4, pc}

0800db18 <nan>:
 800db18:	2000      	movs	r0, #0
 800db1a:	4901      	ldr	r1, [pc, #4]	@ (800db20 <nan+0x8>)
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	7ff80000 	.word	0x7ff80000

0800db24 <__assert_func>:
 800db24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db26:	4614      	mov	r4, r2
 800db28:	461a      	mov	r2, r3
 800db2a:	4b09      	ldr	r3, [pc, #36]	@ (800db50 <__assert_func+0x2c>)
 800db2c:	4605      	mov	r5, r0
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68d8      	ldr	r0, [r3, #12]
 800db32:	b14c      	cbz	r4, 800db48 <__assert_func+0x24>
 800db34:	4b07      	ldr	r3, [pc, #28]	@ (800db54 <__assert_func+0x30>)
 800db36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db3a:	9100      	str	r1, [sp, #0]
 800db3c:	462b      	mov	r3, r5
 800db3e:	4906      	ldr	r1, [pc, #24]	@ (800db58 <__assert_func+0x34>)
 800db40:	f000 fc1a 	bl	800e378 <fiprintf>
 800db44:	f000 fc2a 	bl	800e39c <abort>
 800db48:	4b04      	ldr	r3, [pc, #16]	@ (800db5c <__assert_func+0x38>)
 800db4a:	461c      	mov	r4, r3
 800db4c:	e7f3      	b.n	800db36 <__assert_func+0x12>
 800db4e:	bf00      	nop
 800db50:	20000190 	.word	0x20000190
 800db54:	0800eadd 	.word	0x0800eadd
 800db58:	0800eaea 	.word	0x0800eaea
 800db5c:	0800eb18 	.word	0x0800eb18

0800db60 <_calloc_r>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	fba1 5402 	umull	r5, r4, r1, r2
 800db66:	b934      	cbnz	r4, 800db76 <_calloc_r+0x16>
 800db68:	4629      	mov	r1, r5
 800db6a:	f7fd fe57 	bl	800b81c <_malloc_r>
 800db6e:	4606      	mov	r6, r0
 800db70:	b928      	cbnz	r0, 800db7e <_calloc_r+0x1e>
 800db72:	4630      	mov	r0, r6
 800db74:	bd70      	pop	{r4, r5, r6, pc}
 800db76:	220c      	movs	r2, #12
 800db78:	2600      	movs	r6, #0
 800db7a:	6002      	str	r2, [r0, #0]
 800db7c:	e7f9      	b.n	800db72 <_calloc_r+0x12>
 800db7e:	462a      	mov	r2, r5
 800db80:	4621      	mov	r1, r4
 800db82:	f7fc fee8 	bl	800a956 <memset>
 800db86:	e7f4      	b.n	800db72 <_calloc_r+0x12>

0800db88 <rshift>:
 800db88:	6903      	ldr	r3, [r0, #16]
 800db8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db92:	f100 0414 	add.w	r4, r0, #20
 800db96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db9a:	dd46      	ble.n	800dc2a <rshift+0xa2>
 800db9c:	f011 011f 	ands.w	r1, r1, #31
 800dba0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dba4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dba8:	d10c      	bne.n	800dbc4 <rshift+0x3c>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f100 0710 	add.w	r7, r0, #16
 800dbb0:	42b1      	cmp	r1, r6
 800dbb2:	d335      	bcc.n	800dc20 <rshift+0x98>
 800dbb4:	1a9b      	subs	r3, r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	1eea      	subs	r2, r5, #3
 800dbba:	4296      	cmp	r6, r2
 800dbbc:	bf38      	it	cc
 800dbbe:	2300      	movcc	r3, #0
 800dbc0:	4423      	add	r3, r4
 800dbc2:	e015      	b.n	800dbf0 <rshift+0x68>
 800dbc4:	46a1      	mov	r9, r4
 800dbc6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dbca:	f1c1 0820 	rsb	r8, r1, #32
 800dbce:	40cf      	lsrs	r7, r1
 800dbd0:	f105 0e04 	add.w	lr, r5, #4
 800dbd4:	4576      	cmp	r6, lr
 800dbd6:	46f4      	mov	ip, lr
 800dbd8:	d816      	bhi.n	800dc08 <rshift+0x80>
 800dbda:	1a9a      	subs	r2, r3, r2
 800dbdc:	0092      	lsls	r2, r2, #2
 800dbde:	3a04      	subs	r2, #4
 800dbe0:	3501      	adds	r5, #1
 800dbe2:	42ae      	cmp	r6, r5
 800dbe4:	bf38      	it	cc
 800dbe6:	2200      	movcc	r2, #0
 800dbe8:	18a3      	adds	r3, r4, r2
 800dbea:	50a7      	str	r7, [r4, r2]
 800dbec:	b107      	cbz	r7, 800dbf0 <rshift+0x68>
 800dbee:	3304      	adds	r3, #4
 800dbf0:	42a3      	cmp	r3, r4
 800dbf2:	eba3 0204 	sub.w	r2, r3, r4
 800dbf6:	bf08      	it	eq
 800dbf8:	2300      	moveq	r3, #0
 800dbfa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dbfe:	6102      	str	r2, [r0, #16]
 800dc00:	bf08      	it	eq
 800dc02:	6143      	streq	r3, [r0, #20]
 800dc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc08:	f8dc c000 	ldr.w	ip, [ip]
 800dc0c:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc10:	ea4c 0707 	orr.w	r7, ip, r7
 800dc14:	f849 7b04 	str.w	r7, [r9], #4
 800dc18:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc1c:	40cf      	lsrs	r7, r1
 800dc1e:	e7d9      	b.n	800dbd4 <rshift+0x4c>
 800dc20:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc24:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc28:	e7c2      	b.n	800dbb0 <rshift+0x28>
 800dc2a:	4623      	mov	r3, r4
 800dc2c:	e7e0      	b.n	800dbf0 <rshift+0x68>

0800dc2e <__hexdig_fun>:
 800dc2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dc32:	2b09      	cmp	r3, #9
 800dc34:	d802      	bhi.n	800dc3c <__hexdig_fun+0xe>
 800dc36:	3820      	subs	r0, #32
 800dc38:	b2c0      	uxtb	r0, r0
 800dc3a:	4770      	bx	lr
 800dc3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dc40:	2b05      	cmp	r3, #5
 800dc42:	d801      	bhi.n	800dc48 <__hexdig_fun+0x1a>
 800dc44:	3847      	subs	r0, #71	@ 0x47
 800dc46:	e7f7      	b.n	800dc38 <__hexdig_fun+0xa>
 800dc48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dc4c:	2b05      	cmp	r3, #5
 800dc4e:	d801      	bhi.n	800dc54 <__hexdig_fun+0x26>
 800dc50:	3827      	subs	r0, #39	@ 0x27
 800dc52:	e7f1      	b.n	800dc38 <__hexdig_fun+0xa>
 800dc54:	2000      	movs	r0, #0
 800dc56:	4770      	bx	lr

0800dc58 <__gethex>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	468a      	mov	sl, r1
 800dc5e:	4690      	mov	r8, r2
 800dc60:	b085      	sub	sp, #20
 800dc62:	9302      	str	r3, [sp, #8]
 800dc64:	680b      	ldr	r3, [r1, #0]
 800dc66:	9001      	str	r0, [sp, #4]
 800dc68:	1c9c      	adds	r4, r3, #2
 800dc6a:	46a1      	mov	r9, r4
 800dc6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dc70:	2830      	cmp	r0, #48	@ 0x30
 800dc72:	d0fa      	beq.n	800dc6a <__gethex+0x12>
 800dc74:	eba9 0303 	sub.w	r3, r9, r3
 800dc78:	f1a3 0b02 	sub.w	fp, r3, #2
 800dc7c:	f7ff ffd7 	bl	800dc2e <__hexdig_fun>
 800dc80:	4605      	mov	r5, r0
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d168      	bne.n	800dd58 <__gethex+0x100>
 800dc86:	2201      	movs	r2, #1
 800dc88:	4648      	mov	r0, r9
 800dc8a:	499f      	ldr	r1, [pc, #636]	@ (800df08 <__gethex+0x2b0>)
 800dc8c:	f7ff ff13 	bl	800dab6 <strncmp>
 800dc90:	4607      	mov	r7, r0
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d167      	bne.n	800dd66 <__gethex+0x10e>
 800dc96:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc9a:	4626      	mov	r6, r4
 800dc9c:	f7ff ffc7 	bl	800dc2e <__hexdig_fun>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d062      	beq.n	800dd6a <__gethex+0x112>
 800dca4:	4623      	mov	r3, r4
 800dca6:	7818      	ldrb	r0, [r3, #0]
 800dca8:	4699      	mov	r9, r3
 800dcaa:	2830      	cmp	r0, #48	@ 0x30
 800dcac:	f103 0301 	add.w	r3, r3, #1
 800dcb0:	d0f9      	beq.n	800dca6 <__gethex+0x4e>
 800dcb2:	f7ff ffbc 	bl	800dc2e <__hexdig_fun>
 800dcb6:	fab0 f580 	clz	r5, r0
 800dcba:	f04f 0b01 	mov.w	fp, #1
 800dcbe:	096d      	lsrs	r5, r5, #5
 800dcc0:	464a      	mov	r2, r9
 800dcc2:	4616      	mov	r6, r2
 800dcc4:	7830      	ldrb	r0, [r6, #0]
 800dcc6:	3201      	adds	r2, #1
 800dcc8:	f7ff ffb1 	bl	800dc2e <__hexdig_fun>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1f8      	bne.n	800dcc2 <__gethex+0x6a>
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	498c      	ldr	r1, [pc, #560]	@ (800df08 <__gethex+0x2b0>)
 800dcd6:	f7ff feee 	bl	800dab6 <strncmp>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d13f      	bne.n	800dd5e <__gethex+0x106>
 800dcde:	b944      	cbnz	r4, 800dcf2 <__gethex+0x9a>
 800dce0:	1c74      	adds	r4, r6, #1
 800dce2:	4622      	mov	r2, r4
 800dce4:	4616      	mov	r6, r2
 800dce6:	7830      	ldrb	r0, [r6, #0]
 800dce8:	3201      	adds	r2, #1
 800dcea:	f7ff ffa0 	bl	800dc2e <__hexdig_fun>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d1f8      	bne.n	800dce4 <__gethex+0x8c>
 800dcf2:	1ba4      	subs	r4, r4, r6
 800dcf4:	00a7      	lsls	r7, r4, #2
 800dcf6:	7833      	ldrb	r3, [r6, #0]
 800dcf8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dcfc:	2b50      	cmp	r3, #80	@ 0x50
 800dcfe:	d13e      	bne.n	800dd7e <__gethex+0x126>
 800dd00:	7873      	ldrb	r3, [r6, #1]
 800dd02:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd04:	d033      	beq.n	800dd6e <__gethex+0x116>
 800dd06:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd08:	d034      	beq.n	800dd74 <__gethex+0x11c>
 800dd0a:	2400      	movs	r4, #0
 800dd0c:	1c71      	adds	r1, r6, #1
 800dd0e:	7808      	ldrb	r0, [r1, #0]
 800dd10:	f7ff ff8d 	bl	800dc2e <__hexdig_fun>
 800dd14:	1e43      	subs	r3, r0, #1
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	2b18      	cmp	r3, #24
 800dd1a:	d830      	bhi.n	800dd7e <__gethex+0x126>
 800dd1c:	f1a0 0210 	sub.w	r2, r0, #16
 800dd20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd24:	f7ff ff83 	bl	800dc2e <__hexdig_fun>
 800dd28:	f100 3cff 	add.w	ip, r0, #4294967295
 800dd2c:	fa5f fc8c 	uxtb.w	ip, ip
 800dd30:	f1bc 0f18 	cmp.w	ip, #24
 800dd34:	f04f 030a 	mov.w	r3, #10
 800dd38:	d91e      	bls.n	800dd78 <__gethex+0x120>
 800dd3a:	b104      	cbz	r4, 800dd3e <__gethex+0xe6>
 800dd3c:	4252      	negs	r2, r2
 800dd3e:	4417      	add	r7, r2
 800dd40:	f8ca 1000 	str.w	r1, [sl]
 800dd44:	b1ed      	cbz	r5, 800dd82 <__gethex+0x12a>
 800dd46:	f1bb 0f00 	cmp.w	fp, #0
 800dd4a:	bf0c      	ite	eq
 800dd4c:	2506      	moveq	r5, #6
 800dd4e:	2500      	movne	r5, #0
 800dd50:	4628      	mov	r0, r5
 800dd52:	b005      	add	sp, #20
 800dd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd58:	2500      	movs	r5, #0
 800dd5a:	462c      	mov	r4, r5
 800dd5c:	e7b0      	b.n	800dcc0 <__gethex+0x68>
 800dd5e:	2c00      	cmp	r4, #0
 800dd60:	d1c7      	bne.n	800dcf2 <__gethex+0x9a>
 800dd62:	4627      	mov	r7, r4
 800dd64:	e7c7      	b.n	800dcf6 <__gethex+0x9e>
 800dd66:	464e      	mov	r6, r9
 800dd68:	462f      	mov	r7, r5
 800dd6a:	2501      	movs	r5, #1
 800dd6c:	e7c3      	b.n	800dcf6 <__gethex+0x9e>
 800dd6e:	2400      	movs	r4, #0
 800dd70:	1cb1      	adds	r1, r6, #2
 800dd72:	e7cc      	b.n	800dd0e <__gethex+0xb6>
 800dd74:	2401      	movs	r4, #1
 800dd76:	e7fb      	b.n	800dd70 <__gethex+0x118>
 800dd78:	fb03 0002 	mla	r0, r3, r2, r0
 800dd7c:	e7ce      	b.n	800dd1c <__gethex+0xc4>
 800dd7e:	4631      	mov	r1, r6
 800dd80:	e7de      	b.n	800dd40 <__gethex+0xe8>
 800dd82:	4629      	mov	r1, r5
 800dd84:	eba6 0309 	sub.w	r3, r6, r9
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	2b07      	cmp	r3, #7
 800dd8c:	dc0a      	bgt.n	800dda4 <__gethex+0x14c>
 800dd8e:	9801      	ldr	r0, [sp, #4]
 800dd90:	f7fd fdd0 	bl	800b934 <_Balloc>
 800dd94:	4604      	mov	r4, r0
 800dd96:	b940      	cbnz	r0, 800ddaa <__gethex+0x152>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	21e4      	movs	r1, #228	@ 0xe4
 800dd9c:	4b5b      	ldr	r3, [pc, #364]	@ (800df0c <__gethex+0x2b4>)
 800dd9e:	485c      	ldr	r0, [pc, #368]	@ (800df10 <__gethex+0x2b8>)
 800dda0:	f7ff fec0 	bl	800db24 <__assert_func>
 800dda4:	3101      	adds	r1, #1
 800dda6:	105b      	asrs	r3, r3, #1
 800dda8:	e7ef      	b.n	800dd8a <__gethex+0x132>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f100 0a14 	add.w	sl, r0, #20
 800ddb0:	4655      	mov	r5, sl
 800ddb2:	469b      	mov	fp, r3
 800ddb4:	45b1      	cmp	r9, r6
 800ddb6:	d337      	bcc.n	800de28 <__gethex+0x1d0>
 800ddb8:	f845 bb04 	str.w	fp, [r5], #4
 800ddbc:	eba5 050a 	sub.w	r5, r5, sl
 800ddc0:	10ad      	asrs	r5, r5, #2
 800ddc2:	6125      	str	r5, [r4, #16]
 800ddc4:	4658      	mov	r0, fp
 800ddc6:	f7fd fea7 	bl	800bb18 <__hi0bits>
 800ddca:	016d      	lsls	r5, r5, #5
 800ddcc:	f8d8 6000 	ldr.w	r6, [r8]
 800ddd0:	1a2d      	subs	r5, r5, r0
 800ddd2:	42b5      	cmp	r5, r6
 800ddd4:	dd54      	ble.n	800de80 <__gethex+0x228>
 800ddd6:	1bad      	subs	r5, r5, r6
 800ddd8:	4629      	mov	r1, r5
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7fe fa29 	bl	800c232 <__any_on>
 800dde0:	4681      	mov	r9, r0
 800dde2:	b178      	cbz	r0, 800de04 <__gethex+0x1ac>
 800dde4:	f04f 0901 	mov.w	r9, #1
 800dde8:	1e6b      	subs	r3, r5, #1
 800ddea:	1159      	asrs	r1, r3, #5
 800ddec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ddf0:	f003 021f 	and.w	r2, r3, #31
 800ddf4:	fa09 f202 	lsl.w	r2, r9, r2
 800ddf8:	420a      	tst	r2, r1
 800ddfa:	d003      	beq.n	800de04 <__gethex+0x1ac>
 800ddfc:	454b      	cmp	r3, r9
 800ddfe:	dc36      	bgt.n	800de6e <__gethex+0x216>
 800de00:	f04f 0902 	mov.w	r9, #2
 800de04:	4629      	mov	r1, r5
 800de06:	4620      	mov	r0, r4
 800de08:	f7ff febe 	bl	800db88 <rshift>
 800de0c:	442f      	add	r7, r5
 800de0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de12:	42bb      	cmp	r3, r7
 800de14:	da42      	bge.n	800de9c <__gethex+0x244>
 800de16:	4621      	mov	r1, r4
 800de18:	9801      	ldr	r0, [sp, #4]
 800de1a:	f7fd fdcb 	bl	800b9b4 <_Bfree>
 800de1e:	2300      	movs	r3, #0
 800de20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de22:	25a3      	movs	r5, #163	@ 0xa3
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	e793      	b.n	800dd50 <__gethex+0xf8>
 800de28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800de2c:	2a2e      	cmp	r2, #46	@ 0x2e
 800de2e:	d012      	beq.n	800de56 <__gethex+0x1fe>
 800de30:	2b20      	cmp	r3, #32
 800de32:	d104      	bne.n	800de3e <__gethex+0x1e6>
 800de34:	f845 bb04 	str.w	fp, [r5], #4
 800de38:	f04f 0b00 	mov.w	fp, #0
 800de3c:	465b      	mov	r3, fp
 800de3e:	7830      	ldrb	r0, [r6, #0]
 800de40:	9303      	str	r3, [sp, #12]
 800de42:	f7ff fef4 	bl	800dc2e <__hexdig_fun>
 800de46:	9b03      	ldr	r3, [sp, #12]
 800de48:	f000 000f 	and.w	r0, r0, #15
 800de4c:	4098      	lsls	r0, r3
 800de4e:	ea4b 0b00 	orr.w	fp, fp, r0
 800de52:	3304      	adds	r3, #4
 800de54:	e7ae      	b.n	800ddb4 <__gethex+0x15c>
 800de56:	45b1      	cmp	r9, r6
 800de58:	d8ea      	bhi.n	800de30 <__gethex+0x1d8>
 800de5a:	2201      	movs	r2, #1
 800de5c:	4630      	mov	r0, r6
 800de5e:	492a      	ldr	r1, [pc, #168]	@ (800df08 <__gethex+0x2b0>)
 800de60:	9303      	str	r3, [sp, #12]
 800de62:	f7ff fe28 	bl	800dab6 <strncmp>
 800de66:	9b03      	ldr	r3, [sp, #12]
 800de68:	2800      	cmp	r0, #0
 800de6a:	d1e1      	bne.n	800de30 <__gethex+0x1d8>
 800de6c:	e7a2      	b.n	800ddb4 <__gethex+0x15c>
 800de6e:	4620      	mov	r0, r4
 800de70:	1ea9      	subs	r1, r5, #2
 800de72:	f7fe f9de 	bl	800c232 <__any_on>
 800de76:	2800      	cmp	r0, #0
 800de78:	d0c2      	beq.n	800de00 <__gethex+0x1a8>
 800de7a:	f04f 0903 	mov.w	r9, #3
 800de7e:	e7c1      	b.n	800de04 <__gethex+0x1ac>
 800de80:	da09      	bge.n	800de96 <__gethex+0x23e>
 800de82:	1b75      	subs	r5, r6, r5
 800de84:	4621      	mov	r1, r4
 800de86:	462a      	mov	r2, r5
 800de88:	9801      	ldr	r0, [sp, #4]
 800de8a:	f7fd ffa3 	bl	800bdd4 <__lshift>
 800de8e:	4604      	mov	r4, r0
 800de90:	1b7f      	subs	r7, r7, r5
 800de92:	f100 0a14 	add.w	sl, r0, #20
 800de96:	f04f 0900 	mov.w	r9, #0
 800de9a:	e7b8      	b.n	800de0e <__gethex+0x1b6>
 800de9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dea0:	42bd      	cmp	r5, r7
 800dea2:	dd6f      	ble.n	800df84 <__gethex+0x32c>
 800dea4:	1bed      	subs	r5, r5, r7
 800dea6:	42ae      	cmp	r6, r5
 800dea8:	dc34      	bgt.n	800df14 <__gethex+0x2bc>
 800deaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d022      	beq.n	800def8 <__gethex+0x2a0>
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d024      	beq.n	800df00 <__gethex+0x2a8>
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d115      	bne.n	800dee6 <__gethex+0x28e>
 800deba:	42ae      	cmp	r6, r5
 800debc:	d113      	bne.n	800dee6 <__gethex+0x28e>
 800debe:	2e01      	cmp	r6, #1
 800dec0:	d10b      	bne.n	800deda <__gethex+0x282>
 800dec2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dec6:	9a02      	ldr	r2, [sp, #8]
 800dec8:	2562      	movs	r5, #98	@ 0x62
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	2301      	movs	r3, #1
 800dece:	6123      	str	r3, [r4, #16]
 800ded0:	f8ca 3000 	str.w	r3, [sl]
 800ded4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ded6:	601c      	str	r4, [r3, #0]
 800ded8:	e73a      	b.n	800dd50 <__gethex+0xf8>
 800deda:	4620      	mov	r0, r4
 800dedc:	1e71      	subs	r1, r6, #1
 800dede:	f7fe f9a8 	bl	800c232 <__any_on>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d1ed      	bne.n	800dec2 <__gethex+0x26a>
 800dee6:	4621      	mov	r1, r4
 800dee8:	9801      	ldr	r0, [sp, #4]
 800deea:	f7fd fd63 	bl	800b9b4 <_Bfree>
 800deee:	2300      	movs	r3, #0
 800def0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800def2:	2550      	movs	r5, #80	@ 0x50
 800def4:	6013      	str	r3, [r2, #0]
 800def6:	e72b      	b.n	800dd50 <__gethex+0xf8>
 800def8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1f3      	bne.n	800dee6 <__gethex+0x28e>
 800defe:	e7e0      	b.n	800dec2 <__gethex+0x26a>
 800df00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1dd      	bne.n	800dec2 <__gethex+0x26a>
 800df06:	e7ee      	b.n	800dee6 <__gethex+0x28e>
 800df08:	0800eaa7 	.word	0x0800eaa7
 800df0c:	0800ea3d 	.word	0x0800ea3d
 800df10:	0800eb19 	.word	0x0800eb19
 800df14:	1e6f      	subs	r7, r5, #1
 800df16:	f1b9 0f00 	cmp.w	r9, #0
 800df1a:	d130      	bne.n	800df7e <__gethex+0x326>
 800df1c:	b127      	cbz	r7, 800df28 <__gethex+0x2d0>
 800df1e:	4639      	mov	r1, r7
 800df20:	4620      	mov	r0, r4
 800df22:	f7fe f986 	bl	800c232 <__any_on>
 800df26:	4681      	mov	r9, r0
 800df28:	2301      	movs	r3, #1
 800df2a:	4629      	mov	r1, r5
 800df2c:	1b76      	subs	r6, r6, r5
 800df2e:	2502      	movs	r5, #2
 800df30:	117a      	asrs	r2, r7, #5
 800df32:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800df36:	f007 071f 	and.w	r7, r7, #31
 800df3a:	40bb      	lsls	r3, r7
 800df3c:	4213      	tst	r3, r2
 800df3e:	4620      	mov	r0, r4
 800df40:	bf18      	it	ne
 800df42:	f049 0902 	orrne.w	r9, r9, #2
 800df46:	f7ff fe1f 	bl	800db88 <rshift>
 800df4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800df4e:	f1b9 0f00 	cmp.w	r9, #0
 800df52:	d047      	beq.n	800dfe4 <__gethex+0x38c>
 800df54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d015      	beq.n	800df88 <__gethex+0x330>
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d017      	beq.n	800df90 <__gethex+0x338>
 800df60:	2b01      	cmp	r3, #1
 800df62:	d109      	bne.n	800df78 <__gethex+0x320>
 800df64:	f019 0f02 	tst.w	r9, #2
 800df68:	d006      	beq.n	800df78 <__gethex+0x320>
 800df6a:	f8da 3000 	ldr.w	r3, [sl]
 800df6e:	ea49 0903 	orr.w	r9, r9, r3
 800df72:	f019 0f01 	tst.w	r9, #1
 800df76:	d10e      	bne.n	800df96 <__gethex+0x33e>
 800df78:	f045 0510 	orr.w	r5, r5, #16
 800df7c:	e032      	b.n	800dfe4 <__gethex+0x38c>
 800df7e:	f04f 0901 	mov.w	r9, #1
 800df82:	e7d1      	b.n	800df28 <__gethex+0x2d0>
 800df84:	2501      	movs	r5, #1
 800df86:	e7e2      	b.n	800df4e <__gethex+0x2f6>
 800df88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df8a:	f1c3 0301 	rsb	r3, r3, #1
 800df8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df92:	2b00      	cmp	r3, #0
 800df94:	d0f0      	beq.n	800df78 <__gethex+0x320>
 800df96:	f04f 0c00 	mov.w	ip, #0
 800df9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df9e:	f104 0314 	add.w	r3, r4, #20
 800dfa2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dfa6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dfb4:	d01b      	beq.n	800dfee <__gethex+0x396>
 800dfb6:	3201      	adds	r2, #1
 800dfb8:	6002      	str	r2, [r0, #0]
 800dfba:	2d02      	cmp	r5, #2
 800dfbc:	f104 0314 	add.w	r3, r4, #20
 800dfc0:	d13c      	bne.n	800e03c <__gethex+0x3e4>
 800dfc2:	f8d8 2000 	ldr.w	r2, [r8]
 800dfc6:	3a01      	subs	r2, #1
 800dfc8:	42b2      	cmp	r2, r6
 800dfca:	d109      	bne.n	800dfe0 <__gethex+0x388>
 800dfcc:	2201      	movs	r2, #1
 800dfce:	1171      	asrs	r1, r6, #5
 800dfd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfd4:	f006 061f 	and.w	r6, r6, #31
 800dfd8:	fa02 f606 	lsl.w	r6, r2, r6
 800dfdc:	421e      	tst	r6, r3
 800dfde:	d13a      	bne.n	800e056 <__gethex+0x3fe>
 800dfe0:	f045 0520 	orr.w	r5, r5, #32
 800dfe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfe6:	601c      	str	r4, [r3, #0]
 800dfe8:	9b02      	ldr	r3, [sp, #8]
 800dfea:	601f      	str	r7, [r3, #0]
 800dfec:	e6b0      	b.n	800dd50 <__gethex+0xf8>
 800dfee:	4299      	cmp	r1, r3
 800dff0:	f843 cc04 	str.w	ip, [r3, #-4]
 800dff4:	d8d9      	bhi.n	800dfaa <__gethex+0x352>
 800dff6:	68a3      	ldr	r3, [r4, #8]
 800dff8:	459b      	cmp	fp, r3
 800dffa:	db17      	blt.n	800e02c <__gethex+0x3d4>
 800dffc:	6861      	ldr	r1, [r4, #4]
 800dffe:	9801      	ldr	r0, [sp, #4]
 800e000:	3101      	adds	r1, #1
 800e002:	f7fd fc97 	bl	800b934 <_Balloc>
 800e006:	4681      	mov	r9, r0
 800e008:	b918      	cbnz	r0, 800e012 <__gethex+0x3ba>
 800e00a:	4602      	mov	r2, r0
 800e00c:	2184      	movs	r1, #132	@ 0x84
 800e00e:	4b19      	ldr	r3, [pc, #100]	@ (800e074 <__gethex+0x41c>)
 800e010:	e6c5      	b.n	800dd9e <__gethex+0x146>
 800e012:	6922      	ldr	r2, [r4, #16]
 800e014:	f104 010c 	add.w	r1, r4, #12
 800e018:	3202      	adds	r2, #2
 800e01a:	0092      	lsls	r2, r2, #2
 800e01c:	300c      	adds	r0, #12
 800e01e:	f7ff fd6d 	bl	800dafc <memcpy>
 800e022:	4621      	mov	r1, r4
 800e024:	9801      	ldr	r0, [sp, #4]
 800e026:	f7fd fcc5 	bl	800b9b4 <_Bfree>
 800e02a:	464c      	mov	r4, r9
 800e02c:	6923      	ldr	r3, [r4, #16]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	6122      	str	r2, [r4, #16]
 800e032:	2201      	movs	r2, #1
 800e034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e038:	615a      	str	r2, [r3, #20]
 800e03a:	e7be      	b.n	800dfba <__gethex+0x362>
 800e03c:	6922      	ldr	r2, [r4, #16]
 800e03e:	455a      	cmp	r2, fp
 800e040:	dd0b      	ble.n	800e05a <__gethex+0x402>
 800e042:	2101      	movs	r1, #1
 800e044:	4620      	mov	r0, r4
 800e046:	f7ff fd9f 	bl	800db88 <rshift>
 800e04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e04e:	3701      	adds	r7, #1
 800e050:	42bb      	cmp	r3, r7
 800e052:	f6ff aee0 	blt.w	800de16 <__gethex+0x1be>
 800e056:	2501      	movs	r5, #1
 800e058:	e7c2      	b.n	800dfe0 <__gethex+0x388>
 800e05a:	f016 061f 	ands.w	r6, r6, #31
 800e05e:	d0fa      	beq.n	800e056 <__gethex+0x3fe>
 800e060:	4453      	add	r3, sl
 800e062:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e066:	f7fd fd57 	bl	800bb18 <__hi0bits>
 800e06a:	f1c6 0620 	rsb	r6, r6, #32
 800e06e:	42b0      	cmp	r0, r6
 800e070:	dbe7      	blt.n	800e042 <__gethex+0x3ea>
 800e072:	e7f0      	b.n	800e056 <__gethex+0x3fe>
 800e074:	0800ea3d 	.word	0x0800ea3d

0800e078 <L_shift>:
 800e078:	f1c2 0208 	rsb	r2, r2, #8
 800e07c:	0092      	lsls	r2, r2, #2
 800e07e:	b570      	push	{r4, r5, r6, lr}
 800e080:	f1c2 0620 	rsb	r6, r2, #32
 800e084:	6843      	ldr	r3, [r0, #4]
 800e086:	6804      	ldr	r4, [r0, #0]
 800e088:	fa03 f506 	lsl.w	r5, r3, r6
 800e08c:	432c      	orrs	r4, r5
 800e08e:	40d3      	lsrs	r3, r2
 800e090:	6004      	str	r4, [r0, #0]
 800e092:	f840 3f04 	str.w	r3, [r0, #4]!
 800e096:	4288      	cmp	r0, r1
 800e098:	d3f4      	bcc.n	800e084 <L_shift+0xc>
 800e09a:	bd70      	pop	{r4, r5, r6, pc}

0800e09c <__match>:
 800e09c:	b530      	push	{r4, r5, lr}
 800e09e:	6803      	ldr	r3, [r0, #0]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a6:	b914      	cbnz	r4, 800e0ae <__match+0x12>
 800e0a8:	6003      	str	r3, [r0, #0]
 800e0aa:	2001      	movs	r0, #1
 800e0ac:	bd30      	pop	{r4, r5, pc}
 800e0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e0b6:	2d19      	cmp	r5, #25
 800e0b8:	bf98      	it	ls
 800e0ba:	3220      	addls	r2, #32
 800e0bc:	42a2      	cmp	r2, r4
 800e0be:	d0f0      	beq.n	800e0a2 <__match+0x6>
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	e7f3      	b.n	800e0ac <__match+0x10>

0800e0c4 <__hexnan>:
 800e0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c8:	2500      	movs	r5, #0
 800e0ca:	680b      	ldr	r3, [r1, #0]
 800e0cc:	4682      	mov	sl, r0
 800e0ce:	115e      	asrs	r6, r3, #5
 800e0d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e0d4:	f013 031f 	ands.w	r3, r3, #31
 800e0d8:	bf18      	it	ne
 800e0da:	3604      	addne	r6, #4
 800e0dc:	1f37      	subs	r7, r6, #4
 800e0de:	4690      	mov	r8, r2
 800e0e0:	46b9      	mov	r9, r7
 800e0e2:	463c      	mov	r4, r7
 800e0e4:	46ab      	mov	fp, r5
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	6801      	ldr	r1, [r0, #0]
 800e0ea:	9301      	str	r3, [sp, #4]
 800e0ec:	f846 5c04 	str.w	r5, [r6, #-4]
 800e0f0:	9502      	str	r5, [sp, #8]
 800e0f2:	784a      	ldrb	r2, [r1, #1]
 800e0f4:	1c4b      	adds	r3, r1, #1
 800e0f6:	9303      	str	r3, [sp, #12]
 800e0f8:	b342      	cbz	r2, 800e14c <__hexnan+0x88>
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	9105      	str	r1, [sp, #20]
 800e0fe:	9204      	str	r2, [sp, #16]
 800e100:	f7ff fd95 	bl	800dc2e <__hexdig_fun>
 800e104:	2800      	cmp	r0, #0
 800e106:	d151      	bne.n	800e1ac <__hexnan+0xe8>
 800e108:	9a04      	ldr	r2, [sp, #16]
 800e10a:	9905      	ldr	r1, [sp, #20]
 800e10c:	2a20      	cmp	r2, #32
 800e10e:	d818      	bhi.n	800e142 <__hexnan+0x7e>
 800e110:	9b02      	ldr	r3, [sp, #8]
 800e112:	459b      	cmp	fp, r3
 800e114:	dd13      	ble.n	800e13e <__hexnan+0x7a>
 800e116:	454c      	cmp	r4, r9
 800e118:	d206      	bcs.n	800e128 <__hexnan+0x64>
 800e11a:	2d07      	cmp	r5, #7
 800e11c:	dc04      	bgt.n	800e128 <__hexnan+0x64>
 800e11e:	462a      	mov	r2, r5
 800e120:	4649      	mov	r1, r9
 800e122:	4620      	mov	r0, r4
 800e124:	f7ff ffa8 	bl	800e078 <L_shift>
 800e128:	4544      	cmp	r4, r8
 800e12a:	d952      	bls.n	800e1d2 <__hexnan+0x10e>
 800e12c:	2300      	movs	r3, #0
 800e12e:	f1a4 0904 	sub.w	r9, r4, #4
 800e132:	f844 3c04 	str.w	r3, [r4, #-4]
 800e136:	461d      	mov	r5, r3
 800e138:	464c      	mov	r4, r9
 800e13a:	f8cd b008 	str.w	fp, [sp, #8]
 800e13e:	9903      	ldr	r1, [sp, #12]
 800e140:	e7d7      	b.n	800e0f2 <__hexnan+0x2e>
 800e142:	2a29      	cmp	r2, #41	@ 0x29
 800e144:	d157      	bne.n	800e1f6 <__hexnan+0x132>
 800e146:	3102      	adds	r1, #2
 800e148:	f8ca 1000 	str.w	r1, [sl]
 800e14c:	f1bb 0f00 	cmp.w	fp, #0
 800e150:	d051      	beq.n	800e1f6 <__hexnan+0x132>
 800e152:	454c      	cmp	r4, r9
 800e154:	d206      	bcs.n	800e164 <__hexnan+0xa0>
 800e156:	2d07      	cmp	r5, #7
 800e158:	dc04      	bgt.n	800e164 <__hexnan+0xa0>
 800e15a:	462a      	mov	r2, r5
 800e15c:	4649      	mov	r1, r9
 800e15e:	4620      	mov	r0, r4
 800e160:	f7ff ff8a 	bl	800e078 <L_shift>
 800e164:	4544      	cmp	r4, r8
 800e166:	d936      	bls.n	800e1d6 <__hexnan+0x112>
 800e168:	4623      	mov	r3, r4
 800e16a:	f1a8 0204 	sub.w	r2, r8, #4
 800e16e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e172:	429f      	cmp	r7, r3
 800e174:	f842 1f04 	str.w	r1, [r2, #4]!
 800e178:	d2f9      	bcs.n	800e16e <__hexnan+0xaa>
 800e17a:	1b3b      	subs	r3, r7, r4
 800e17c:	f023 0303 	bic.w	r3, r3, #3
 800e180:	3304      	adds	r3, #4
 800e182:	3401      	adds	r4, #1
 800e184:	3e03      	subs	r6, #3
 800e186:	42b4      	cmp	r4, r6
 800e188:	bf88      	it	hi
 800e18a:	2304      	movhi	r3, #4
 800e18c:	2200      	movs	r2, #0
 800e18e:	4443      	add	r3, r8
 800e190:	f843 2b04 	str.w	r2, [r3], #4
 800e194:	429f      	cmp	r7, r3
 800e196:	d2fb      	bcs.n	800e190 <__hexnan+0xcc>
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	b91b      	cbnz	r3, 800e1a4 <__hexnan+0xe0>
 800e19c:	4547      	cmp	r7, r8
 800e19e:	d128      	bne.n	800e1f2 <__hexnan+0x12e>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	2005      	movs	r0, #5
 800e1a6:	b007      	add	sp, #28
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	2d08      	cmp	r5, #8
 800e1b0:	f10b 0b01 	add.w	fp, fp, #1
 800e1b4:	dd06      	ble.n	800e1c4 <__hexnan+0x100>
 800e1b6:	4544      	cmp	r4, r8
 800e1b8:	d9c1      	bls.n	800e13e <__hexnan+0x7a>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2501      	movs	r5, #1
 800e1be:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1c2:	3c04      	subs	r4, #4
 800e1c4:	6822      	ldr	r2, [r4, #0]
 800e1c6:	f000 000f 	and.w	r0, r0, #15
 800e1ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e1ce:	6020      	str	r0, [r4, #0]
 800e1d0:	e7b5      	b.n	800e13e <__hexnan+0x7a>
 800e1d2:	2508      	movs	r5, #8
 800e1d4:	e7b3      	b.n	800e13e <__hexnan+0x7a>
 800e1d6:	9b01      	ldr	r3, [sp, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d0dd      	beq.n	800e198 <__hexnan+0xd4>
 800e1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e0:	f1c3 0320 	rsb	r3, r3, #32
 800e1e4:	40da      	lsrs	r2, r3
 800e1e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e1ea:	4013      	ands	r3, r2
 800e1ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800e1f0:	e7d2      	b.n	800e198 <__hexnan+0xd4>
 800e1f2:	3f04      	subs	r7, #4
 800e1f4:	e7d0      	b.n	800e198 <__hexnan+0xd4>
 800e1f6:	2004      	movs	r0, #4
 800e1f8:	e7d5      	b.n	800e1a6 <__hexnan+0xe2>

0800e1fa <__ascii_mbtowc>:
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	b901      	cbnz	r1, 800e200 <__ascii_mbtowc+0x6>
 800e1fe:	a901      	add	r1, sp, #4
 800e200:	b142      	cbz	r2, 800e214 <__ascii_mbtowc+0x1a>
 800e202:	b14b      	cbz	r3, 800e218 <__ascii_mbtowc+0x1e>
 800e204:	7813      	ldrb	r3, [r2, #0]
 800e206:	600b      	str	r3, [r1, #0]
 800e208:	7812      	ldrb	r2, [r2, #0]
 800e20a:	1e10      	subs	r0, r2, #0
 800e20c:	bf18      	it	ne
 800e20e:	2001      	movne	r0, #1
 800e210:	b002      	add	sp, #8
 800e212:	4770      	bx	lr
 800e214:	4610      	mov	r0, r2
 800e216:	e7fb      	b.n	800e210 <__ascii_mbtowc+0x16>
 800e218:	f06f 0001 	mvn.w	r0, #1
 800e21c:	e7f8      	b.n	800e210 <__ascii_mbtowc+0x16>

0800e21e <_realloc_r>:
 800e21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e222:	4607      	mov	r7, r0
 800e224:	4614      	mov	r4, r2
 800e226:	460d      	mov	r5, r1
 800e228:	b921      	cbnz	r1, 800e234 <_realloc_r+0x16>
 800e22a:	4611      	mov	r1, r2
 800e22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e230:	f7fd baf4 	b.w	800b81c <_malloc_r>
 800e234:	b92a      	cbnz	r2, 800e242 <_realloc_r+0x24>
 800e236:	f7fd fa7f 	bl	800b738 <_free_r>
 800e23a:	4625      	mov	r5, r4
 800e23c:	4628      	mov	r0, r5
 800e23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e242:	f000 f8b2 	bl	800e3aa <_malloc_usable_size_r>
 800e246:	4284      	cmp	r4, r0
 800e248:	4606      	mov	r6, r0
 800e24a:	d802      	bhi.n	800e252 <_realloc_r+0x34>
 800e24c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e250:	d8f4      	bhi.n	800e23c <_realloc_r+0x1e>
 800e252:	4621      	mov	r1, r4
 800e254:	4638      	mov	r0, r7
 800e256:	f7fd fae1 	bl	800b81c <_malloc_r>
 800e25a:	4680      	mov	r8, r0
 800e25c:	b908      	cbnz	r0, 800e262 <_realloc_r+0x44>
 800e25e:	4645      	mov	r5, r8
 800e260:	e7ec      	b.n	800e23c <_realloc_r+0x1e>
 800e262:	42b4      	cmp	r4, r6
 800e264:	4622      	mov	r2, r4
 800e266:	4629      	mov	r1, r5
 800e268:	bf28      	it	cs
 800e26a:	4632      	movcs	r2, r6
 800e26c:	f7ff fc46 	bl	800dafc <memcpy>
 800e270:	4629      	mov	r1, r5
 800e272:	4638      	mov	r0, r7
 800e274:	f7fd fa60 	bl	800b738 <_free_r>
 800e278:	e7f1      	b.n	800e25e <_realloc_r+0x40>
	...

0800e27c <_strtoul_l.isra.0>:
 800e27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e280:	4686      	mov	lr, r0
 800e282:	460d      	mov	r5, r1
 800e284:	4e33      	ldr	r6, [pc, #204]	@ (800e354 <_strtoul_l.isra.0+0xd8>)
 800e286:	4628      	mov	r0, r5
 800e288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e28c:	5d37      	ldrb	r7, [r6, r4]
 800e28e:	f017 0708 	ands.w	r7, r7, #8
 800e292:	d1f8      	bne.n	800e286 <_strtoul_l.isra.0+0xa>
 800e294:	2c2d      	cmp	r4, #45	@ 0x2d
 800e296:	d110      	bne.n	800e2ba <_strtoul_l.isra.0+0x3e>
 800e298:	2701      	movs	r7, #1
 800e29a:	782c      	ldrb	r4, [r5, #0]
 800e29c:	1c85      	adds	r5, r0, #2
 800e29e:	f033 0010 	bics.w	r0, r3, #16
 800e2a2:	d115      	bne.n	800e2d0 <_strtoul_l.isra.0+0x54>
 800e2a4:	2c30      	cmp	r4, #48	@ 0x30
 800e2a6:	d10d      	bne.n	800e2c4 <_strtoul_l.isra.0+0x48>
 800e2a8:	7828      	ldrb	r0, [r5, #0]
 800e2aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e2ae:	2858      	cmp	r0, #88	@ 0x58
 800e2b0:	d108      	bne.n	800e2c4 <_strtoul_l.isra.0+0x48>
 800e2b2:	786c      	ldrb	r4, [r5, #1]
 800e2b4:	3502      	adds	r5, #2
 800e2b6:	2310      	movs	r3, #16
 800e2b8:	e00a      	b.n	800e2d0 <_strtoul_l.isra.0+0x54>
 800e2ba:	2c2b      	cmp	r4, #43	@ 0x2b
 800e2bc:	bf04      	itt	eq
 800e2be:	782c      	ldrbeq	r4, [r5, #0]
 800e2c0:	1c85      	addeq	r5, r0, #2
 800e2c2:	e7ec      	b.n	800e29e <_strtoul_l.isra.0+0x22>
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1f6      	bne.n	800e2b6 <_strtoul_l.isra.0+0x3a>
 800e2c8:	2c30      	cmp	r4, #48	@ 0x30
 800e2ca:	bf14      	ite	ne
 800e2cc:	230a      	movne	r3, #10
 800e2ce:	2308      	moveq	r3, #8
 800e2d0:	f04f 38ff 	mov.w	r8, #4294967295
 800e2d4:	fbb8 f8f3 	udiv	r8, r8, r3
 800e2d8:	2600      	movs	r6, #0
 800e2da:	fb03 f908 	mul.w	r9, r3, r8
 800e2de:	4630      	mov	r0, r6
 800e2e0:	ea6f 0909 	mvn.w	r9, r9
 800e2e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e2e8:	f1bc 0f09 	cmp.w	ip, #9
 800e2ec:	d810      	bhi.n	800e310 <_strtoul_l.isra.0+0x94>
 800e2ee:	4664      	mov	r4, ip
 800e2f0:	42a3      	cmp	r3, r4
 800e2f2:	dd1e      	ble.n	800e332 <_strtoul_l.isra.0+0xb6>
 800e2f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e2f8:	d007      	beq.n	800e30a <_strtoul_l.isra.0+0x8e>
 800e2fa:	4580      	cmp	r8, r0
 800e2fc:	d316      	bcc.n	800e32c <_strtoul_l.isra.0+0xb0>
 800e2fe:	d101      	bne.n	800e304 <_strtoul_l.isra.0+0x88>
 800e300:	45a1      	cmp	r9, r4
 800e302:	db13      	blt.n	800e32c <_strtoul_l.isra.0+0xb0>
 800e304:	2601      	movs	r6, #1
 800e306:	fb00 4003 	mla	r0, r0, r3, r4
 800e30a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e30e:	e7e9      	b.n	800e2e4 <_strtoul_l.isra.0+0x68>
 800e310:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e314:	f1bc 0f19 	cmp.w	ip, #25
 800e318:	d801      	bhi.n	800e31e <_strtoul_l.isra.0+0xa2>
 800e31a:	3c37      	subs	r4, #55	@ 0x37
 800e31c:	e7e8      	b.n	800e2f0 <_strtoul_l.isra.0+0x74>
 800e31e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e322:	f1bc 0f19 	cmp.w	ip, #25
 800e326:	d804      	bhi.n	800e332 <_strtoul_l.isra.0+0xb6>
 800e328:	3c57      	subs	r4, #87	@ 0x57
 800e32a:	e7e1      	b.n	800e2f0 <_strtoul_l.isra.0+0x74>
 800e32c:	f04f 36ff 	mov.w	r6, #4294967295
 800e330:	e7eb      	b.n	800e30a <_strtoul_l.isra.0+0x8e>
 800e332:	1c73      	adds	r3, r6, #1
 800e334:	d106      	bne.n	800e344 <_strtoul_l.isra.0+0xc8>
 800e336:	2322      	movs	r3, #34	@ 0x22
 800e338:	4630      	mov	r0, r6
 800e33a:	f8ce 3000 	str.w	r3, [lr]
 800e33e:	b932      	cbnz	r2, 800e34e <_strtoul_l.isra.0+0xd2>
 800e340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e344:	b107      	cbz	r7, 800e348 <_strtoul_l.isra.0+0xcc>
 800e346:	4240      	negs	r0, r0
 800e348:	2a00      	cmp	r2, #0
 800e34a:	d0f9      	beq.n	800e340 <_strtoul_l.isra.0+0xc4>
 800e34c:	b106      	cbz	r6, 800e350 <_strtoul_l.isra.0+0xd4>
 800e34e:	1e69      	subs	r1, r5, #1
 800e350:	6011      	str	r1, [r2, #0]
 800e352:	e7f5      	b.n	800e340 <_strtoul_l.isra.0+0xc4>
 800e354:	0800ecc9 	.word	0x0800ecc9

0800e358 <_strtoul_r>:
 800e358:	f7ff bf90 	b.w	800e27c <_strtoul_l.isra.0>

0800e35c <__ascii_wctomb>:
 800e35c:	4603      	mov	r3, r0
 800e35e:	4608      	mov	r0, r1
 800e360:	b141      	cbz	r1, 800e374 <__ascii_wctomb+0x18>
 800e362:	2aff      	cmp	r2, #255	@ 0xff
 800e364:	d904      	bls.n	800e370 <__ascii_wctomb+0x14>
 800e366:	228a      	movs	r2, #138	@ 0x8a
 800e368:	f04f 30ff 	mov.w	r0, #4294967295
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	4770      	bx	lr
 800e370:	2001      	movs	r0, #1
 800e372:	700a      	strb	r2, [r1, #0]
 800e374:	4770      	bx	lr
	...

0800e378 <fiprintf>:
 800e378:	b40e      	push	{r1, r2, r3}
 800e37a:	b503      	push	{r0, r1, lr}
 800e37c:	4601      	mov	r1, r0
 800e37e:	ab03      	add	r3, sp, #12
 800e380:	4805      	ldr	r0, [pc, #20]	@ (800e398 <fiprintf+0x20>)
 800e382:	f853 2b04 	ldr.w	r2, [r3], #4
 800e386:	6800      	ldr	r0, [r0, #0]
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	f000 f83d 	bl	800e408 <_vfiprintf_r>
 800e38e:	b002      	add	sp, #8
 800e390:	f85d eb04 	ldr.w	lr, [sp], #4
 800e394:	b003      	add	sp, #12
 800e396:	4770      	bx	lr
 800e398:	20000190 	.word	0x20000190

0800e39c <abort>:
 800e39c:	2006      	movs	r0, #6
 800e39e:	b508      	push	{r3, lr}
 800e3a0:	f000 fa06 	bl	800e7b0 <raise>
 800e3a4:	2001      	movs	r0, #1
 800e3a6:	f7f3 fbaa 	bl	8001afe <_exit>

0800e3aa <_malloc_usable_size_r>:
 800e3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ae:	1f18      	subs	r0, r3, #4
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	bfbc      	itt	lt
 800e3b4:	580b      	ldrlt	r3, [r1, r0]
 800e3b6:	18c0      	addlt	r0, r0, r3
 800e3b8:	4770      	bx	lr

0800e3ba <__sfputc_r>:
 800e3ba:	6893      	ldr	r3, [r2, #8]
 800e3bc:	b410      	push	{r4}
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	6093      	str	r3, [r2, #8]
 800e3c4:	da07      	bge.n	800e3d6 <__sfputc_r+0x1c>
 800e3c6:	6994      	ldr	r4, [r2, #24]
 800e3c8:	42a3      	cmp	r3, r4
 800e3ca:	db01      	blt.n	800e3d0 <__sfputc_r+0x16>
 800e3cc:	290a      	cmp	r1, #10
 800e3ce:	d102      	bne.n	800e3d6 <__sfputc_r+0x1c>
 800e3d0:	bc10      	pop	{r4}
 800e3d2:	f000 b931 	b.w	800e638 <__swbuf_r>
 800e3d6:	6813      	ldr	r3, [r2, #0]
 800e3d8:	1c58      	adds	r0, r3, #1
 800e3da:	6010      	str	r0, [r2, #0]
 800e3dc:	7019      	strb	r1, [r3, #0]
 800e3de:	4608      	mov	r0, r1
 800e3e0:	bc10      	pop	{r4}
 800e3e2:	4770      	bx	lr

0800e3e4 <__sfputs_r>:
 800e3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	460f      	mov	r7, r1
 800e3ea:	4614      	mov	r4, r2
 800e3ec:	18d5      	adds	r5, r2, r3
 800e3ee:	42ac      	cmp	r4, r5
 800e3f0:	d101      	bne.n	800e3f6 <__sfputs_r+0x12>
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	e007      	b.n	800e406 <__sfputs_r+0x22>
 800e3f6:	463a      	mov	r2, r7
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fe:	f7ff ffdc 	bl	800e3ba <__sfputc_r>
 800e402:	1c43      	adds	r3, r0, #1
 800e404:	d1f3      	bne.n	800e3ee <__sfputs_r+0xa>
 800e406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e408 <_vfiprintf_r>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	460d      	mov	r5, r1
 800e40e:	4614      	mov	r4, r2
 800e410:	4698      	mov	r8, r3
 800e412:	4606      	mov	r6, r0
 800e414:	b09d      	sub	sp, #116	@ 0x74
 800e416:	b118      	cbz	r0, 800e420 <_vfiprintf_r+0x18>
 800e418:	6a03      	ldr	r3, [r0, #32]
 800e41a:	b90b      	cbnz	r3, 800e420 <_vfiprintf_r+0x18>
 800e41c:	f7fc f9d2 	bl	800a7c4 <__sinit>
 800e420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e422:	07d9      	lsls	r1, r3, #31
 800e424:	d405      	bmi.n	800e432 <_vfiprintf_r+0x2a>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	059a      	lsls	r2, r3, #22
 800e42a:	d402      	bmi.n	800e432 <_vfiprintf_r+0x2a>
 800e42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e42e:	f7fc fb10 	bl	800aa52 <__retarget_lock_acquire_recursive>
 800e432:	89ab      	ldrh	r3, [r5, #12]
 800e434:	071b      	lsls	r3, r3, #28
 800e436:	d501      	bpl.n	800e43c <_vfiprintf_r+0x34>
 800e438:	692b      	ldr	r3, [r5, #16]
 800e43a:	b99b      	cbnz	r3, 800e464 <_vfiprintf_r+0x5c>
 800e43c:	4629      	mov	r1, r5
 800e43e:	4630      	mov	r0, r6
 800e440:	f000 f938 	bl	800e6b4 <__swsetup_r>
 800e444:	b170      	cbz	r0, 800e464 <_vfiprintf_r+0x5c>
 800e446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e448:	07dc      	lsls	r4, r3, #31
 800e44a:	d504      	bpl.n	800e456 <_vfiprintf_r+0x4e>
 800e44c:	f04f 30ff 	mov.w	r0, #4294967295
 800e450:	b01d      	add	sp, #116	@ 0x74
 800e452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e456:	89ab      	ldrh	r3, [r5, #12]
 800e458:	0598      	lsls	r0, r3, #22
 800e45a:	d4f7      	bmi.n	800e44c <_vfiprintf_r+0x44>
 800e45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e45e:	f7fc faf9 	bl	800aa54 <__retarget_lock_release_recursive>
 800e462:	e7f3      	b.n	800e44c <_vfiprintf_r+0x44>
 800e464:	2300      	movs	r3, #0
 800e466:	9309      	str	r3, [sp, #36]	@ 0x24
 800e468:	2320      	movs	r3, #32
 800e46a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e46e:	2330      	movs	r3, #48	@ 0x30
 800e470:	f04f 0901 	mov.w	r9, #1
 800e474:	f8cd 800c 	str.w	r8, [sp, #12]
 800e478:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e624 <_vfiprintf_r+0x21c>
 800e47c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e480:	4623      	mov	r3, r4
 800e482:	469a      	mov	sl, r3
 800e484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e488:	b10a      	cbz	r2, 800e48e <_vfiprintf_r+0x86>
 800e48a:	2a25      	cmp	r2, #37	@ 0x25
 800e48c:	d1f9      	bne.n	800e482 <_vfiprintf_r+0x7a>
 800e48e:	ebba 0b04 	subs.w	fp, sl, r4
 800e492:	d00b      	beq.n	800e4ac <_vfiprintf_r+0xa4>
 800e494:	465b      	mov	r3, fp
 800e496:	4622      	mov	r2, r4
 800e498:	4629      	mov	r1, r5
 800e49a:	4630      	mov	r0, r6
 800e49c:	f7ff ffa2 	bl	800e3e4 <__sfputs_r>
 800e4a0:	3001      	adds	r0, #1
 800e4a2:	f000 80a7 	beq.w	800e5f4 <_vfiprintf_r+0x1ec>
 800e4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4a8:	445a      	add	r2, fp
 800e4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 809f 	beq.w	800e5f4 <_vfiprintf_r+0x1ec>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4c0:	f10a 0a01 	add.w	sl, sl, #1
 800e4c4:	9304      	str	r3, [sp, #16]
 800e4c6:	9307      	str	r3, [sp, #28]
 800e4c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4ce:	4654      	mov	r4, sl
 800e4d0:	2205      	movs	r2, #5
 800e4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d6:	4853      	ldr	r0, [pc, #332]	@ (800e624 <_vfiprintf_r+0x21c>)
 800e4d8:	f7fc fabd 	bl	800aa56 <memchr>
 800e4dc:	9a04      	ldr	r2, [sp, #16]
 800e4de:	b9d8      	cbnz	r0, 800e518 <_vfiprintf_r+0x110>
 800e4e0:	06d1      	lsls	r1, r2, #27
 800e4e2:	bf44      	itt	mi
 800e4e4:	2320      	movmi	r3, #32
 800e4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4ea:	0713      	lsls	r3, r2, #28
 800e4ec:	bf44      	itt	mi
 800e4ee:	232b      	movmi	r3, #43	@ 0x2b
 800e4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4fa:	d015      	beq.n	800e528 <_vfiprintf_r+0x120>
 800e4fc:	4654      	mov	r4, sl
 800e4fe:	2000      	movs	r0, #0
 800e500:	f04f 0c0a 	mov.w	ip, #10
 800e504:	9a07      	ldr	r2, [sp, #28]
 800e506:	4621      	mov	r1, r4
 800e508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e50c:	3b30      	subs	r3, #48	@ 0x30
 800e50e:	2b09      	cmp	r3, #9
 800e510:	d94b      	bls.n	800e5aa <_vfiprintf_r+0x1a2>
 800e512:	b1b0      	cbz	r0, 800e542 <_vfiprintf_r+0x13a>
 800e514:	9207      	str	r2, [sp, #28]
 800e516:	e014      	b.n	800e542 <_vfiprintf_r+0x13a>
 800e518:	eba0 0308 	sub.w	r3, r0, r8
 800e51c:	fa09 f303 	lsl.w	r3, r9, r3
 800e520:	4313      	orrs	r3, r2
 800e522:	46a2      	mov	sl, r4
 800e524:	9304      	str	r3, [sp, #16]
 800e526:	e7d2      	b.n	800e4ce <_vfiprintf_r+0xc6>
 800e528:	9b03      	ldr	r3, [sp, #12]
 800e52a:	1d19      	adds	r1, r3, #4
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	9103      	str	r1, [sp, #12]
 800e530:	2b00      	cmp	r3, #0
 800e532:	bfbb      	ittet	lt
 800e534:	425b      	neglt	r3, r3
 800e536:	f042 0202 	orrlt.w	r2, r2, #2
 800e53a:	9307      	strge	r3, [sp, #28]
 800e53c:	9307      	strlt	r3, [sp, #28]
 800e53e:	bfb8      	it	lt
 800e540:	9204      	strlt	r2, [sp, #16]
 800e542:	7823      	ldrb	r3, [r4, #0]
 800e544:	2b2e      	cmp	r3, #46	@ 0x2e
 800e546:	d10a      	bne.n	800e55e <_vfiprintf_r+0x156>
 800e548:	7863      	ldrb	r3, [r4, #1]
 800e54a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e54c:	d132      	bne.n	800e5b4 <_vfiprintf_r+0x1ac>
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	3402      	adds	r4, #2
 800e552:	1d1a      	adds	r2, r3, #4
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	9203      	str	r2, [sp, #12]
 800e558:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e55c:	9305      	str	r3, [sp, #20]
 800e55e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e628 <_vfiprintf_r+0x220>
 800e562:	2203      	movs	r2, #3
 800e564:	4650      	mov	r0, sl
 800e566:	7821      	ldrb	r1, [r4, #0]
 800e568:	f7fc fa75 	bl	800aa56 <memchr>
 800e56c:	b138      	cbz	r0, 800e57e <_vfiprintf_r+0x176>
 800e56e:	2240      	movs	r2, #64	@ 0x40
 800e570:	9b04      	ldr	r3, [sp, #16]
 800e572:	eba0 000a 	sub.w	r0, r0, sl
 800e576:	4082      	lsls	r2, r0
 800e578:	4313      	orrs	r3, r2
 800e57a:	3401      	adds	r4, #1
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e582:	2206      	movs	r2, #6
 800e584:	4829      	ldr	r0, [pc, #164]	@ (800e62c <_vfiprintf_r+0x224>)
 800e586:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e58a:	f7fc fa64 	bl	800aa56 <memchr>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d03f      	beq.n	800e612 <_vfiprintf_r+0x20a>
 800e592:	4b27      	ldr	r3, [pc, #156]	@ (800e630 <_vfiprintf_r+0x228>)
 800e594:	bb1b      	cbnz	r3, 800e5de <_vfiprintf_r+0x1d6>
 800e596:	9b03      	ldr	r3, [sp, #12]
 800e598:	3307      	adds	r3, #7
 800e59a:	f023 0307 	bic.w	r3, r3, #7
 800e59e:	3308      	adds	r3, #8
 800e5a0:	9303      	str	r3, [sp, #12]
 800e5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5a4:	443b      	add	r3, r7
 800e5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5a8:	e76a      	b.n	800e480 <_vfiprintf_r+0x78>
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	2001      	movs	r0, #1
 800e5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5b2:	e7a8      	b.n	800e506 <_vfiprintf_r+0xfe>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f04f 0c0a 	mov.w	ip, #10
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	3401      	adds	r4, #1
 800e5be:	9305      	str	r3, [sp, #20]
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5c6:	3a30      	subs	r2, #48	@ 0x30
 800e5c8:	2a09      	cmp	r2, #9
 800e5ca:	d903      	bls.n	800e5d4 <_vfiprintf_r+0x1cc>
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d0c6      	beq.n	800e55e <_vfiprintf_r+0x156>
 800e5d0:	9105      	str	r1, [sp, #20]
 800e5d2:	e7c4      	b.n	800e55e <_vfiprintf_r+0x156>
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5dc:	e7f0      	b.n	800e5c0 <_vfiprintf_r+0x1b8>
 800e5de:	ab03      	add	r3, sp, #12
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	4b13      	ldr	r3, [pc, #76]	@ (800e634 <_vfiprintf_r+0x22c>)
 800e5e8:	a904      	add	r1, sp, #16
 800e5ea:	f7fb fa99 	bl	8009b20 <_printf_float>
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	1c78      	adds	r0, r7, #1
 800e5f2:	d1d6      	bne.n	800e5a2 <_vfiprintf_r+0x19a>
 800e5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5f6:	07d9      	lsls	r1, r3, #31
 800e5f8:	d405      	bmi.n	800e606 <_vfiprintf_r+0x1fe>
 800e5fa:	89ab      	ldrh	r3, [r5, #12]
 800e5fc:	059a      	lsls	r2, r3, #22
 800e5fe:	d402      	bmi.n	800e606 <_vfiprintf_r+0x1fe>
 800e600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e602:	f7fc fa27 	bl	800aa54 <__retarget_lock_release_recursive>
 800e606:	89ab      	ldrh	r3, [r5, #12]
 800e608:	065b      	lsls	r3, r3, #25
 800e60a:	f53f af1f 	bmi.w	800e44c <_vfiprintf_r+0x44>
 800e60e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e610:	e71e      	b.n	800e450 <_vfiprintf_r+0x48>
 800e612:	ab03      	add	r3, sp, #12
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	462a      	mov	r2, r5
 800e618:	4630      	mov	r0, r6
 800e61a:	4b06      	ldr	r3, [pc, #24]	@ (800e634 <_vfiprintf_r+0x22c>)
 800e61c:	a904      	add	r1, sp, #16
 800e61e:	f7fb fd1d 	bl	800a05c <_printf_i>
 800e622:	e7e4      	b.n	800e5ee <_vfiprintf_r+0x1e6>
 800e624:	0800eaa9 	.word	0x0800eaa9
 800e628:	0800eaaf 	.word	0x0800eaaf
 800e62c:	0800eab3 	.word	0x0800eab3
 800e630:	08009b21 	.word	0x08009b21
 800e634:	0800e3e5 	.word	0x0800e3e5

0800e638 <__swbuf_r>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	460e      	mov	r6, r1
 800e63c:	4614      	mov	r4, r2
 800e63e:	4605      	mov	r5, r0
 800e640:	b118      	cbz	r0, 800e64a <__swbuf_r+0x12>
 800e642:	6a03      	ldr	r3, [r0, #32]
 800e644:	b90b      	cbnz	r3, 800e64a <__swbuf_r+0x12>
 800e646:	f7fc f8bd 	bl	800a7c4 <__sinit>
 800e64a:	69a3      	ldr	r3, [r4, #24]
 800e64c:	60a3      	str	r3, [r4, #8]
 800e64e:	89a3      	ldrh	r3, [r4, #12]
 800e650:	071a      	lsls	r2, r3, #28
 800e652:	d501      	bpl.n	800e658 <__swbuf_r+0x20>
 800e654:	6923      	ldr	r3, [r4, #16]
 800e656:	b943      	cbnz	r3, 800e66a <__swbuf_r+0x32>
 800e658:	4621      	mov	r1, r4
 800e65a:	4628      	mov	r0, r5
 800e65c:	f000 f82a 	bl	800e6b4 <__swsetup_r>
 800e660:	b118      	cbz	r0, 800e66a <__swbuf_r+0x32>
 800e662:	f04f 37ff 	mov.w	r7, #4294967295
 800e666:	4638      	mov	r0, r7
 800e668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	6922      	ldr	r2, [r4, #16]
 800e66e:	b2f6      	uxtb	r6, r6
 800e670:	1a98      	subs	r0, r3, r2
 800e672:	6963      	ldr	r3, [r4, #20]
 800e674:	4637      	mov	r7, r6
 800e676:	4283      	cmp	r3, r0
 800e678:	dc05      	bgt.n	800e686 <__swbuf_r+0x4e>
 800e67a:	4621      	mov	r1, r4
 800e67c:	4628      	mov	r0, r5
 800e67e:	f7ff f967 	bl	800d950 <_fflush_r>
 800e682:	2800      	cmp	r0, #0
 800e684:	d1ed      	bne.n	800e662 <__swbuf_r+0x2a>
 800e686:	68a3      	ldr	r3, [r4, #8]
 800e688:	3b01      	subs	r3, #1
 800e68a:	60a3      	str	r3, [r4, #8]
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	1c5a      	adds	r2, r3, #1
 800e690:	6022      	str	r2, [r4, #0]
 800e692:	701e      	strb	r6, [r3, #0]
 800e694:	6962      	ldr	r2, [r4, #20]
 800e696:	1c43      	adds	r3, r0, #1
 800e698:	429a      	cmp	r2, r3
 800e69a:	d004      	beq.n	800e6a6 <__swbuf_r+0x6e>
 800e69c:	89a3      	ldrh	r3, [r4, #12]
 800e69e:	07db      	lsls	r3, r3, #31
 800e6a0:	d5e1      	bpl.n	800e666 <__swbuf_r+0x2e>
 800e6a2:	2e0a      	cmp	r6, #10
 800e6a4:	d1df      	bne.n	800e666 <__swbuf_r+0x2e>
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f7ff f951 	bl	800d950 <_fflush_r>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d0d9      	beq.n	800e666 <__swbuf_r+0x2e>
 800e6b2:	e7d6      	b.n	800e662 <__swbuf_r+0x2a>

0800e6b4 <__swsetup_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4b29      	ldr	r3, [pc, #164]	@ (800e75c <__swsetup_r+0xa8>)
 800e6b8:	4605      	mov	r5, r0
 800e6ba:	6818      	ldr	r0, [r3, #0]
 800e6bc:	460c      	mov	r4, r1
 800e6be:	b118      	cbz	r0, 800e6c8 <__swsetup_r+0x14>
 800e6c0:	6a03      	ldr	r3, [r0, #32]
 800e6c2:	b90b      	cbnz	r3, 800e6c8 <__swsetup_r+0x14>
 800e6c4:	f7fc f87e 	bl	800a7c4 <__sinit>
 800e6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6cc:	0719      	lsls	r1, r3, #28
 800e6ce:	d422      	bmi.n	800e716 <__swsetup_r+0x62>
 800e6d0:	06da      	lsls	r2, r3, #27
 800e6d2:	d407      	bmi.n	800e6e4 <__swsetup_r+0x30>
 800e6d4:	2209      	movs	r2, #9
 800e6d6:	602a      	str	r2, [r5, #0]
 800e6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	e033      	b.n	800e74c <__swsetup_r+0x98>
 800e6e4:	0758      	lsls	r0, r3, #29
 800e6e6:	d512      	bpl.n	800e70e <__swsetup_r+0x5a>
 800e6e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6ea:	b141      	cbz	r1, 800e6fe <__swsetup_r+0x4a>
 800e6ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6f0:	4299      	cmp	r1, r3
 800e6f2:	d002      	beq.n	800e6fa <__swsetup_r+0x46>
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f7fd f81f 	bl	800b738 <_free_r>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6fe:	89a3      	ldrh	r3, [r4, #12]
 800e700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e704:	81a3      	strh	r3, [r4, #12]
 800e706:	2300      	movs	r3, #0
 800e708:	6063      	str	r3, [r4, #4]
 800e70a:	6923      	ldr	r3, [r4, #16]
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	f043 0308 	orr.w	r3, r3, #8
 800e714:	81a3      	strh	r3, [r4, #12]
 800e716:	6923      	ldr	r3, [r4, #16]
 800e718:	b94b      	cbnz	r3, 800e72e <__swsetup_r+0x7a>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e724:	d003      	beq.n	800e72e <__swsetup_r+0x7a>
 800e726:	4621      	mov	r1, r4
 800e728:	4628      	mov	r0, r5
 800e72a:	f000 f882 	bl	800e832 <__smakebuf_r>
 800e72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e732:	f013 0201 	ands.w	r2, r3, #1
 800e736:	d00a      	beq.n	800e74e <__swsetup_r+0x9a>
 800e738:	2200      	movs	r2, #0
 800e73a:	60a2      	str	r2, [r4, #8]
 800e73c:	6962      	ldr	r2, [r4, #20]
 800e73e:	4252      	negs	r2, r2
 800e740:	61a2      	str	r2, [r4, #24]
 800e742:	6922      	ldr	r2, [r4, #16]
 800e744:	b942      	cbnz	r2, 800e758 <__swsetup_r+0xa4>
 800e746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e74a:	d1c5      	bne.n	800e6d8 <__swsetup_r+0x24>
 800e74c:	bd38      	pop	{r3, r4, r5, pc}
 800e74e:	0799      	lsls	r1, r3, #30
 800e750:	bf58      	it	pl
 800e752:	6962      	ldrpl	r2, [r4, #20]
 800e754:	60a2      	str	r2, [r4, #8]
 800e756:	e7f4      	b.n	800e742 <__swsetup_r+0x8e>
 800e758:	2000      	movs	r0, #0
 800e75a:	e7f7      	b.n	800e74c <__swsetup_r+0x98>
 800e75c:	20000190 	.word	0x20000190

0800e760 <_raise_r>:
 800e760:	291f      	cmp	r1, #31
 800e762:	b538      	push	{r3, r4, r5, lr}
 800e764:	4605      	mov	r5, r0
 800e766:	460c      	mov	r4, r1
 800e768:	d904      	bls.n	800e774 <_raise_r+0x14>
 800e76a:	2316      	movs	r3, #22
 800e76c:	6003      	str	r3, [r0, #0]
 800e76e:	f04f 30ff 	mov.w	r0, #4294967295
 800e772:	bd38      	pop	{r3, r4, r5, pc}
 800e774:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e776:	b112      	cbz	r2, 800e77e <_raise_r+0x1e>
 800e778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e77c:	b94b      	cbnz	r3, 800e792 <_raise_r+0x32>
 800e77e:	4628      	mov	r0, r5
 800e780:	f000 f830 	bl	800e7e4 <_getpid_r>
 800e784:	4622      	mov	r2, r4
 800e786:	4601      	mov	r1, r0
 800e788:	4628      	mov	r0, r5
 800e78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e78e:	f000 b817 	b.w	800e7c0 <_kill_r>
 800e792:	2b01      	cmp	r3, #1
 800e794:	d00a      	beq.n	800e7ac <_raise_r+0x4c>
 800e796:	1c59      	adds	r1, r3, #1
 800e798:	d103      	bne.n	800e7a2 <_raise_r+0x42>
 800e79a:	2316      	movs	r3, #22
 800e79c:	6003      	str	r3, [r0, #0]
 800e79e:	2001      	movs	r0, #1
 800e7a0:	e7e7      	b.n	800e772 <_raise_r+0x12>
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e7aa:	4798      	blx	r3
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	e7e0      	b.n	800e772 <_raise_r+0x12>

0800e7b0 <raise>:
 800e7b0:	4b02      	ldr	r3, [pc, #8]	@ (800e7bc <raise+0xc>)
 800e7b2:	4601      	mov	r1, r0
 800e7b4:	6818      	ldr	r0, [r3, #0]
 800e7b6:	f7ff bfd3 	b.w	800e760 <_raise_r>
 800e7ba:	bf00      	nop
 800e7bc:	20000190 	.word	0x20000190

0800e7c0 <_kill_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	4d06      	ldr	r5, [pc, #24]	@ (800e7e0 <_kill_r+0x20>)
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	4608      	mov	r0, r1
 800e7ca:	4611      	mov	r1, r2
 800e7cc:	602b      	str	r3, [r5, #0]
 800e7ce:	f7f3 f986 	bl	8001ade <_kill>
 800e7d2:	1c43      	adds	r3, r0, #1
 800e7d4:	d102      	bne.n	800e7dc <_kill_r+0x1c>
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	b103      	cbz	r3, 800e7dc <_kill_r+0x1c>
 800e7da:	6023      	str	r3, [r4, #0]
 800e7dc:	bd38      	pop	{r3, r4, r5, pc}
 800e7de:	bf00      	nop
 800e7e0:	200017a8 	.word	0x200017a8

0800e7e4 <_getpid_r>:
 800e7e4:	f7f3 b974 	b.w	8001ad0 <_getpid>

0800e7e8 <__swhatbuf_r>:
 800e7e8:	b570      	push	{r4, r5, r6, lr}
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f0:	4615      	mov	r5, r2
 800e7f2:	2900      	cmp	r1, #0
 800e7f4:	461e      	mov	r6, r3
 800e7f6:	b096      	sub	sp, #88	@ 0x58
 800e7f8:	da0c      	bge.n	800e814 <__swhatbuf_r+0x2c>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e802:	bf14      	ite	ne
 800e804:	2340      	movne	r3, #64	@ 0x40
 800e806:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e80a:	2000      	movs	r0, #0
 800e80c:	6031      	str	r1, [r6, #0]
 800e80e:	602b      	str	r3, [r5, #0]
 800e810:	b016      	add	sp, #88	@ 0x58
 800e812:	bd70      	pop	{r4, r5, r6, pc}
 800e814:	466a      	mov	r2, sp
 800e816:	f000 f849 	bl	800e8ac <_fstat_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	dbed      	blt.n	800e7fa <__swhatbuf_r+0x12>
 800e81e:	9901      	ldr	r1, [sp, #4]
 800e820:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e824:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e828:	4259      	negs	r1, r3
 800e82a:	4159      	adcs	r1, r3
 800e82c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e830:	e7eb      	b.n	800e80a <__swhatbuf_r+0x22>

0800e832 <__smakebuf_r>:
 800e832:	898b      	ldrh	r3, [r1, #12]
 800e834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e836:	079d      	lsls	r5, r3, #30
 800e838:	4606      	mov	r6, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	d507      	bpl.n	800e84e <__smakebuf_r+0x1c>
 800e83e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	6123      	str	r3, [r4, #16]
 800e846:	2301      	movs	r3, #1
 800e848:	6163      	str	r3, [r4, #20]
 800e84a:	b003      	add	sp, #12
 800e84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e84e:	466a      	mov	r2, sp
 800e850:	ab01      	add	r3, sp, #4
 800e852:	f7ff ffc9 	bl	800e7e8 <__swhatbuf_r>
 800e856:	9f00      	ldr	r7, [sp, #0]
 800e858:	4605      	mov	r5, r0
 800e85a:	4639      	mov	r1, r7
 800e85c:	4630      	mov	r0, r6
 800e85e:	f7fc ffdd 	bl	800b81c <_malloc_r>
 800e862:	b948      	cbnz	r0, 800e878 <__smakebuf_r+0x46>
 800e864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e868:	059a      	lsls	r2, r3, #22
 800e86a:	d4ee      	bmi.n	800e84a <__smakebuf_r+0x18>
 800e86c:	f023 0303 	bic.w	r3, r3, #3
 800e870:	f043 0302 	orr.w	r3, r3, #2
 800e874:	81a3      	strh	r3, [r4, #12]
 800e876:	e7e2      	b.n	800e83e <__smakebuf_r+0xc>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	9b01      	ldr	r3, [sp, #4]
 800e886:	6020      	str	r0, [r4, #0]
 800e888:	b15b      	cbz	r3, 800e8a2 <__smakebuf_r+0x70>
 800e88a:	4630      	mov	r0, r6
 800e88c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e890:	f000 f81e 	bl	800e8d0 <_isatty_r>
 800e894:	b128      	cbz	r0, 800e8a2 <__smakebuf_r+0x70>
 800e896:	89a3      	ldrh	r3, [r4, #12]
 800e898:	f023 0303 	bic.w	r3, r3, #3
 800e89c:	f043 0301 	orr.w	r3, r3, #1
 800e8a0:	81a3      	strh	r3, [r4, #12]
 800e8a2:	89a3      	ldrh	r3, [r4, #12]
 800e8a4:	431d      	orrs	r5, r3
 800e8a6:	81a5      	strh	r5, [r4, #12]
 800e8a8:	e7cf      	b.n	800e84a <__smakebuf_r+0x18>
	...

0800e8ac <_fstat_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	4d06      	ldr	r5, [pc, #24]	@ (800e8cc <_fstat_r+0x20>)
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	602b      	str	r3, [r5, #0]
 800e8ba:	f7f3 f96f 	bl	8001b9c <_fstat>
 800e8be:	1c43      	adds	r3, r0, #1
 800e8c0:	d102      	bne.n	800e8c8 <_fstat_r+0x1c>
 800e8c2:	682b      	ldr	r3, [r5, #0]
 800e8c4:	b103      	cbz	r3, 800e8c8 <_fstat_r+0x1c>
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ca:	bf00      	nop
 800e8cc:	200017a8 	.word	0x200017a8

0800e8d0 <_isatty_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	4d05      	ldr	r5, [pc, #20]	@ (800e8ec <_isatty_r+0x1c>)
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f3 f96d 	bl	8001bba <_isatty>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_isatty_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_isatty_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	200017a8 	.word	0x200017a8

0800e8f0 <_init>:
 800e8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f2:	bf00      	nop
 800e8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8f6:	bc08      	pop	{r3}
 800e8f8:	469e      	mov	lr, r3
 800e8fa:	4770      	bx	lr

0800e8fc <_fini>:
 800e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fe:	bf00      	nop
 800e900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e902:	bc08      	pop	{r3}
 800e904:	469e      	mov	lr, r3
 800e906:	4770      	bx	lr
